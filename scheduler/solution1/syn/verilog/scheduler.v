// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="scheduler,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.280000,HLS_SYN_LAT=4114,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1420,HLS_SYN_LUT=1223}" *)

module scheduler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sched_interfaces_context_current_node_address0,
        sched_interfaces_context_current_node_ce0,
        sched_interfaces_context_current_node_q0,
        sched_interfaces_context_next_node_address0,
        sched_interfaces_context_next_node_ce0,
        sched_interfaces_context_next_node_q0,
        sched_interfaces_context_state_address0,
        sched_interfaces_context_state_ce0,
        sched_interfaces_context_state_q0,
        sched_interfaces_schedule_V_address0,
        sched_interfaces_schedule_V_ce0,
        sched_interfaces_schedule_V_q0,
        sched_interfaces_ack_V_address0,
        sched_interfaces_ack_V_ce0,
        sched_interfaces_ack_V_we0,
        sched_interfaces_ack_V_d0,
        setup_interfaces_context_current_node_address0,
        setup_interfaces_context_current_node_ce0,
        setup_interfaces_context_current_node_we0,
        setup_interfaces_context_current_node_d0,
        setup_interfaces_context_next_node_address0,
        setup_interfaces_context_next_node_ce0,
        setup_interfaces_context_next_node_we0,
        setup_interfaces_context_next_node_d0,
        setup_interfaces_context_state_address0,
        setup_interfaces_context_state_ce0,
        setup_interfaces_context_state_we0,
        setup_interfaces_context_state_d0,
        setup_interfaces_restart_V_address0,
        setup_interfaces_restart_V_ce0,
        setup_interfaces_restart_V_we0,
        setup_interfaces_restart_V_d0,
        setup_interfaces_core_halted_V_address0,
        setup_interfaces_core_halted_V_ce0,
        setup_interfaces_core_halted_V_q0,
        finished,
        finished_ap_vld
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] sched_interfaces_context_current_node_address0;
output   sched_interfaces_context_current_node_ce0;
input  [31:0] sched_interfaces_context_current_node_q0;
output  [0:0] sched_interfaces_context_next_node_address0;
output   sched_interfaces_context_next_node_ce0;
input  [31:0] sched_interfaces_context_next_node_q0;
output  [0:0] sched_interfaces_context_state_address0;
output   sched_interfaces_context_state_ce0;
input  [31:0] sched_interfaces_context_state_q0;
output  [0:0] sched_interfaces_schedule_V_address0;
output   sched_interfaces_schedule_V_ce0;
input  [0:0] sched_interfaces_schedule_V_q0;
output  [0:0] sched_interfaces_ack_V_address0;
output   sched_interfaces_ack_V_ce0;
output   sched_interfaces_ack_V_we0;
output  [0:0] sched_interfaces_ack_V_d0;
output  [0:0] setup_interfaces_context_current_node_address0;
output   setup_interfaces_context_current_node_ce0;
output   setup_interfaces_context_current_node_we0;
output  [31:0] setup_interfaces_context_current_node_d0;
output  [0:0] setup_interfaces_context_next_node_address0;
output   setup_interfaces_context_next_node_ce0;
output   setup_interfaces_context_next_node_we0;
output  [31:0] setup_interfaces_context_next_node_d0;
output  [0:0] setup_interfaces_context_state_address0;
output   setup_interfaces_context_state_ce0;
output   setup_interfaces_context_state_we0;
output  [31:0] setup_interfaces_context_state_d0;
output  [0:0] setup_interfaces_restart_V_address0;
output   setup_interfaces_restart_V_ce0;
output   setup_interfaces_restart_V_we0;
output  [0:0] setup_interfaces_restart_V_d0;
output  [0:0] setup_interfaces_core_halted_V_address0;
output   setup_interfaces_core_halted_V_ce0;
input  [0:0] setup_interfaces_core_halted_V_q0;
output  [31:0] finished;
output   finished_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sched_interfaces_context_current_node_ce0;
reg sched_interfaces_context_next_node_ce0;
reg sched_interfaces_context_state_ce0;
reg sched_interfaces_schedule_V_ce0;
reg sched_interfaces_ack_V_ce0;
reg sched_interfaces_ack_V_we0;
reg setup_interfaces_context_current_node_ce0;
reg setup_interfaces_context_current_node_we0;
reg setup_interfaces_context_next_node_ce0;
reg setup_interfaces_context_next_node_we0;
reg setup_interfaces_context_state_ce0;
reg setup_interfaces_context_state_we0;
reg setup_interfaces_restart_V_ce0;
reg setup_interfaces_restart_V_we0;
reg setup_interfaces_core_halted_V_ce0;
reg finished_ap_vld;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] queue_head_ptr_load_reg_1074;
wire    ap_CS_fsm_state2;
wire   [1:0] i_2_fu_459_p2;
reg   [1:0] i_2_reg_1084;
wire   [63:0] tmp_fu_465_p1;
reg   [63:0] tmp_reg_1089;
wire   [0:0] exitcond1_fu_453_p2;
wire   [0:0] or_cond_5_fu_490_p2;
reg   [0:0] or_cond_5_reg_1109;
wire    ap_CS_fsm_state3;
reg   [31:0] new_context_current_s_reg_1128;
wire    ap_CS_fsm_state4;
reg   [31:0] new_context_next_nod_reg_1138;
reg   [31:0] new_context_state_reg_1148;
wire   [10:0] j_1_fu_506_p2;
reg   [10:0] j_1_reg_1161;
wire    ap_CS_fsm_state6;
wire   [0:0] ult_fu_512_p2;
reg   [0:0] ult_reg_1166;
wire   [0:0] exitcond2_fu_500_p2;
wire   [0:0] tmp_s_fu_796_p2;
reg   [0:0] tmp_s_reg_1186;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_10_fu_801_p2;
reg   [0:0] tmp_10_reg_1192;
wire   [0:0] tmp_11_fu_806_p2;
reg   [0:0] tmp_11_reg_1197;
wire   [0:0] match_found_1_fu_868_p2;
wire    ap_CS_fsm_state8;
wire   [1:0] i_1_fu_880_p2;
reg   [1:0] i_1_reg_1210;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_5_fu_886_p1;
reg   [63:0] tmp_5_reg_1215;
wire   [0:0] exitcond_fu_874_p2;
wire   [0:0] halted_flag_1_fu_908_p2;
reg   [0:0] halted_flag_1_reg_1228;
wire    ap_CS_fsm_state10;
wire   [0:0] demorgan_fu_920_p2;
reg   [0:0] demorgan_reg_1233;
wire   [31:0] queue_head_ptr_1_fu_930_p2;
reg   [31:0] queue_head_ptr_1_reg_1237;
wire   [31:0] new_context_current_1_fu_942_p6;
reg   [31:0] new_context_current_1_reg_1242;
wire   [31:0] new_context_next_nod_1_fu_956_p6;
reg   [31:0] new_context_next_nod_1_reg_1247;
wire   [31:0] new_context_state_1_fu_970_p6;
reg   [31:0] new_context_state_1_reg_1252;
reg   [9:0] history_current_node_address0;
reg    history_current_node_ce0;
reg    history_current_node_we0;
wire   [31:0] history_current_node_q0;
reg   [9:0] history_next_node_address0;
reg    history_next_node_ce0;
reg    history_next_node_we0;
wire   [31:0] history_next_node_q0;
reg   [9:0] history_state_address0;
reg    history_state_ce0;
reg    history_state_we0;
wire   [31:0] history_state_q0;
reg   [1:0] i_reg_341;
wire   [0:0] match_found_phi_fu_356_p4;
reg   [0:0] match_found_reg_352;
wire    ap_CS_fsm_state5;
reg   [10:0] j_reg_364;
reg   [0:0] halted_flag_reg_375;
wire    ap_CS_fsm_state12;
reg   [1:0] i1_reg_387;
wire   [63:0] tmp_8_fu_518_p1;
wire   [63:0] tmp_6_fu_708_p1;
wire    ap_CS_fsm_state11;
reg   [31:0] queue_head_ptr_fu_86;
wire   [31:0] queue_head_ptr_3_fu_715_p2;
reg   [31:0] history_head_ptr_fu_90;
wire   [31:0] history_head_ptr_1_fu_720_p2;
reg   [31:0] queue_3_current_nod_fu_94;
wire   [31:0] queue_3_current_nod_12_fu_597_p3;
reg   [31:0] queue_3_current_nod_1_fu_98;
wire   [31:0] queue_3_current_nod_11_fu_589_p3;
reg   [31:0] queue_3_current_nod_2_fu_102;
wire   [31:0] queue_3_current_nod_9_fu_574_p3;
reg   [31:0] queue_3_current_nod_3_fu_106;
wire   [31:0] queue_3_current_nod_8_fu_559_p3;
reg   [31:0] queue_3_next_node_2_fu_110;
wire   [31:0] queue_3_next_node_7_fu_649_p3;
reg   [31:0] queue_3_next_node_3_fu_114;
wire   [31:0] queue_3_next_node_5_fu_641_p3;
reg   [31:0] queue_3_next_node_6_fu_118;
wire   [31:0] queue_3_next_node_1_fu_626_p3;
reg   [31:0] queue_3_next_node_8_fu_122;
wire   [31:0] queue_3_next_node_fu_611_p3;
reg   [31:0] queue_3_state_2_fu_126;
wire   [31:0] queue_3_state_7_fu_701_p3;
reg   [31:0] queue_3_state_3_fu_130;
wire   [31:0] queue_3_state_5_fu_693_p3;
reg   [31:0] queue_3_state_6_fu_134;
wire   [31:0] queue_3_state_1_fu_678_p3;
reg   [31:0] queue_3_state_8_fu_138;
wire   [31:0] queue_3_state_fu_663_p3;
reg   [31:0] queue_head_ptr_2_fu_154;
wire   [29:0] tmp_1_fu_475_p4;
wire   [0:0] icmp_fu_484_p2;
wire   [31:0] j_cast_fu_496_p1;
wire   [1:0] tmp_14_fu_525_p1;
wire   [0:0] sel_tmp5_fu_540_p2;
wire   [0:0] sel_tmp4_fu_534_p2;
wire   [0:0] sel_tmp3_fu_528_p2;
wire   [0:0] or_cond_fu_546_p2;
wire   [31:0] newSel_fu_552_p3;
wire   [31:0] newSel2_fu_567_p3;
wire   [31:0] queue_3_current_nod_10_fu_582_p3;
wire   [31:0] newSel4_fu_604_p3;
wire   [31:0] newSel6_fu_619_p3;
wire   [31:0] queue_3_next_node_4_fu_634_p3;
wire   [31:0] newSel8_fu_656_p3;
wire   [31:0] newSel1_fu_671_p3;
wire   [31:0] queue_3_state_4_fu_686_p3;
wire   [0:0] rev_fu_811_p2;
wire   [0:0] not_not_fu_822_p2;
wire   [0:0] brmerge_fu_816_p2;
wire   [0:0] sel_tmp_fu_834_p2;
wire   [0:0] tmp2_fu_845_p2;
wire   [0:0] tmp1_fu_840_p2;
wire   [0:0] match_found_0_mux_fu_828_p2;
wire   [0:0] sel_tmp1_fu_849_p2;
wire   [0:0] sel_tmp2_fu_855_p3;
wire   [0:0] sel_tmp19_demorgan_fu_863_p2;
wire   [0:0] tmp_2_fu_891_p2;
wire   [0:0] tmp_3_fu_897_p2;
wire   [0:0] tmp_7_fu_914_p2;
wire   [1:0] tmp_12_fu_926_p1;
wire   [1:0] queue_head_ptr_1_t_fu_936_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

scheduler_historybkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
history_current_node_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(history_current_node_address0),
    .ce0(history_current_node_ce0),
    .we0(history_current_node_we0),
    .d0(new_context_current_s_reg_1128),
    .q0(history_current_node_q0)
);

scheduler_historybkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
history_next_node_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(history_next_node_address0),
    .ce0(history_next_node_ce0),
    .we0(history_next_node_we0),
    .d0(new_context_next_nod_reg_1138),
    .q0(history_next_node_q0)
);

scheduler_historybkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
history_state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(history_state_address0),
    .ce0(history_state_ce0),
    .we0(history_state_we0),
    .d0(new_context_state_reg_1148),
    .q0(history_state_q0)
);

scheduler_mux_42_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
scheduler_mux_42_eOg_U1(
    .din1(queue_3_current_nod_fu_94),
    .din2(queue_3_current_nod_1_fu_98),
    .din3(queue_3_current_nod_2_fu_102),
    .din4(queue_3_current_nod_3_fu_106),
    .din5(queue_head_ptr_1_t_fu_936_p2),
    .dout(new_context_current_1_fu_942_p6)
);

scheduler_mux_42_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
scheduler_mux_42_eOg_U2(
    .din1(queue_3_next_node_2_fu_110),
    .din2(queue_3_next_node_3_fu_114),
    .din3(queue_3_next_node_6_fu_118),
    .din4(queue_3_next_node_8_fu_122),
    .din5(queue_head_ptr_1_t_fu_936_p2),
    .dout(new_context_next_nod_1_fu_956_p6)
);

scheduler_mux_42_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
scheduler_mux_42_eOg_U3(
    .din1(queue_3_state_2_fu_126),
    .din2(queue_3_state_3_fu_130),
    .din3(queue_3_state_6_fu_134),
    .din4(queue_3_state_8_fu_138),
    .din5(queue_head_ptr_1_t_fu_936_p2),
    .dout(new_context_state_1_fu_970_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        halted_flag_reg_375 <= halted_flag_1_reg_1228;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_453_p2 == 1'd1))) begin
        halted_flag_reg_375 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
        history_head_ptr_fu_90 <= history_head_ptr_1_fu_720_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        history_head_ptr_fu_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_reg_387 <= i_1_reg_1210;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_453_p2 == 1'd1))) begin
        i1_reg_387 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((1'd0 == or_cond_5_reg_1109) | (1'd1 == exitcond2_fu_500_p2)))) begin
        i_reg_341 <= i_2_reg_1084;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_341 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_364 <= j_1_reg_1161;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_364 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        match_found_reg_352 <= match_found_1_fu_868_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        match_found_reg_352 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == demorgan_reg_1233))) begin
        queue_head_ptr_2_fu_154 <= queue_head_ptr_1_reg_1237;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_453_p2 == 1'd1))) begin
        queue_head_ptr_2_fu_154 <= queue_head_ptr_fu_86;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
        queue_head_ptr_fu_86 <= queue_head_ptr_3_fu_715_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        queue_head_ptr_fu_86 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        demorgan_reg_1233 <= demorgan_fu_920_p2;
        halted_flag_1_reg_1228 <= halted_flag_1_fu_908_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_1210 <= i_1_fu_880_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_1084 <= i_2_fu_459_p2;
        queue_head_ptr_load_reg_1074 <= queue_head_ptr_fu_86;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1))) begin
        j_1_reg_1161 <= j_1_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == demorgan_fu_920_p2))) begin
        new_context_current_1_reg_1242 <= new_context_current_1_fu_942_p6;
        new_context_next_nod_1_reg_1247 <= new_context_next_nod_1_fu_956_p6;
        new_context_state_1_reg_1252 <= new_context_state_1_fu_970_p6;
        queue_head_ptr_1_reg_1237 <= queue_head_ptr_1_fu_930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        new_context_current_s_reg_1128 <= sched_interfaces_context_current_node_q0;
        new_context_next_nod_reg_1138 <= sched_interfaces_context_next_node_q0;
        new_context_state_reg_1148 <= sched_interfaces_context_state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        or_cond_5_reg_1109 <= or_cond_5_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
        queue_3_current_nod_1_fu_98 <= queue_3_current_nod_11_fu_589_p3;
        queue_3_current_nod_2_fu_102 <= queue_3_current_nod_9_fu_574_p3;
        queue_3_current_nod_3_fu_106 <= queue_3_current_nod_8_fu_559_p3;
        queue_3_current_nod_fu_94 <= queue_3_current_nod_12_fu_597_p3;
        queue_3_next_node_2_fu_110 <= queue_3_next_node_7_fu_649_p3;
        queue_3_next_node_3_fu_114 <= queue_3_next_node_5_fu_641_p3;
        queue_3_next_node_6_fu_118 <= queue_3_next_node_1_fu_626_p3;
        queue_3_next_node_8_fu_122 <= queue_3_next_node_fu_611_p3;
        queue_3_state_2_fu_126 <= queue_3_state_7_fu_701_p3;
        queue_3_state_3_fu_130 <= queue_3_state_5_fu_693_p3;
        queue_3_state_6_fu_134 <= queue_3_state_1_fu_678_p3;
        queue_3_state_8_fu_138 <= queue_3_state_fu_663_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_10_reg_1192 <= tmp_10_fu_801_p2;
        tmp_11_reg_1197 <= tmp_11_fu_806_p2;
        tmp_s_reg_1186 <= tmp_s_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_fu_874_p2))) begin
        tmp_5_reg_1215[1 : 0] <= tmp_5_fu_886_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_453_p2 == 1'd0))) begin
        tmp_reg_1089[1 : 0] <= tmp_fu_465_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd0 == exitcond2_fu_500_p2))) begin
        ult_reg_1166 <= ult_fu_512_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_fu_874_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_fu_874_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_fu_874_p2))) begin
        finished_ap_vld = 1'b1;
    end else begin
        finished_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1))) begin
        if (((1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
            history_current_node_address0 = tmp_6_fu_708_p1;
        end else if ((1'd0 == exitcond2_fu_500_p2)) begin
            history_current_node_address0 = tmp_8_fu_518_p1;
        end else begin
            history_current_node_address0 = 'bx;
        end
    end else begin
        history_current_node_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd0 == exitcond2_fu_500_p2)) | ((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4)))) begin
        history_current_node_ce0 = 1'b1;
    end else begin
        history_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
        history_current_node_we0 = 1'b1;
    end else begin
        history_current_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1))) begin
        if (((1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
            history_next_node_address0 = tmp_6_fu_708_p1;
        end else if ((1'd0 == exitcond2_fu_500_p2)) begin
            history_next_node_address0 = tmp_8_fu_518_p1;
        end else begin
            history_next_node_address0 = 'bx;
        end
    end else begin
        history_next_node_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd0 == exitcond2_fu_500_p2)) | ((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4)))) begin
        history_next_node_ce0 = 1'b1;
    end else begin
        history_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
        history_next_node_we0 = 1'b1;
    end else begin
        history_next_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1))) begin
        if (((1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
            history_state_address0 = tmp_6_fu_708_p1;
        end else if ((1'd0 == exitcond2_fu_500_p2)) begin
            history_state_address0 = tmp_8_fu_518_p1;
        end else begin
            history_state_address0 = 'bx;
        end
    end else begin
        history_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd0 == exitcond2_fu_500_p2)) | ((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4)))) begin
        history_state_ce0 = 1'b1;
    end else begin
        history_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_5_reg_1109 == 1'd1) & (1'd1 == exitcond2_fu_500_p2) & (1'd0 == match_found_phi_fu_356_p4))) begin
        history_state_we0 = 1'b1;
    end else begin
        history_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sched_interfaces_ack_V_ce0 = 1'b1;
    end else begin
        sched_interfaces_ack_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sched_interfaces_ack_V_we0 = 1'b1;
    end else begin
        sched_interfaces_ack_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_current_node_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_next_node_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_state_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sched_interfaces_schedule_V_ce0 = 1'b1;
    end else begin
        sched_interfaces_schedule_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        setup_interfaces_context_current_node_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        setup_interfaces_context_current_node_we0 = 1'b1;
    end else begin
        setup_interfaces_context_current_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        setup_interfaces_context_next_node_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        setup_interfaces_context_next_node_we0 = 1'b1;
    end else begin
        setup_interfaces_context_next_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        setup_interfaces_context_state_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        setup_interfaces_context_state_we0 = 1'b1;
    end else begin
        setup_interfaces_context_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_core_halted_V_ce0 = 1'b1;
    end else begin
        setup_interfaces_core_halted_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        setup_interfaces_restart_V_ce0 = 1'b1;
    end else begin
        setup_interfaces_restart_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        setup_interfaces_restart_V_we0 = 1'b1;
    end else begin
        setup_interfaces_restart_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_453_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == or_cond_5_fu_490_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((1'd0 == or_cond_5_reg_1109) | (1'd1 == exitcond2_fu_500_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_fu_874_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == demorgan_fu_920_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign brmerge_fu_816_p2 = (rev_fu_811_p2 | match_found_reg_352);

assign demorgan_fu_920_p2 = (setup_interfaces_core_halted_V_q0 & tmp_7_fu_914_p2);

assign exitcond1_fu_453_p2 = ((i_reg_341 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_500_p2 = ((j_reg_364 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond_fu_874_p2 = ((i1_reg_387 == 2'd2) ? 1'b1 : 1'b0);

assign finished = tmp_3_fu_897_p2;

assign halted_flag_1_fu_908_p2 = (setup_interfaces_core_halted_V_q0 & halted_flag_reg_375);

assign history_head_ptr_1_fu_720_p2 = (32'd1 + history_head_ptr_fu_90);

assign i_1_fu_880_p2 = (i1_reg_387 + 2'd1);

assign i_2_fu_459_p2 = (i_reg_341 + 2'd1);

assign icmp_fu_484_p2 = ((tmp_1_fu_475_p4 == 30'd0) ? 1'b1 : 1'b0);

assign j_1_fu_506_p2 = (j_reg_364 + 11'd1);

assign j_cast_fu_496_p1 = j_reg_364;

assign match_found_0_mux_fu_828_p2 = (match_found_reg_352 | not_not_fu_822_p2);

assign match_found_1_fu_868_p2 = (sel_tmp2_fu_855_p3 & sel_tmp19_demorgan_fu_863_p2);

assign match_found_phi_fu_356_p4 = match_found_reg_352;

assign newSel1_fu_671_p3 = ((sel_tmp3_fu_528_p2[0:0] === 1'b1) ? new_context_state_reg_1148 : queue_3_state_6_fu_134);

assign newSel2_fu_567_p3 = ((sel_tmp3_fu_528_p2[0:0] === 1'b1) ? new_context_current_s_reg_1128 : queue_3_current_nod_2_fu_102);

assign newSel4_fu_604_p3 = ((sel_tmp3_fu_528_p2[0:0] === 1'b1) ? queue_3_next_node_8_fu_122 : new_context_next_nod_reg_1138);

assign newSel6_fu_619_p3 = ((sel_tmp3_fu_528_p2[0:0] === 1'b1) ? new_context_next_nod_reg_1138 : queue_3_next_node_6_fu_118);

assign newSel8_fu_656_p3 = ((sel_tmp3_fu_528_p2[0:0] === 1'b1) ? queue_3_state_8_fu_138 : new_context_state_reg_1148);

assign newSel_fu_552_p3 = ((sel_tmp3_fu_528_p2[0:0] === 1'b1) ? queue_3_current_nod_3_fu_106 : new_context_current_s_reg_1128);

assign not_not_fu_822_p2 = (rev_fu_811_p2 ^ 1'd1);

assign or_cond_5_fu_490_p2 = (sched_interfaces_schedule_V_q0 & icmp_fu_484_p2);

assign or_cond_fu_546_p2 = (sel_tmp5_fu_540_p2 | sel_tmp4_fu_534_p2);

assign queue_3_current_nod_10_fu_582_p3 = ((sel_tmp4_fu_534_p2[0:0] === 1'b1) ? new_context_current_s_reg_1128 : queue_3_current_nod_1_fu_98);

assign queue_3_current_nod_11_fu_589_p3 = ((sel_tmp5_fu_540_p2[0:0] === 1'b1) ? queue_3_current_nod_1_fu_98 : queue_3_current_nod_10_fu_582_p3);

assign queue_3_current_nod_12_fu_597_p3 = ((sel_tmp5_fu_540_p2[0:0] === 1'b1) ? new_context_current_s_reg_1128 : queue_3_current_nod_fu_94);

assign queue_3_current_nod_8_fu_559_p3 = ((or_cond_fu_546_p2[0:0] === 1'b1) ? queue_3_current_nod_3_fu_106 : newSel_fu_552_p3);

assign queue_3_current_nod_9_fu_574_p3 = ((or_cond_fu_546_p2[0:0] === 1'b1) ? queue_3_current_nod_2_fu_102 : newSel2_fu_567_p3);

assign queue_3_next_node_1_fu_626_p3 = ((or_cond_fu_546_p2[0:0] === 1'b1) ? queue_3_next_node_6_fu_118 : newSel6_fu_619_p3);

assign queue_3_next_node_4_fu_634_p3 = ((sel_tmp4_fu_534_p2[0:0] === 1'b1) ? new_context_next_nod_reg_1138 : queue_3_next_node_3_fu_114);

assign queue_3_next_node_5_fu_641_p3 = ((sel_tmp5_fu_540_p2[0:0] === 1'b1) ? queue_3_next_node_3_fu_114 : queue_3_next_node_4_fu_634_p3);

assign queue_3_next_node_7_fu_649_p3 = ((sel_tmp5_fu_540_p2[0:0] === 1'b1) ? new_context_next_nod_reg_1138 : queue_3_next_node_2_fu_110);

assign queue_3_next_node_fu_611_p3 = ((or_cond_fu_546_p2[0:0] === 1'b1) ? queue_3_next_node_8_fu_122 : newSel4_fu_604_p3);

assign queue_3_state_1_fu_678_p3 = ((or_cond_fu_546_p2[0:0] === 1'b1) ? queue_3_state_6_fu_134 : newSel1_fu_671_p3);

assign queue_3_state_4_fu_686_p3 = ((sel_tmp4_fu_534_p2[0:0] === 1'b1) ? new_context_state_reg_1148 : queue_3_state_3_fu_130);

assign queue_3_state_5_fu_693_p3 = ((sel_tmp5_fu_540_p2[0:0] === 1'b1) ? queue_3_state_3_fu_130 : queue_3_state_4_fu_686_p3);

assign queue_3_state_7_fu_701_p3 = ((sel_tmp5_fu_540_p2[0:0] === 1'b1) ? new_context_state_reg_1148 : queue_3_state_2_fu_126);

assign queue_3_state_fu_663_p3 = ((or_cond_fu_546_p2[0:0] === 1'b1) ? queue_3_state_8_fu_138 : newSel8_fu_656_p3);

assign queue_head_ptr_1_fu_930_p2 = ($signed(32'd4294967295) + $signed(queue_head_ptr_2_fu_154));

assign queue_head_ptr_1_t_fu_936_p2 = ($signed(2'd3) + $signed(tmp_12_fu_926_p1));

assign queue_head_ptr_3_fu_715_p2 = (32'd1 + queue_head_ptr_load_reg_1074);

assign rev_fu_811_p2 = (ult_reg_1166 ^ 1'd1);

assign sched_interfaces_ack_V_address0 = tmp_reg_1089;

assign sched_interfaces_ack_V_d0 = 1'd0;

assign sched_interfaces_context_current_node_address0 = tmp_reg_1089;

assign sched_interfaces_context_next_node_address0 = tmp_reg_1089;

assign sched_interfaces_context_state_address0 = tmp_reg_1089;

assign sched_interfaces_schedule_V_address0 = tmp_fu_465_p1;

assign sel_tmp19_demorgan_fu_863_p2 = (brmerge_fu_816_p2 | tmp_s_reg_1186);

assign sel_tmp1_fu_849_p2 = (tmp2_fu_845_p2 & tmp1_fu_840_p2);

assign sel_tmp2_fu_855_p3 = ((brmerge_fu_816_p2[0:0] === 1'b1) ? match_found_0_mux_fu_828_p2 : sel_tmp1_fu_849_p2);

assign sel_tmp3_fu_528_p2 = ((tmp_14_fu_525_p1 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_534_p2 = ((tmp_14_fu_525_p1 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_540_p2 = ((tmp_14_fu_525_p1 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_834_p2 = (brmerge_fu_816_p2 ^ 1'd1);

assign setup_interfaces_context_current_node_address0 = tmp_5_reg_1215;

assign setup_interfaces_context_current_node_d0 = new_context_current_1_reg_1242;

assign setup_interfaces_context_next_node_address0 = tmp_5_reg_1215;

assign setup_interfaces_context_next_node_d0 = new_context_next_nod_1_reg_1247;

assign setup_interfaces_context_state_address0 = tmp_5_reg_1215;

assign setup_interfaces_context_state_d0 = new_context_state_1_reg_1252;

assign setup_interfaces_core_halted_V_address0 = tmp_5_fu_886_p1;

assign setup_interfaces_restart_V_address0 = tmp_5_reg_1215;

assign setup_interfaces_restart_V_d0 = 1'd0;

assign tmp1_fu_840_p2 = (tmp_s_reg_1186 & sel_tmp_fu_834_p2);

assign tmp2_fu_845_p2 = (tmp_10_reg_1192 & tmp_11_reg_1197);

assign tmp_10_fu_801_p2 = ((history_next_node_q0 == new_context_next_nod_reg_1138) ? 1'b1 : 1'b0);

assign tmp_11_fu_806_p2 = ((history_state_q0 == new_context_state_reg_1148) ? 1'b1 : 1'b0);

assign tmp_12_fu_926_p1 = queue_head_ptr_2_fu_154[1:0];

assign tmp_14_fu_525_p1 = queue_head_ptr_load_reg_1074[1:0];

assign tmp_1_fu_475_p4 = {{queue_head_ptr_load_reg_1074[31:2]}};

assign tmp_2_fu_891_p2 = ((queue_head_ptr_2_fu_154 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_897_p2 = (halted_flag_reg_375 & tmp_2_fu_891_p2);

assign tmp_5_fu_886_p1 = i1_reg_387;

assign tmp_6_fu_708_p1 = history_head_ptr_fu_90;

assign tmp_7_fu_914_p2 = ((queue_head_ptr_2_fu_154 != 32'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_518_p1 = j_reg_364;

assign tmp_fu_465_p1 = i_reg_341;

assign tmp_s_fu_796_p2 = ((history_current_node_q0 == new_context_current_s_reg_1128) ? 1'b1 : 1'b0);

assign ult_fu_512_p2 = ((j_cast_fu_496_p1 < history_head_ptr_fu_90) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_reg_1089[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_1215[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //scheduler

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="scheduler,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.922000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1483,HLS_SYN_LUT=1053}" *)

module scheduler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sched_interfaces_context_current_node_address0,
        sched_interfaces_context_current_node_ce0,
        sched_interfaces_context_current_node_q0,
        sched_interfaces_context_next_node_address0,
        sched_interfaces_context_next_node_ce0,
        sched_interfaces_context_next_node_q0,
        sched_interfaces_context_state_address0,
        sched_interfaces_context_state_ce0,
        sched_interfaces_context_state_q0,
        sched_interfaces_schedule_V_address0,
        sched_interfaces_schedule_V_ce0,
        sched_interfaces_schedule_V_q0,
        sched_interfaces_ack_V_address0,
        sched_interfaces_ack_V_ce0,
        sched_interfaces_ack_V_we0,
        sched_interfaces_ack_V_d0,
        setup_interfaces_context_current_node_address0,
        setup_interfaces_context_current_node_ce0,
        setup_interfaces_context_current_node_we0,
        setup_interfaces_context_current_node_d0,
        setup_interfaces_context_next_node_address0,
        setup_interfaces_context_next_node_ce0,
        setup_interfaces_context_next_node_we0,
        setup_interfaces_context_next_node_d0,
        setup_interfaces_context_state_address0,
        setup_interfaces_context_state_ce0,
        setup_interfaces_context_state_we0,
        setup_interfaces_context_state_d0,
        setup_interfaces_restart_V_address0,
        setup_interfaces_restart_V_ce0,
        setup_interfaces_restart_V_we0,
        setup_interfaces_restart_V_d0,
        setup_interfaces_core_halted_V_address0,
        setup_interfaces_core_halted_V_ce0,
        setup_interfaces_core_halted_V_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] sched_interfaces_context_current_node_address0;
output   sched_interfaces_context_current_node_ce0;
input  [31:0] sched_interfaces_context_current_node_q0;
output  [0:0] sched_interfaces_context_next_node_address0;
output   sched_interfaces_context_next_node_ce0;
input  [31:0] sched_interfaces_context_next_node_q0;
output  [0:0] sched_interfaces_context_state_address0;
output   sched_interfaces_context_state_ce0;
input  [31:0] sched_interfaces_context_state_q0;
output  [0:0] sched_interfaces_schedule_V_address0;
output   sched_interfaces_schedule_V_ce0;
input  [0:0] sched_interfaces_schedule_V_q0;
output  [0:0] sched_interfaces_ack_V_address0;
output   sched_interfaces_ack_V_ce0;
output   sched_interfaces_ack_V_we0;
output  [0:0] sched_interfaces_ack_V_d0;
output  [0:0] setup_interfaces_context_current_node_address0;
output   setup_interfaces_context_current_node_ce0;
output   setup_interfaces_context_current_node_we0;
output  [31:0] setup_interfaces_context_current_node_d0;
output  [0:0] setup_interfaces_context_next_node_address0;
output   setup_interfaces_context_next_node_ce0;
output   setup_interfaces_context_next_node_we0;
output  [31:0] setup_interfaces_context_next_node_d0;
output  [0:0] setup_interfaces_context_state_address0;
output   setup_interfaces_context_state_ce0;
output   setup_interfaces_context_state_we0;
output  [31:0] setup_interfaces_context_state_d0;
output  [0:0] setup_interfaces_restart_V_address0;
output   setup_interfaces_restart_V_ce0;
output   setup_interfaces_restart_V_we0;
output  [0:0] setup_interfaces_restart_V_d0;
output  [0:0] setup_interfaces_core_halted_V_address0;
output   setup_interfaces_core_halted_V_ce0;
input  [0:0] setup_interfaces_core_halted_V_q0;

reg ap_idle;
reg sched_interfaces_context_current_node_ce0;
reg sched_interfaces_context_next_node_ce0;
reg sched_interfaces_context_state_ce0;
reg sched_interfaces_schedule_V_ce0;
reg sched_interfaces_ack_V_ce0;
reg sched_interfaces_ack_V_we0;
reg setup_interfaces_context_current_node_ce0;
reg setup_interfaces_context_current_node_we0;
reg setup_interfaces_context_next_node_ce0;
reg setup_interfaces_context_next_node_we0;
reg setup_interfaces_context_state_ce0;
reg setup_interfaces_context_state_we0;
reg setup_interfaces_restart_V_ce0;
reg setup_interfaces_restart_V_we0;
reg setup_interfaces_core_halted_V_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] i_load_reg_791;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_359_p2;
reg   [0:0] exitcond1_reg_797;
wire  signed [63:0] tmp_fu_365_p1;
reg  signed [63:0] tmp_reg_801;
wire   [0:0] or_cond_5_fu_386_p2;
reg   [0:0] or_cond_5_reg_814;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [31:0] new_context_current_s_reg_902;
reg   [31:0] new_context_next_nod_reg_910;
reg   [31:0] new_context_state_2_reg_918;
wire   [1:0] i_2_fu_637_p2;
reg   [1:0] i_2_reg_929;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_4_fu_643_p1;
reg   [63:0] tmp_4_reg_934;
wire   [0:0] exitcond_fu_631_p2;
wire   [31:0] new_context_current_1_fu_664_p6;
reg   [31:0] new_context_current_1_reg_950;
wire    ap_CS_fsm_state8;
wire   [0:0] demorgan_fu_654_p2;
wire   [31:0] new_context_next_nod_1_fu_678_p6;
reg   [31:0] new_context_next_nod_1_reg_955;
wire   [31:0] new_context_state_fu_692_p6;
reg   [31:0] new_context_state_reg_960;
wire   [31:0] queue_head_ptr_2_fu_706_p2;
reg   [31:0] queue_head_ptr_2_reg_965;
reg   [31:0] queue_head_ptr_1_reg_246;
reg   [31:0] queue_head_ptr_1_be_phi_fu_272_p4;
wire    ap_CS_fsm_state6;
wire   [31:0] queue_head_ptr_fu_554_p2;
reg   [31:0] queue_head_ptr_3_phi_fu_261_p4;
reg   [31:0] queue_head_ptr_3_reg_258;
reg   [31:0] queue_head_ptr_1_be_reg_268;
reg   [31:0] queue_head_ptr_4_reg_280;
wire    ap_CS_fsm_state10;
reg   [1:0] i1_reg_292;
reg   [31:0] queue_head_ptr_4_be_reg_303;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state5;
reg   [31:0] i_fu_72;
wire   [31:0] i_1_fu_621_p2;
reg   [31:0] queue_3_current_nod_fu_76;
wire   [31:0] queue_3_current_nod_12_fu_458_p3;
reg   [31:0] queue_3_current_nod_1_fu_80;
wire   [31:0] queue_3_current_nod_11_fu_451_p3;
reg   [31:0] queue_3_current_nod_2_fu_84;
wire   [31:0] queue_3_current_nod_9_fu_438_p3;
reg   [31:0] queue_3_current_nod_3_fu_88;
wire   [31:0] queue_3_current_nod_8_fu_425_p3;
reg   [31:0] queue_3_next_node_2_fu_92;
wire   [31:0] queue_3_next_node_7_fu_503_p3;
reg   [31:0] queue_3_next_node_3_fu_96;
wire   [31:0] queue_3_next_node_5_fu_496_p3;
reg   [31:0] queue_3_next_node_6_fu_100;
wire   [31:0] queue_3_next_node_1_fu_483_p3;
reg   [31:0] queue_3_next_node_8_fu_104;
wire   [31:0] queue_3_next_node_fu_470_p3;
reg   [31:0] queue_3_state_2_fu_108;
wire   [31:0] queue_3_state_7_fu_548_p3;
reg   [31:0] queue_3_state_3_fu_112;
wire   [31:0] queue_3_state_5_fu_541_p3;
reg   [31:0] queue_3_state_6_fu_116;
wire   [31:0] queue_3_state_1_fu_528_p3;
reg   [31:0] queue_3_state_8_fu_120;
wire   [31:0] queue_3_state_fu_515_p3;
wire   [29:0] tmp_1_fu_370_p4;
wire   [0:0] icmp_fu_380_p2;
wire   [1:0] tmp_3_fu_392_p1;
wire   [0:0] sel_tmp2_fu_407_p2;
wire   [0:0] sel_tmp1_fu_401_p2;
wire   [0:0] sel_tmp_fu_395_p2;
wire   [0:0] or_cond_fu_413_p2;
wire   [31:0] newSel_fu_419_p3;
wire   [31:0] newSel2_fu_432_p3;
wire   [31:0] queue_3_current_nod_10_fu_445_p3;
wire   [31:0] newSel4_fu_464_p3;
wire   [31:0] newSel6_fu_477_p3;
wire   [31:0] queue_3_next_node_4_fu_490_p3;
wire   [31:0] newSel8_fu_509_p3;
wire   [31:0] newSel1_fu_522_p3;
wire   [31:0] queue_3_state_4_fu_535_p3;
wire   [0:0] tmp_5_fu_648_p2;
wire   [1:0] tmp_6_fu_660_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

scheduler_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
scheduler_mux_42_bkb_U1(
    .din1(queue_3_current_nod_fu_76),
    .din2(queue_3_current_nod_1_fu_80),
    .din3(queue_3_current_nod_2_fu_84),
    .din4(queue_3_current_nod_3_fu_88),
    .din5(tmp_6_fu_660_p1),
    .dout(new_context_current_1_fu_664_p6)
);

scheduler_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
scheduler_mux_42_bkb_U2(
    .din1(queue_3_next_node_2_fu_92),
    .din2(queue_3_next_node_3_fu_96),
    .din3(queue_3_next_node_6_fu_100),
    .din4(queue_3_next_node_8_fu_104),
    .din5(tmp_6_fu_660_p1),
    .dout(new_context_next_nod_1_fu_678_p6)
);

scheduler_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
scheduler_mux_42_bkb_U3(
    .din1(queue_3_state_2_fu_108),
    .din2(queue_3_state_3_fu_112),
    .din3(queue_3_state_6_fu_116),
    .din4(queue_3_state_8_fu_120),
    .din5(tmp_6_fu_660_p1),
    .dout(new_context_state_fu_692_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i1_reg_292 <= i_2_reg_929;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_359_p2 == 1'd1))) begin
        i1_reg_292 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_reg_797 == 1'd0))) begin
        i_fu_72 <= i_1_fu_621_p2;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_631_p2)))) begin
        i_fu_72 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_631_p2))) begin
        queue_head_ptr_1_be_reg_268 <= queue_head_ptr_4_reg_280;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_reg_797 == 1'd0))) begin
        queue_head_ptr_1_be_reg_268 <= queue_head_ptr_3_phi_fu_261_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        queue_head_ptr_1_reg_246 <= queue_head_ptr_1_be_phi_fu_272_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        queue_head_ptr_1_reg_246 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == or_cond_5_fu_386_p2))) begin
        queue_head_ptr_3_reg_258 <= queue_head_ptr_1_reg_246;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_reg_797 == 1'd0) & (or_cond_5_reg_814 == 1'd1))) begin
        queue_head_ptr_3_reg_258 <= queue_head_ptr_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == demorgan_fu_654_p2))) begin
        queue_head_ptr_4_be_reg_303 <= queue_head_ptr_4_reg_280;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        queue_head_ptr_4_be_reg_303 <= queue_head_ptr_2_reg_965;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        queue_head_ptr_4_reg_280 <= queue_head_ptr_4_be_reg_303;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_359_p2 == 1'd1))) begin
        queue_head_ptr_4_reg_280 <= queue_head_ptr_1_reg_246;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exitcond1_reg_797 <= exitcond1_fu_359_p2;
        i_load_reg_791 <= i_fu_72;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_929 <= i_2_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == demorgan_fu_654_p2))) begin
        new_context_current_1_reg_950 <= new_context_current_1_fu_664_p6;
        new_context_next_nod_1_reg_955 <= new_context_next_nod_1_fu_678_p6;
        new_context_state_reg_960 <= new_context_state_fu_692_p6;
        queue_head_ptr_2_reg_965 <= queue_head_ptr_2_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        new_context_current_s_reg_902 <= sched_interfaces_context_current_node_q0;
        new_context_next_nod_reg_910 <= sched_interfaces_context_next_node_q0;
        new_context_state_2_reg_918 <= sched_interfaces_context_state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        or_cond_5_reg_814 <= or_cond_5_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_reg_797 == 1'd0) & (or_cond_5_reg_814 == 1'd1))) begin
        queue_3_current_nod_1_fu_80 <= queue_3_current_nod_11_fu_451_p3;
        queue_3_current_nod_2_fu_84 <= queue_3_current_nod_9_fu_438_p3;
        queue_3_current_nod_3_fu_88 <= queue_3_current_nod_8_fu_425_p3;
        queue_3_current_nod_fu_76 <= queue_3_current_nod_12_fu_458_p3;
        queue_3_next_node_2_fu_92 <= queue_3_next_node_7_fu_503_p3;
        queue_3_next_node_3_fu_96 <= queue_3_next_node_5_fu_496_p3;
        queue_3_next_node_6_fu_100 <= queue_3_next_node_1_fu_483_p3;
        queue_3_next_node_8_fu_104 <= queue_3_next_node_fu_470_p3;
        queue_3_state_2_fu_108 <= queue_3_state_7_fu_548_p3;
        queue_3_state_3_fu_112 <= queue_3_state_5_fu_541_p3;
        queue_3_state_6_fu_116 <= queue_3_state_1_fu_528_p3;
        queue_3_state_8_fu_120 <= queue_3_state_fu_515_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_631_p2))) begin
        tmp_4_reg_934[1 : 0] <= tmp_4_fu_643_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_359_p2 == 1'd0))) begin
        tmp_reg_801 <= tmp_fu_365_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_reg_797 == 1'd0))) begin
        queue_head_ptr_1_be_phi_fu_272_p4 = queue_head_ptr_3_phi_fu_261_p4;
    end else begin
        queue_head_ptr_1_be_phi_fu_272_p4 = queue_head_ptr_1_be_reg_268;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_reg_797 == 1'd0) & (or_cond_5_reg_814 == 1'd1))) begin
        queue_head_ptr_3_phi_fu_261_p4 = queue_head_ptr_fu_554_p2;
    end else begin
        queue_head_ptr_3_phi_fu_261_p4 = queue_head_ptr_3_reg_258;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sched_interfaces_ack_V_ce0 = 1'b1;
    end else begin
        sched_interfaces_ack_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sched_interfaces_ack_V_we0 = 1'b1;
    end else begin
        sched_interfaces_ack_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_current_node_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_next_node_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_state_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sched_interfaces_schedule_V_ce0 = 1'b1;
    end else begin
        sched_interfaces_schedule_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_context_current_node_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_context_current_node_we0 = 1'b1;
    end else begin
        setup_interfaces_context_current_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_context_next_node_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_context_next_node_we0 = 1'b1;
    end else begin
        setup_interfaces_context_next_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_context_state_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_context_state_we0 = 1'b1;
    end else begin
        setup_interfaces_context_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        setup_interfaces_core_halted_V_ce0 = 1'b1;
    end else begin
        setup_interfaces_core_halted_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_restart_V_ce0 = 1'b1;
    end else begin
        setup_interfaces_restart_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_restart_V_we0 = 1'b1;
    end else begin
        setup_interfaces_restart_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_359_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == or_cond_5_fu_386_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_631_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == demorgan_fu_654_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

assign demorgan_fu_654_p2 = (setup_interfaces_core_halted_V_q0 & tmp_5_fu_648_p2);

assign exitcond1_fu_359_p2 = ((i_fu_72 == 32'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_631_p2 = ((i1_reg_292 == 2'd2) ? 1'b1 : 1'b0);

assign i_1_fu_621_p2 = (i_load_reg_791 + 32'd1);

assign i_2_fu_637_p2 = (i1_reg_292 + 2'd1);

assign icmp_fu_380_p2 = ((tmp_1_fu_370_p4 == 30'd0) ? 1'b1 : 1'b0);

assign newSel1_fu_522_p3 = ((sel_tmp_fu_395_p2[0:0] === 1'b1) ? new_context_state_2_reg_918 : queue_3_state_6_fu_116);

assign newSel2_fu_432_p3 = ((sel_tmp_fu_395_p2[0:0] === 1'b1) ? new_context_current_s_reg_902 : queue_3_current_nod_2_fu_84);

assign newSel4_fu_464_p3 = ((sel_tmp_fu_395_p2[0:0] === 1'b1) ? queue_3_next_node_8_fu_104 : new_context_next_nod_reg_910);

assign newSel6_fu_477_p3 = ((sel_tmp_fu_395_p2[0:0] === 1'b1) ? new_context_next_nod_reg_910 : queue_3_next_node_6_fu_100);

assign newSel8_fu_509_p3 = ((sel_tmp_fu_395_p2[0:0] === 1'b1) ? queue_3_state_8_fu_120 : new_context_state_2_reg_918);

assign newSel_fu_419_p3 = ((sel_tmp_fu_395_p2[0:0] === 1'b1) ? queue_3_current_nod_3_fu_88 : new_context_current_s_reg_902);

assign or_cond_5_fu_386_p2 = (sched_interfaces_schedule_V_q0 & icmp_fu_380_p2);

assign or_cond_fu_413_p2 = (sel_tmp2_fu_407_p2 | sel_tmp1_fu_401_p2);

assign queue_3_current_nod_10_fu_445_p3 = ((sel_tmp1_fu_401_p2[0:0] === 1'b1) ? new_context_current_s_reg_902 : queue_3_current_nod_1_fu_80);

assign queue_3_current_nod_11_fu_451_p3 = ((sel_tmp2_fu_407_p2[0:0] === 1'b1) ? queue_3_current_nod_1_fu_80 : queue_3_current_nod_10_fu_445_p3);

assign queue_3_current_nod_12_fu_458_p3 = ((sel_tmp2_fu_407_p2[0:0] === 1'b1) ? new_context_current_s_reg_902 : queue_3_current_nod_fu_76);

assign queue_3_current_nod_8_fu_425_p3 = ((or_cond_fu_413_p2[0:0] === 1'b1) ? queue_3_current_nod_3_fu_88 : newSel_fu_419_p3);

assign queue_3_current_nod_9_fu_438_p3 = ((or_cond_fu_413_p2[0:0] === 1'b1) ? queue_3_current_nod_2_fu_84 : newSel2_fu_432_p3);

assign queue_3_next_node_1_fu_483_p3 = ((or_cond_fu_413_p2[0:0] === 1'b1) ? queue_3_next_node_6_fu_100 : newSel6_fu_477_p3);

assign queue_3_next_node_4_fu_490_p3 = ((sel_tmp1_fu_401_p2[0:0] === 1'b1) ? new_context_next_nod_reg_910 : queue_3_next_node_3_fu_96);

assign queue_3_next_node_5_fu_496_p3 = ((sel_tmp2_fu_407_p2[0:0] === 1'b1) ? queue_3_next_node_3_fu_96 : queue_3_next_node_4_fu_490_p3);

assign queue_3_next_node_7_fu_503_p3 = ((sel_tmp2_fu_407_p2[0:0] === 1'b1) ? new_context_next_nod_reg_910 : queue_3_next_node_2_fu_92);

assign queue_3_next_node_fu_470_p3 = ((or_cond_fu_413_p2[0:0] === 1'b1) ? queue_3_next_node_8_fu_104 : newSel4_fu_464_p3);

assign queue_3_state_1_fu_528_p3 = ((or_cond_fu_413_p2[0:0] === 1'b1) ? queue_3_state_6_fu_116 : newSel1_fu_522_p3);

assign queue_3_state_4_fu_535_p3 = ((sel_tmp1_fu_401_p2[0:0] === 1'b1) ? new_context_state_2_reg_918 : queue_3_state_3_fu_112);

assign queue_3_state_5_fu_541_p3 = ((sel_tmp2_fu_407_p2[0:0] === 1'b1) ? queue_3_state_3_fu_112 : queue_3_state_4_fu_535_p3);

assign queue_3_state_7_fu_548_p3 = ((sel_tmp2_fu_407_p2[0:0] === 1'b1) ? new_context_state_2_reg_918 : queue_3_state_2_fu_108);

assign queue_3_state_fu_515_p3 = ((or_cond_fu_413_p2[0:0] === 1'b1) ? queue_3_state_8_fu_120 : newSel8_fu_509_p3);

assign queue_head_ptr_2_fu_706_p2 = ($signed(32'd4294967295) + $signed(queue_head_ptr_4_reg_280));

assign queue_head_ptr_fu_554_p2 = (32'd1 + queue_head_ptr_1_reg_246);

assign sched_interfaces_ack_V_address0 = tmp_reg_801;

assign sched_interfaces_ack_V_d0 = 1'd0;

assign sched_interfaces_context_current_node_address0 = tmp_reg_801;

assign sched_interfaces_context_next_node_address0 = tmp_reg_801;

assign sched_interfaces_context_state_address0 = tmp_reg_801;

assign sched_interfaces_schedule_V_address0 = tmp_fu_365_p1;

assign sel_tmp1_fu_401_p2 = ((tmp_3_fu_392_p1 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp2_fu_407_p2 = ((tmp_3_fu_392_p1 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_395_p2 = ((tmp_3_fu_392_p1 == 2'd2) ? 1'b1 : 1'b0);

assign setup_interfaces_context_current_node_address0 = tmp_4_reg_934;

assign setup_interfaces_context_current_node_d0 = new_context_current_1_reg_950;

assign setup_interfaces_context_next_node_address0 = tmp_4_reg_934;

assign setup_interfaces_context_next_node_d0 = new_context_next_nod_1_reg_955;

assign setup_interfaces_context_state_address0 = tmp_4_reg_934;

assign setup_interfaces_context_state_d0 = new_context_state_reg_960;

assign setup_interfaces_core_halted_V_address0 = tmp_4_fu_643_p1;

assign setup_interfaces_restart_V_address0 = tmp_4_reg_934;

assign setup_interfaces_restart_V_d0 = 1'd0;

assign tmp_1_fu_370_p4 = {{queue_head_ptr_1_reg_246[31:2]}};

assign tmp_3_fu_392_p1 = i_load_reg_791[1:0];

assign tmp_4_fu_643_p1 = i1_reg_292;

assign tmp_5_fu_648_p2 = ((queue_head_ptr_4_reg_280 != 32'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_660_p1 = queue_head_ptr_4_reg_280[1:0];

assign tmp_fu_365_p1 = $signed(i_fu_72);

always @ (posedge ap_clk) begin
    tmp_4_reg_934[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //scheduler

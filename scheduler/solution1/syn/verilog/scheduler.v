// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="scheduler,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.280000,HLS_SYN_LAT=262402,HLS_SYN_TPT=none,HLS_SYN_MEM=27,HLS_SYN_DSP=0,HLS_SYN_FF=829,HLS_SYN_LUT=535}" *)

module scheduler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sched_interfaces_context_current_node_address0,
        sched_interfaces_context_current_node_ce0,
        sched_interfaces_context_current_node_q0,
        sched_interfaces_context_next_node_address0,
        sched_interfaces_context_next_node_ce0,
        sched_interfaces_context_next_node_q0,
        sched_interfaces_context_state_address0,
        sched_interfaces_context_state_ce0,
        sched_interfaces_context_state_q0,
        sched_interfaces_schedule_V_address0,
        sched_interfaces_schedule_V_ce0,
        sched_interfaces_schedule_V_q0,
        sched_interfaces_ack_V_address0,
        sched_interfaces_ack_V_ce0,
        sched_interfaces_ack_V_we0,
        sched_interfaces_ack_V_d0,
        setup_interfaces_context_current_node_address0,
        setup_interfaces_context_current_node_ce0,
        setup_interfaces_context_current_node_we0,
        setup_interfaces_context_current_node_d0,
        setup_interfaces_context_next_node_address0,
        setup_interfaces_context_next_node_ce0,
        setup_interfaces_context_next_node_we0,
        setup_interfaces_context_next_node_d0,
        setup_interfaces_context_state_address0,
        setup_interfaces_context_state_ce0,
        setup_interfaces_context_state_we0,
        setup_interfaces_context_state_d0,
        setup_interfaces_restart_V_address0,
        setup_interfaces_restart_V_ce0,
        setup_interfaces_restart_V_we0,
        setup_interfaces_restart_V_d0,
        setup_interfaces_core_halted_V_address0,
        setup_interfaces_core_halted_V_ce0,
        setup_interfaces_core_halted_V_q0,
        finished,
        finished_ap_vld
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] sched_interfaces_context_current_node_address0;
output   sched_interfaces_context_current_node_ce0;
input  [31:0] sched_interfaces_context_current_node_q0;
output  [4:0] sched_interfaces_context_next_node_address0;
output   sched_interfaces_context_next_node_ce0;
input  [31:0] sched_interfaces_context_next_node_q0;
output  [4:0] sched_interfaces_context_state_address0;
output   sched_interfaces_context_state_ce0;
input  [31:0] sched_interfaces_context_state_q0;
output  [4:0] sched_interfaces_schedule_V_address0;
output   sched_interfaces_schedule_V_ce0;
input  [0:0] sched_interfaces_schedule_V_q0;
output  [4:0] sched_interfaces_ack_V_address0;
output   sched_interfaces_ack_V_ce0;
output   sched_interfaces_ack_V_we0;
output  [0:0] sched_interfaces_ack_V_d0;
output  [4:0] setup_interfaces_context_current_node_address0;
output   setup_interfaces_context_current_node_ce0;
output   setup_interfaces_context_current_node_we0;
output  [31:0] setup_interfaces_context_current_node_d0;
output  [4:0] setup_interfaces_context_next_node_address0;
output   setup_interfaces_context_next_node_ce0;
output   setup_interfaces_context_next_node_we0;
output  [31:0] setup_interfaces_context_next_node_d0;
output  [4:0] setup_interfaces_context_state_address0;
output   setup_interfaces_context_state_ce0;
output   setup_interfaces_context_state_we0;
output  [31:0] setup_interfaces_context_state_d0;
output  [4:0] setup_interfaces_restart_V_address0;
output   setup_interfaces_restart_V_ce0;
output   setup_interfaces_restart_V_we0;
output  [0:0] setup_interfaces_restart_V_d0;
output  [4:0] setup_interfaces_core_halted_V_address0;
output   setup_interfaces_core_halted_V_ce0;
input  [0:0] setup_interfaces_core_halted_V_q0;
output  [31:0] finished;
output   finished_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sched_interfaces_context_current_node_ce0;
reg sched_interfaces_context_next_node_ce0;
reg sched_interfaces_context_state_ce0;
reg sched_interfaces_schedule_V_ce0;
reg sched_interfaces_ack_V_ce0;
reg sched_interfaces_ack_V_we0;
reg setup_interfaces_context_current_node_ce0;
reg setup_interfaces_context_current_node_we0;
reg setup_interfaces_context_next_node_ce0;
reg setup_interfaces_context_next_node_we0;
reg setup_interfaces_context_state_ce0;
reg setup_interfaces_context_state_we0;
reg setup_interfaces_restart_V_ce0;
reg setup_interfaces_restart_V_we0;
reg setup_interfaces_core_halted_V_ce0;
reg finished_ap_vld;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] queue_head_ptr_load_reg_682;
wire    ap_CS_fsm_state2;
wire   [5:0] i_2_fu_431_p2;
reg   [5:0] i_2_reg_692;
wire   [63:0] tmp_fu_437_p1;
reg   [63:0] tmp_reg_697;
wire   [0:0] exitcond1_fu_425_p2;
wire   [0:0] or_cond_fu_452_p2;
reg   [0:0] or_cond_reg_717;
wire    ap_CS_fsm_state3;
reg   [31:0] new_context_current_s_reg_736;
wire    ap_CS_fsm_state4;
reg   [31:0] new_context_next_nod_reg_743;
reg   [31:0] new_context_state_reg_750;
wire   [12:0] j_1_fu_468_p2;
reg   [12:0] j_1_reg_760;
wire    ap_CS_fsm_state6;
wire   [0:0] ult_fu_474_p2;
reg   [0:0] ult_reg_765;
wire   [0:0] exitcond2_fu_462_p2;
wire   [0:0] tmp_10_fu_521_p2;
reg   [0:0] tmp_10_reg_785;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_11_fu_526_p2;
reg   [0:0] tmp_11_reg_791;
wire   [0:0] tmp_12_fu_531_p2;
reg   [0:0] tmp_12_reg_796;
wire   [0:0] match_found_1_fu_593_p2;
wire    ap_CS_fsm_state8;
wire   [5:0] i_1_fu_605_p2;
reg   [5:0] i_1_reg_809;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_5_fu_611_p1;
reg   [63:0] tmp_5_reg_814;
wire   [0:0] exitcond_fu_599_p2;
wire   [0:0] halted_flag_1_fu_633_p2;
reg   [0:0] halted_flag_1_reg_827;
wire    ap_CS_fsm_state10;
wire   [0:0] demorgan_fu_645_p2;
reg   [0:0] demorgan_reg_832;
wire   [31:0] queue_head_ptr_1_fu_651_p2;
reg   [31:0] queue_head_ptr_1_reg_836;
wire   [31:0] queue_current_node_q0;
reg   [31:0] new_context_current_1_reg_856;
wire    ap_CS_fsm_state11;
wire   [31:0] queue_next_node_q0;
reg   [31:0] new_context_next_nod_1_reg_861;
wire   [31:0] queue_state_q0;
reg   [31:0] new_context_state_1_reg_866;
reg   [11:0] history_current_node_address0;
reg    history_current_node_ce0;
reg    history_current_node_we0;
wire   [31:0] history_current_node_q0;
reg   [11:0] history_next_node_address0;
reg    history_next_node_ce0;
reg    history_next_node_we0;
wire   [31:0] history_next_node_q0;
reg   [11:0] history_state_address0;
reg    history_state_ce0;
reg    history_state_we0;
wire   [31:0] history_state_q0;
reg   [8:0] queue_current_node_address0;
reg    queue_current_node_ce0;
reg    queue_current_node_we0;
reg   [8:0] queue_next_node_address0;
reg    queue_next_node_ce0;
reg    queue_next_node_we0;
reg   [8:0] queue_state_address0;
reg    queue_state_ce0;
reg    queue_state_we0;
reg   [5:0] i_reg_349;
wire   [0:0] match_found_phi_fu_364_p4;
reg   [0:0] match_found_reg_360;
wire    ap_CS_fsm_state5;
reg   [12:0] j_reg_372;
reg   [0:0] halted_flag_reg_383;
wire    ap_CS_fsm_state13;
reg   [5:0] i1_reg_395;
wire   [63:0] tmp_8_fu_480_p1;
wire   [63:0] tmp_s_fu_487_p1;
wire   [63:0] tmp_6_fu_493_p1;
wire   [63:0] tmp_9_fu_657_p1;
wire    ap_CS_fsm_state12;
reg   [31:0] queue_head_ptr_fu_76;
wire   [31:0] queue_head_ptr_3_fu_500_p2;
reg   [31:0] history_head_ptr_fu_80;
wire   [31:0] history_head_ptr_1_fu_505_p2;
reg   [31:0] queue_head_ptr_2_fu_108;
wire   [0:0] tmp_1_fu_447_p2;
wire   [31:0] j_cast_fu_458_p1;
wire   [0:0] rev4_fu_536_p2;
wire   [0:0] not_not_fu_547_p2;
wire   [0:0] brmerge_fu_541_p2;
wire   [0:0] sel_tmp_fu_559_p2;
wire   [0:0] tmp1_fu_570_p2;
wire   [0:0] tmp9_fu_565_p2;
wire   [0:0] match_found_0_mux_fu_553_p2;
wire   [0:0] sel_tmp3_fu_574_p2;
wire   [0:0] sel_tmp4_fu_580_p3;
wire   [0:0] sel_tmp7_demorgan_fu_588_p2;
wire   [0:0] tmp_2_fu_616_p2;
wire   [0:0] tmp_3_fu_622_p2;
wire   [0:0] tmp_7_fu_639_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

scheduler_historybkb #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
history_current_node_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(history_current_node_address0),
    .ce0(history_current_node_ce0),
    .we0(history_current_node_we0),
    .d0(new_context_current_s_reg_736),
    .q0(history_current_node_q0)
);

scheduler_historybkb #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
history_next_node_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(history_next_node_address0),
    .ce0(history_next_node_ce0),
    .we0(history_next_node_we0),
    .d0(new_context_next_nod_reg_743),
    .q0(history_next_node_q0)
);

scheduler_historybkb #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
history_state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(history_state_address0),
    .ce0(history_state_ce0),
    .we0(history_state_we0),
    .d0(new_context_state_reg_750),
    .q0(history_state_q0)
);

scheduler_queue_ceOg #(
    .DataWidth( 32 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
queue_current_node_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(queue_current_node_address0),
    .ce0(queue_current_node_ce0),
    .we0(queue_current_node_we0),
    .d0(new_context_current_s_reg_736),
    .q0(queue_current_node_q0)
);

scheduler_queue_ceOg #(
    .DataWidth( 32 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
queue_next_node_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(queue_next_node_address0),
    .ce0(queue_next_node_ce0),
    .we0(queue_next_node_we0),
    .d0(new_context_next_nod_reg_743),
    .q0(queue_next_node_q0)
);

scheduler_queue_ceOg #(
    .DataWidth( 32 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
queue_state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(queue_state_address0),
    .ce0(queue_state_ce0),
    .we0(queue_state_we0),
    .d0(new_context_state_reg_750),
    .q0(queue_state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        halted_flag_reg_383 <= halted_flag_1_reg_827;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd1))) begin
        halted_flag_reg_383 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
        history_head_ptr_fu_80 <= history_head_ptr_1_fu_505_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        history_head_ptr_fu_80 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i1_reg_395 <= i_1_reg_809;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd1))) begin
        i1_reg_395 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((1'd0 == or_cond_reg_717) | (1'd1 == exitcond2_fu_462_p2)))) begin
        i_reg_349 <= i_2_reg_692;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_349 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_372 <= j_1_reg_760;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_372 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        match_found_reg_360 <= match_found_1_fu_593_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        match_found_reg_360 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == demorgan_reg_832))) begin
        queue_head_ptr_2_fu_108 <= queue_head_ptr_1_reg_836;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd1))) begin
        queue_head_ptr_2_fu_108 <= queue_head_ptr_fu_76;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
        queue_head_ptr_fu_76 <= queue_head_ptr_3_fu_500_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        queue_head_ptr_fu_76 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        demorgan_reg_832 <= demorgan_fu_645_p2;
        halted_flag_1_reg_827 <= halted_flag_1_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_809 <= i_1_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_692 <= i_2_fu_431_p2;
        queue_head_ptr_load_reg_682 <= queue_head_ptr_fu_76;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1))) begin
        j_1_reg_760 <= j_1_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        new_context_current_1_reg_856 <= queue_current_node_q0;
        new_context_next_nod_1_reg_861 <= queue_next_node_q0;
        new_context_state_1_reg_866 <= queue_state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        new_context_current_s_reg_736 <= sched_interfaces_context_current_node_q0;
        new_context_next_nod_reg_743 <= sched_interfaces_context_next_node_q0;
        new_context_state_reg_750 <= sched_interfaces_context_state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        or_cond_reg_717 <= or_cond_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == demorgan_fu_645_p2))) begin
        queue_head_ptr_1_reg_836 <= queue_head_ptr_1_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_10_reg_785 <= tmp_10_fu_521_p2;
        tmp_11_reg_791 <= tmp_11_fu_526_p2;
        tmp_12_reg_796 <= tmp_12_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_fu_599_p2))) begin
        tmp_5_reg_814[5 : 0] <= tmp_5_fu_611_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd0))) begin
        tmp_reg_697[5 : 0] <= tmp_fu_437_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd0 == exitcond2_fu_462_p2))) begin
        ult_reg_765 <= ult_fu_474_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_fu_599_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_fu_599_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_fu_599_p2))) begin
        finished_ap_vld = 1'b1;
    end else begin
        finished_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1))) begin
        if (((1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
            history_current_node_address0 = tmp_6_fu_493_p1;
        end else if ((1'd0 == exitcond2_fu_462_p2)) begin
            history_current_node_address0 = tmp_8_fu_480_p1;
        end else begin
            history_current_node_address0 = 'bx;
        end
    end else begin
        history_current_node_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd0 == exitcond2_fu_462_p2)) | ((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4)))) begin
        history_current_node_ce0 = 1'b1;
    end else begin
        history_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
        history_current_node_we0 = 1'b1;
    end else begin
        history_current_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1))) begin
        if (((1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
            history_next_node_address0 = tmp_6_fu_493_p1;
        end else if ((1'd0 == exitcond2_fu_462_p2)) begin
            history_next_node_address0 = tmp_8_fu_480_p1;
        end else begin
            history_next_node_address0 = 'bx;
        end
    end else begin
        history_next_node_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd0 == exitcond2_fu_462_p2)) | ((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4)))) begin
        history_next_node_ce0 = 1'b1;
    end else begin
        history_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
        history_next_node_we0 = 1'b1;
    end else begin
        history_next_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1))) begin
        if (((1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
            history_state_address0 = tmp_6_fu_493_p1;
        end else if ((1'd0 == exitcond2_fu_462_p2)) begin
            history_state_address0 = tmp_8_fu_480_p1;
        end else begin
            history_state_address0 = 'bx;
        end
    end else begin
        history_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd0 == exitcond2_fu_462_p2)) | ((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4)))) begin
        history_state_ce0 = 1'b1;
    end else begin
        history_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
        history_state_we0 = 1'b1;
    end else begin
        history_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        queue_current_node_address0 = tmp_9_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        queue_current_node_address0 = tmp_s_fu_487_p1;
    end else begin
        queue_current_node_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        queue_current_node_ce0 = 1'b1;
    end else begin
        queue_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
        queue_current_node_we0 = 1'b1;
    end else begin
        queue_current_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        queue_next_node_address0 = tmp_9_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        queue_next_node_address0 = tmp_s_fu_487_p1;
    end else begin
        queue_next_node_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        queue_next_node_ce0 = 1'b1;
    end else begin
        queue_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
        queue_next_node_we0 = 1'b1;
    end else begin
        queue_next_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        queue_state_address0 = tmp_9_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        queue_state_address0 = tmp_s_fu_487_p1;
    end else begin
        queue_state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        queue_state_ce0 = 1'b1;
    end else begin
        queue_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond_reg_717 == 1'd1) & (1'd1 == exitcond2_fu_462_p2) & (1'd0 == match_found_phi_fu_364_p4))) begin
        queue_state_we0 = 1'b1;
    end else begin
        queue_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sched_interfaces_ack_V_ce0 = 1'b1;
    end else begin
        sched_interfaces_ack_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sched_interfaces_ack_V_we0 = 1'b1;
    end else begin
        sched_interfaces_ack_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_current_node_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_next_node_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sched_interfaces_context_state_ce0 = 1'b1;
    end else begin
        sched_interfaces_context_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sched_interfaces_schedule_V_ce0 = 1'b1;
    end else begin
        sched_interfaces_schedule_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        setup_interfaces_context_current_node_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_current_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        setup_interfaces_context_current_node_we0 = 1'b1;
    end else begin
        setup_interfaces_context_current_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        setup_interfaces_context_next_node_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_next_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        setup_interfaces_context_next_node_we0 = 1'b1;
    end else begin
        setup_interfaces_context_next_node_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        setup_interfaces_context_state_ce0 = 1'b1;
    end else begin
        setup_interfaces_context_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        setup_interfaces_context_state_we0 = 1'b1;
    end else begin
        setup_interfaces_context_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        setup_interfaces_core_halted_V_ce0 = 1'b1;
    end else begin
        setup_interfaces_core_halted_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        setup_interfaces_restart_V_ce0 = 1'b1;
    end else begin
        setup_interfaces_restart_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        setup_interfaces_restart_V_we0 = 1'b1;
    end else begin
        setup_interfaces_restart_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_425_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == or_cond_fu_452_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((1'd0 == or_cond_reg_717) | (1'd1 == exitcond2_fu_462_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_fu_599_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == demorgan_fu_645_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign brmerge_fu_541_p2 = (rev4_fu_536_p2 | match_found_reg_360);

assign demorgan_fu_645_p2 = (setup_interfaces_core_halted_V_q0 & tmp_7_fu_639_p2);

assign exitcond1_fu_425_p2 = ((i_reg_349 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond2_fu_462_p2 = ((j_reg_372 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond_fu_599_p2 = ((i1_reg_395 == 6'd32) ? 1'b1 : 1'b0);

assign finished = tmp_3_fu_622_p2;

assign halted_flag_1_fu_633_p2 = (setup_interfaces_core_halted_V_q0 & halted_flag_reg_383);

assign history_head_ptr_1_fu_505_p2 = (history_head_ptr_fu_80 + 32'd1);

assign i_1_fu_605_p2 = (i1_reg_395 + 6'd1);

assign i_2_fu_431_p2 = (i_reg_349 + 6'd1);

assign j_1_fu_468_p2 = (j_reg_372 + 13'd1);

assign j_cast_fu_458_p1 = j_reg_372;

assign match_found_0_mux_fu_553_p2 = (match_found_reg_360 | not_not_fu_547_p2);

assign match_found_1_fu_593_p2 = (sel_tmp4_fu_580_p3 & sel_tmp7_demorgan_fu_588_p2);

assign match_found_phi_fu_364_p4 = match_found_reg_360;

assign not_not_fu_547_p2 = (rev4_fu_536_p2 ^ 1'd1);

assign or_cond_fu_452_p2 = (sched_interfaces_schedule_V_q0 & tmp_1_fu_447_p2);

assign queue_head_ptr_1_fu_651_p2 = ($signed(queue_head_ptr_2_fu_108) + $signed(32'd4294967295));

assign queue_head_ptr_3_fu_500_p2 = (queue_head_ptr_load_reg_682 + 32'd1);

assign rev4_fu_536_p2 = (ult_reg_765 ^ 1'd1);

assign sched_interfaces_ack_V_address0 = tmp_reg_697;

assign sched_interfaces_ack_V_d0 = 1'd0;

assign sched_interfaces_context_current_node_address0 = tmp_reg_697;

assign sched_interfaces_context_next_node_address0 = tmp_reg_697;

assign sched_interfaces_context_state_address0 = tmp_reg_697;

assign sched_interfaces_schedule_V_address0 = tmp_fu_437_p1;

assign sel_tmp3_fu_574_p2 = (tmp1_fu_570_p2 & tmp9_fu_565_p2);

assign sel_tmp4_fu_580_p3 = ((brmerge_fu_541_p2[0:0] === 1'b1) ? match_found_0_mux_fu_553_p2 : sel_tmp3_fu_574_p2);

assign sel_tmp7_demorgan_fu_588_p2 = (brmerge_fu_541_p2 | tmp_10_reg_785);

assign sel_tmp_fu_559_p2 = (brmerge_fu_541_p2 ^ 1'd1);

assign setup_interfaces_context_current_node_address0 = tmp_5_reg_814;

assign setup_interfaces_context_current_node_d0 = new_context_current_1_reg_856;

assign setup_interfaces_context_next_node_address0 = tmp_5_reg_814;

assign setup_interfaces_context_next_node_d0 = new_context_next_nod_1_reg_861;

assign setup_interfaces_context_state_address0 = tmp_5_reg_814;

assign setup_interfaces_context_state_d0 = new_context_state_1_reg_866;

assign setup_interfaces_core_halted_V_address0 = tmp_5_fu_611_p1;

assign setup_interfaces_restart_V_address0 = tmp_5_reg_814;

assign setup_interfaces_restart_V_d0 = 1'd0;

assign tmp1_fu_570_p2 = (tmp_11_reg_791 & tmp_12_reg_796);

assign tmp9_fu_565_p2 = (tmp_10_reg_785 & sel_tmp_fu_559_p2);

assign tmp_10_fu_521_p2 = ((history_current_node_q0 == new_context_current_s_reg_736) ? 1'b1 : 1'b0);

assign tmp_11_fu_526_p2 = ((history_next_node_q0 == new_context_next_nod_reg_743) ? 1'b1 : 1'b0);

assign tmp_12_fu_531_p2 = ((history_state_q0 == new_context_state_reg_750) ? 1'b1 : 1'b0);

assign tmp_1_fu_447_p2 = ((queue_head_ptr_load_reg_682 < 32'd320) ? 1'b1 : 1'b0);

assign tmp_2_fu_616_p2 = ((queue_head_ptr_2_fu_108 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_622_p2 = (halted_flag_reg_383 & tmp_2_fu_616_p2);

assign tmp_5_fu_611_p1 = i1_reg_395;

assign tmp_6_fu_493_p1 = history_head_ptr_fu_80;

assign tmp_7_fu_639_p2 = ((queue_head_ptr_2_fu_108 != 32'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_480_p1 = j_reg_372;

assign tmp_9_fu_657_p1 = queue_head_ptr_1_fu_651_p2;

assign tmp_fu_437_p1 = i_reg_349;

assign tmp_s_fu_487_p1 = queue_head_ptr_load_reg_682;

assign ult_fu_474_p2 = ((j_cast_fu_458_p1 < history_head_ptr_fu_80) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_reg_697[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_814[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //scheduler

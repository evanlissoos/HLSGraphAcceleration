// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scheduler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scheduler::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scheduler::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> scheduler::ap_ST_fsm_state1 = "1";
const sc_lv<12> scheduler::ap_ST_fsm_state2 = "10";
const sc_lv<12> scheduler::ap_ST_fsm_state3 = "100";
const sc_lv<12> scheduler::ap_ST_fsm_state4 = "1000";
const sc_lv<12> scheduler::ap_ST_fsm_state5 = "10000";
const sc_lv<12> scheduler::ap_ST_fsm_state6 = "100000";
const sc_lv<12> scheduler::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> scheduler::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> scheduler::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> scheduler::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> scheduler::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> scheduler::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> scheduler::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> scheduler::ap_const_lv32_1 = "1";
const sc_lv<1> scheduler::ap_const_lv1_0 = "0";
const sc_lv<32> scheduler::ap_const_lv32_2 = "10";
const sc_lv<1> scheduler::ap_const_lv1_1 = "1";
const sc_lv<32> scheduler::ap_const_lv32_3 = "11";
const sc_lv<32> scheduler::ap_const_lv32_5 = "101";
const sc_lv<32> scheduler::ap_const_lv32_6 = "110";
const sc_lv<32> scheduler::ap_const_lv32_7 = "111";
const sc_lv<32> scheduler::ap_const_lv32_8 = "1000";
const sc_lv<32> scheduler::ap_const_lv32_9 = "1001";
const sc_lv<2> scheduler::ap_const_lv2_0 = "00";
const sc_lv<32> scheduler::ap_const_lv32_4 = "100";
const sc_lv<11> scheduler::ap_const_lv11_0 = "00000000000";
const sc_lv<32> scheduler::ap_const_lv32_B = "1011";
const sc_lv<32> scheduler::ap_const_lv32_A = "1010";
const sc_lv<2> scheduler::ap_const_lv2_2 = "10";
const sc_lv<2> scheduler::ap_const_lv2_1 = "1";
const sc_lv<32> scheduler::ap_const_lv32_1F = "11111";
const sc_lv<30> scheduler::ap_const_lv30_0 = "000000000000000000000000000000";
const sc_lv<11> scheduler::ap_const_lv11_400 = "10000000000";
const sc_lv<11> scheduler::ap_const_lv11_1 = "1";
const sc_lv<32> scheduler::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<2> scheduler::ap_const_lv2_3 = "11";
const bool scheduler::ap_const_boolean_1 = true;

scheduler::scheduler(sc_module_name name) : sc_module(name), mVcdFile(0) {
    history_current_node_U = new scheduler_historybkb("history_current_node_U");
    history_current_node_U->clk(ap_clk);
    history_current_node_U->reset(ap_rst);
    history_current_node_U->address0(history_current_node_address0);
    history_current_node_U->ce0(history_current_node_ce0);
    history_current_node_U->we0(history_current_node_we0);
    history_current_node_U->d0(new_context_current_s_reg_1128);
    history_current_node_U->q0(history_current_node_q0);
    history_next_node_U = new scheduler_historybkb("history_next_node_U");
    history_next_node_U->clk(ap_clk);
    history_next_node_U->reset(ap_rst);
    history_next_node_U->address0(history_next_node_address0);
    history_next_node_U->ce0(history_next_node_ce0);
    history_next_node_U->we0(history_next_node_we0);
    history_next_node_U->d0(new_context_next_nod_reg_1138);
    history_next_node_U->q0(history_next_node_q0);
    history_state_U = new scheduler_historybkb("history_state_U");
    history_state_U->clk(ap_clk);
    history_state_U->reset(ap_rst);
    history_state_U->address0(history_state_address0);
    history_state_U->ce0(history_state_ce0);
    history_state_U->we0(history_state_we0);
    history_state_U->d0(new_context_state_reg_1148);
    history_state_U->q0(history_state_q0);
    scheduler_mux_42_eOg_U1 = new scheduler_mux_42_eOg<1,1,32,32,32,32,2,32>("scheduler_mux_42_eOg_U1");
    scheduler_mux_42_eOg_U1->din1(queue_3_current_nod_fu_94);
    scheduler_mux_42_eOg_U1->din2(queue_3_current_nod_1_fu_98);
    scheduler_mux_42_eOg_U1->din3(queue_3_current_nod_2_fu_102);
    scheduler_mux_42_eOg_U1->din4(queue_3_current_nod_3_fu_106);
    scheduler_mux_42_eOg_U1->din5(queue_head_ptr_1_t_fu_936_p2);
    scheduler_mux_42_eOg_U1->dout(new_context_current_1_fu_942_p6);
    scheduler_mux_42_eOg_U2 = new scheduler_mux_42_eOg<1,1,32,32,32,32,2,32>("scheduler_mux_42_eOg_U2");
    scheduler_mux_42_eOg_U2->din1(queue_3_next_node_2_fu_110);
    scheduler_mux_42_eOg_U2->din2(queue_3_next_node_3_fu_114);
    scheduler_mux_42_eOg_U2->din3(queue_3_next_node_6_fu_118);
    scheduler_mux_42_eOg_U2->din4(queue_3_next_node_8_fu_122);
    scheduler_mux_42_eOg_U2->din5(queue_head_ptr_1_t_fu_936_p2);
    scheduler_mux_42_eOg_U2->dout(new_context_next_nod_1_fu_956_p6);
    scheduler_mux_42_eOg_U3 = new scheduler_mux_42_eOg<1,1,32,32,32,32,2,32>("scheduler_mux_42_eOg_U3");
    scheduler_mux_42_eOg_U3->din1(queue_3_state_2_fu_126);
    scheduler_mux_42_eOg_U3->din2(queue_3_state_3_fu_130);
    scheduler_mux_42_eOg_U3->din3(queue_3_state_6_fu_134);
    scheduler_mux_42_eOg_U3->din4(queue_3_state_8_fu_138);
    scheduler_mux_42_eOg_U3->din5(queue_head_ptr_1_t_fu_936_p2);
    scheduler_mux_42_eOg_U3->dout(new_context_state_1_fu_970_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_874_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_874_p2 );

    SC_METHOD(thread_brmerge_fu_816_p2);
    sensitive << ( match_found_reg_352 );
    sensitive << ( rev_fu_811_p2 );

    SC_METHOD(thread_demorgan_fu_920_p2);
    sensitive << ( setup_interfaces_core_halted_V_q0 );
    sensitive << ( tmp_7_fu_914_p2 );

    SC_METHOD(thread_exitcond1_fu_453_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_341 );

    SC_METHOD(thread_exitcond2_fu_500_p2);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j_reg_364 );

    SC_METHOD(thread_exitcond_fu_874_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( i1_reg_387 );

    SC_METHOD(thread_finished);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_874_p2 );
    sensitive << ( tmp_3_fu_897_p2 );

    SC_METHOD(thread_finished_ap_vld);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_874_p2 );

    SC_METHOD(thread_halted_flag_1_fu_908_p2);
    sensitive << ( setup_interfaces_core_halted_V_q0 );
    sensitive << ( halted_flag_reg_375 );

    SC_METHOD(thread_history_current_node_address0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );
    sensitive << ( tmp_8_fu_518_p1 );
    sensitive << ( tmp_6_fu_708_p1 );

    SC_METHOD(thread_history_current_node_ce0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );

    SC_METHOD(thread_history_current_node_we0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );

    SC_METHOD(thread_history_head_ptr_1_fu_720_p2);
    sensitive << ( history_head_ptr_fu_90 );

    SC_METHOD(thread_history_next_node_address0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );
    sensitive << ( tmp_8_fu_518_p1 );
    sensitive << ( tmp_6_fu_708_p1 );

    SC_METHOD(thread_history_next_node_ce0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );

    SC_METHOD(thread_history_next_node_we0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );

    SC_METHOD(thread_history_state_address0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );
    sensitive << ( tmp_8_fu_518_p1 );
    sensitive << ( tmp_6_fu_708_p1 );

    SC_METHOD(thread_history_state_ce0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );

    SC_METHOD(thread_history_state_we0);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );

    SC_METHOD(thread_i_1_fu_880_p2);
    sensitive << ( i1_reg_387 );

    SC_METHOD(thread_i_2_fu_459_p2);
    sensitive << ( i_reg_341 );

    SC_METHOD(thread_icmp_fu_484_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_475_p4 );

    SC_METHOD(thread_j_1_fu_506_p2);
    sensitive << ( j_reg_364 );

    SC_METHOD(thread_j_cast_fu_496_p1);
    sensitive << ( j_reg_364 );

    SC_METHOD(thread_match_found_0_mux_fu_828_p2);
    sensitive << ( match_found_reg_352 );
    sensitive << ( not_not_fu_822_p2 );

    SC_METHOD(thread_match_found_1_fu_868_p2);
    sensitive << ( sel_tmp2_fu_855_p3 );
    sensitive << ( sel_tmp19_demorgan_fu_863_p2 );

    SC_METHOD(thread_match_found_phi_fu_356_p4);
    sensitive << ( match_found_reg_352 );

    SC_METHOD(thread_newSel1_fu_671_p3);
    sensitive << ( new_context_state_reg_1148 );
    sensitive << ( queue_3_state_6_fu_134 );
    sensitive << ( sel_tmp3_fu_528_p2 );

    SC_METHOD(thread_newSel2_fu_567_p3);
    sensitive << ( new_context_current_s_reg_1128 );
    sensitive << ( queue_3_current_nod_2_fu_102 );
    sensitive << ( sel_tmp3_fu_528_p2 );

    SC_METHOD(thread_newSel4_fu_604_p3);
    sensitive << ( new_context_next_nod_reg_1138 );
    sensitive << ( queue_3_next_node_8_fu_122 );
    sensitive << ( sel_tmp3_fu_528_p2 );

    SC_METHOD(thread_newSel6_fu_619_p3);
    sensitive << ( new_context_next_nod_reg_1138 );
    sensitive << ( queue_3_next_node_6_fu_118 );
    sensitive << ( sel_tmp3_fu_528_p2 );

    SC_METHOD(thread_newSel8_fu_656_p3);
    sensitive << ( new_context_state_reg_1148 );
    sensitive << ( queue_3_state_8_fu_138 );
    sensitive << ( sel_tmp3_fu_528_p2 );

    SC_METHOD(thread_newSel_fu_552_p3);
    sensitive << ( new_context_current_s_reg_1128 );
    sensitive << ( queue_3_current_nod_3_fu_106 );
    sensitive << ( sel_tmp3_fu_528_p2 );

    SC_METHOD(thread_not_not_fu_822_p2);
    sensitive << ( rev_fu_811_p2 );

    SC_METHOD(thread_or_cond_5_fu_490_p2);
    sensitive << ( sched_interfaces_schedule_V_q0 );
    sensitive << ( icmp_fu_484_p2 );

    SC_METHOD(thread_or_cond_fu_546_p2);
    sensitive << ( sel_tmp5_fu_540_p2 );
    sensitive << ( sel_tmp4_fu_534_p2 );

    SC_METHOD(thread_queue_3_current_nod_10_fu_582_p3);
    sensitive << ( new_context_current_s_reg_1128 );
    sensitive << ( queue_3_current_nod_1_fu_98 );
    sensitive << ( sel_tmp4_fu_534_p2 );

    SC_METHOD(thread_queue_3_current_nod_11_fu_589_p3);
    sensitive << ( queue_3_current_nod_1_fu_98 );
    sensitive << ( sel_tmp5_fu_540_p2 );
    sensitive << ( queue_3_current_nod_10_fu_582_p3 );

    SC_METHOD(thread_queue_3_current_nod_12_fu_597_p3);
    sensitive << ( new_context_current_s_reg_1128 );
    sensitive << ( queue_3_current_nod_fu_94 );
    sensitive << ( sel_tmp5_fu_540_p2 );

    SC_METHOD(thread_queue_3_current_nod_8_fu_559_p3);
    sensitive << ( queue_3_current_nod_3_fu_106 );
    sensitive << ( or_cond_fu_546_p2 );
    sensitive << ( newSel_fu_552_p3 );

    SC_METHOD(thread_queue_3_current_nod_9_fu_574_p3);
    sensitive << ( queue_3_current_nod_2_fu_102 );
    sensitive << ( or_cond_fu_546_p2 );
    sensitive << ( newSel2_fu_567_p3 );

    SC_METHOD(thread_queue_3_next_node_1_fu_626_p3);
    sensitive << ( queue_3_next_node_6_fu_118 );
    sensitive << ( or_cond_fu_546_p2 );
    sensitive << ( newSel6_fu_619_p3 );

    SC_METHOD(thread_queue_3_next_node_4_fu_634_p3);
    sensitive << ( new_context_next_nod_reg_1138 );
    sensitive << ( queue_3_next_node_3_fu_114 );
    sensitive << ( sel_tmp4_fu_534_p2 );

    SC_METHOD(thread_queue_3_next_node_5_fu_641_p3);
    sensitive << ( queue_3_next_node_3_fu_114 );
    sensitive << ( sel_tmp5_fu_540_p2 );
    sensitive << ( queue_3_next_node_4_fu_634_p3 );

    SC_METHOD(thread_queue_3_next_node_7_fu_649_p3);
    sensitive << ( new_context_next_nod_reg_1138 );
    sensitive << ( queue_3_next_node_2_fu_110 );
    sensitive << ( sel_tmp5_fu_540_p2 );

    SC_METHOD(thread_queue_3_next_node_fu_611_p3);
    sensitive << ( queue_3_next_node_8_fu_122 );
    sensitive << ( or_cond_fu_546_p2 );
    sensitive << ( newSel4_fu_604_p3 );

    SC_METHOD(thread_queue_3_state_1_fu_678_p3);
    sensitive << ( queue_3_state_6_fu_134 );
    sensitive << ( or_cond_fu_546_p2 );
    sensitive << ( newSel1_fu_671_p3 );

    SC_METHOD(thread_queue_3_state_4_fu_686_p3);
    sensitive << ( new_context_state_reg_1148 );
    sensitive << ( queue_3_state_3_fu_130 );
    sensitive << ( sel_tmp4_fu_534_p2 );

    SC_METHOD(thread_queue_3_state_5_fu_693_p3);
    sensitive << ( queue_3_state_3_fu_130 );
    sensitive << ( sel_tmp5_fu_540_p2 );
    sensitive << ( queue_3_state_4_fu_686_p3 );

    SC_METHOD(thread_queue_3_state_7_fu_701_p3);
    sensitive << ( new_context_state_reg_1148 );
    sensitive << ( queue_3_state_2_fu_126 );
    sensitive << ( sel_tmp5_fu_540_p2 );

    SC_METHOD(thread_queue_3_state_fu_663_p3);
    sensitive << ( queue_3_state_8_fu_138 );
    sensitive << ( or_cond_fu_546_p2 );
    sensitive << ( newSel8_fu_656_p3 );

    SC_METHOD(thread_queue_head_ptr_1_fu_930_p2);
    sensitive << ( queue_head_ptr_2_fu_154 );

    SC_METHOD(thread_queue_head_ptr_1_t_fu_936_p2);
    sensitive << ( tmp_12_fu_926_p1 );

    SC_METHOD(thread_queue_head_ptr_3_fu_715_p2);
    sensitive << ( queue_head_ptr_load_reg_1074 );

    SC_METHOD(thread_rev_fu_811_p2);
    sensitive << ( ult_reg_1166 );

    SC_METHOD(thread_sched_interfaces_ack_V_address0);
    sensitive << ( tmp_reg_1089 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_d0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_context_current_node_address0);
    sensitive << ( tmp_reg_1089 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_current_node_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_next_node_address0);
    sensitive << ( tmp_reg_1089 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_next_node_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_state_address0);
    sensitive << ( tmp_reg_1089 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_state_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_schedule_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_465_p1 );

    SC_METHOD(thread_sched_interfaces_schedule_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sel_tmp19_demorgan_fu_863_p2);
    sensitive << ( tmp_s_reg_1186 );
    sensitive << ( brmerge_fu_816_p2 );

    SC_METHOD(thread_sel_tmp1_fu_849_p2);
    sensitive << ( tmp2_fu_845_p2 );
    sensitive << ( tmp1_fu_840_p2 );

    SC_METHOD(thread_sel_tmp2_fu_855_p3);
    sensitive << ( brmerge_fu_816_p2 );
    sensitive << ( match_found_0_mux_fu_828_p2 );
    sensitive << ( sel_tmp1_fu_849_p2 );

    SC_METHOD(thread_sel_tmp3_fu_528_p2);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );
    sensitive << ( tmp_14_fu_525_p1 );

    SC_METHOD(thread_sel_tmp4_fu_534_p2);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );
    sensitive << ( tmp_14_fu_525_p1 );

    SC_METHOD(thread_sel_tmp5_fu_540_p2);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( match_found_phi_fu_356_p4 );
    sensitive << ( tmp_14_fu_525_p1 );

    SC_METHOD(thread_sel_tmp_fu_834_p2);
    sensitive << ( brmerge_fu_816_p2 );

    SC_METHOD(thread_setup_interfaces_context_current_node_address0);
    sensitive << ( tmp_5_reg_1215 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_current_node_ce0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_current_node_d0);
    sensitive << ( new_context_current_1_reg_1242 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_current_node_we0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_next_node_address0);
    sensitive << ( tmp_5_reg_1215 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_next_node_ce0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_next_node_d0);
    sensitive << ( new_context_next_nod_1_reg_1247 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_next_node_we0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_state_address0);
    sensitive << ( tmp_5_reg_1215 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_state_ce0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_state_d0);
    sensitive << ( new_context_state_1_reg_1252 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_context_state_we0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_core_halted_V_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_886_p1 );

    SC_METHOD(thread_setup_interfaces_core_halted_V_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_restart_V_address0);
    sensitive << ( tmp_5_reg_1215 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_restart_V_ce0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_restart_V_d0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_setup_interfaces_restart_V_we0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp1_fu_840_p2);
    sensitive << ( tmp_s_reg_1186 );
    sensitive << ( sel_tmp_fu_834_p2 );

    SC_METHOD(thread_tmp2_fu_845_p2);
    sensitive << ( tmp_10_reg_1192 );
    sensitive << ( tmp_11_reg_1197 );

    SC_METHOD(thread_tmp_10_fu_801_p2);
    sensitive << ( new_context_next_nod_reg_1138 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( history_next_node_q0 );

    SC_METHOD(thread_tmp_11_fu_806_p2);
    sensitive << ( new_context_state_reg_1148 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( history_state_q0 );

    SC_METHOD(thread_tmp_12_fu_926_p1);
    sensitive << ( queue_head_ptr_2_fu_154 );

    SC_METHOD(thread_tmp_14_fu_525_p1);
    sensitive << ( queue_head_ptr_load_reg_1074 );

    SC_METHOD(thread_tmp_1_fu_475_p4);
    sensitive << ( queue_head_ptr_load_reg_1074 );

    SC_METHOD(thread_tmp_2_fu_891_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_874_p2 );
    sensitive << ( queue_head_ptr_2_fu_154 );

    SC_METHOD(thread_tmp_3_fu_897_p2);
    sensitive << ( halted_flag_reg_375 );
    sensitive << ( tmp_2_fu_891_p2 );

    SC_METHOD(thread_tmp_5_fu_886_p1);
    sensitive << ( i1_reg_387 );

    SC_METHOD(thread_tmp_6_fu_708_p1);
    sensitive << ( history_head_ptr_fu_90 );

    SC_METHOD(thread_tmp_7_fu_914_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( queue_head_ptr_2_fu_154 );

    SC_METHOD(thread_tmp_8_fu_518_p1);
    sensitive << ( j_reg_364 );

    SC_METHOD(thread_tmp_fu_465_p1);
    sensitive << ( i_reg_341 );

    SC_METHOD(thread_tmp_s_fu_796_p2);
    sensitive << ( new_context_current_s_reg_1128 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( history_current_node_q0 );

    SC_METHOD(thread_ult_fu_512_p2);
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( history_head_ptr_fu_90 );
    sensitive << ( j_cast_fu_496_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_453_p2 );
    sensitive << ( or_cond_5_fu_490_p2 );
    sensitive << ( or_cond_5_reg_1109 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_500_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_874_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( demorgan_fu_920_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scheduler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_address0, "(port)sched_interfaces_context_current_node_address0");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_ce0, "(port)sched_interfaces_context_current_node_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_q0, "(port)sched_interfaces_context_current_node_q0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_address0, "(port)sched_interfaces_context_next_node_address0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_ce0, "(port)sched_interfaces_context_next_node_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_q0, "(port)sched_interfaces_context_next_node_q0");
    sc_trace(mVcdFile, sched_interfaces_context_state_address0, "(port)sched_interfaces_context_state_address0");
    sc_trace(mVcdFile, sched_interfaces_context_state_ce0, "(port)sched_interfaces_context_state_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_state_q0, "(port)sched_interfaces_context_state_q0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_address0, "(port)sched_interfaces_schedule_V_address0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_ce0, "(port)sched_interfaces_schedule_V_ce0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_q0, "(port)sched_interfaces_schedule_V_q0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_address0, "(port)sched_interfaces_ack_V_address0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_ce0, "(port)sched_interfaces_ack_V_ce0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_we0, "(port)sched_interfaces_ack_V_we0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_d0, "(port)sched_interfaces_ack_V_d0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_address0, "(port)setup_interfaces_context_current_node_address0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_ce0, "(port)setup_interfaces_context_current_node_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_we0, "(port)setup_interfaces_context_current_node_we0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_d0, "(port)setup_interfaces_context_current_node_d0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_address0, "(port)setup_interfaces_context_next_node_address0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_ce0, "(port)setup_interfaces_context_next_node_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_we0, "(port)setup_interfaces_context_next_node_we0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_d0, "(port)setup_interfaces_context_next_node_d0");
    sc_trace(mVcdFile, setup_interfaces_context_state_address0, "(port)setup_interfaces_context_state_address0");
    sc_trace(mVcdFile, setup_interfaces_context_state_ce0, "(port)setup_interfaces_context_state_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_state_we0, "(port)setup_interfaces_context_state_we0");
    sc_trace(mVcdFile, setup_interfaces_context_state_d0, "(port)setup_interfaces_context_state_d0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_address0, "(port)setup_interfaces_restart_V_address0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_ce0, "(port)setup_interfaces_restart_V_ce0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_we0, "(port)setup_interfaces_restart_V_we0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_d0, "(port)setup_interfaces_restart_V_d0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_address0, "(port)setup_interfaces_core_halted_V_address0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_ce0, "(port)setup_interfaces_core_halted_V_ce0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_q0, "(port)setup_interfaces_core_halted_V_q0");
    sc_trace(mVcdFile, finished, "(port)finished");
    sc_trace(mVcdFile, finished_ap_vld, "(port)finished_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, queue_head_ptr_load_reg_1074, "queue_head_ptr_load_reg_1074");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_2_fu_459_p2, "i_2_fu_459_p2");
    sc_trace(mVcdFile, i_2_reg_1084, "i_2_reg_1084");
    sc_trace(mVcdFile, tmp_fu_465_p1, "tmp_fu_465_p1");
    sc_trace(mVcdFile, tmp_reg_1089, "tmp_reg_1089");
    sc_trace(mVcdFile, exitcond1_fu_453_p2, "exitcond1_fu_453_p2");
    sc_trace(mVcdFile, or_cond_5_fu_490_p2, "or_cond_5_fu_490_p2");
    sc_trace(mVcdFile, or_cond_5_reg_1109, "or_cond_5_reg_1109");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, new_context_current_s_reg_1128, "new_context_current_s_reg_1128");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, new_context_next_nod_reg_1138, "new_context_next_nod_reg_1138");
    sc_trace(mVcdFile, new_context_state_reg_1148, "new_context_state_reg_1148");
    sc_trace(mVcdFile, j_1_fu_506_p2, "j_1_fu_506_p2");
    sc_trace(mVcdFile, j_1_reg_1161, "j_1_reg_1161");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ult_fu_512_p2, "ult_fu_512_p2");
    sc_trace(mVcdFile, ult_reg_1166, "ult_reg_1166");
    sc_trace(mVcdFile, exitcond2_fu_500_p2, "exitcond2_fu_500_p2");
    sc_trace(mVcdFile, tmp_s_fu_796_p2, "tmp_s_fu_796_p2");
    sc_trace(mVcdFile, tmp_s_reg_1186, "tmp_s_reg_1186");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_10_fu_801_p2, "tmp_10_fu_801_p2");
    sc_trace(mVcdFile, tmp_10_reg_1192, "tmp_10_reg_1192");
    sc_trace(mVcdFile, tmp_11_fu_806_p2, "tmp_11_fu_806_p2");
    sc_trace(mVcdFile, tmp_11_reg_1197, "tmp_11_reg_1197");
    sc_trace(mVcdFile, match_found_1_fu_868_p2, "match_found_1_fu_868_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_1_fu_880_p2, "i_1_fu_880_p2");
    sc_trace(mVcdFile, i_1_reg_1210, "i_1_reg_1210");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_5_fu_886_p1, "tmp_5_fu_886_p1");
    sc_trace(mVcdFile, tmp_5_reg_1215, "tmp_5_reg_1215");
    sc_trace(mVcdFile, exitcond_fu_874_p2, "exitcond_fu_874_p2");
    sc_trace(mVcdFile, halted_flag_1_fu_908_p2, "halted_flag_1_fu_908_p2");
    sc_trace(mVcdFile, halted_flag_1_reg_1228, "halted_flag_1_reg_1228");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, demorgan_fu_920_p2, "demorgan_fu_920_p2");
    sc_trace(mVcdFile, demorgan_reg_1233, "demorgan_reg_1233");
    sc_trace(mVcdFile, queue_head_ptr_1_fu_930_p2, "queue_head_ptr_1_fu_930_p2");
    sc_trace(mVcdFile, queue_head_ptr_1_reg_1237, "queue_head_ptr_1_reg_1237");
    sc_trace(mVcdFile, new_context_current_1_fu_942_p6, "new_context_current_1_fu_942_p6");
    sc_trace(mVcdFile, new_context_current_1_reg_1242, "new_context_current_1_reg_1242");
    sc_trace(mVcdFile, new_context_next_nod_1_fu_956_p6, "new_context_next_nod_1_fu_956_p6");
    sc_trace(mVcdFile, new_context_next_nod_1_reg_1247, "new_context_next_nod_1_reg_1247");
    sc_trace(mVcdFile, new_context_state_1_fu_970_p6, "new_context_state_1_fu_970_p6");
    sc_trace(mVcdFile, new_context_state_1_reg_1252, "new_context_state_1_reg_1252");
    sc_trace(mVcdFile, history_current_node_address0, "history_current_node_address0");
    sc_trace(mVcdFile, history_current_node_ce0, "history_current_node_ce0");
    sc_trace(mVcdFile, history_current_node_we0, "history_current_node_we0");
    sc_trace(mVcdFile, history_current_node_q0, "history_current_node_q0");
    sc_trace(mVcdFile, history_next_node_address0, "history_next_node_address0");
    sc_trace(mVcdFile, history_next_node_ce0, "history_next_node_ce0");
    sc_trace(mVcdFile, history_next_node_we0, "history_next_node_we0");
    sc_trace(mVcdFile, history_next_node_q0, "history_next_node_q0");
    sc_trace(mVcdFile, history_state_address0, "history_state_address0");
    sc_trace(mVcdFile, history_state_ce0, "history_state_ce0");
    sc_trace(mVcdFile, history_state_we0, "history_state_we0");
    sc_trace(mVcdFile, history_state_q0, "history_state_q0");
    sc_trace(mVcdFile, i_reg_341, "i_reg_341");
    sc_trace(mVcdFile, match_found_phi_fu_356_p4, "match_found_phi_fu_356_p4");
    sc_trace(mVcdFile, match_found_reg_352, "match_found_reg_352");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, j_reg_364, "j_reg_364");
    sc_trace(mVcdFile, halted_flag_reg_375, "halted_flag_reg_375");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i1_reg_387, "i1_reg_387");
    sc_trace(mVcdFile, tmp_8_fu_518_p1, "tmp_8_fu_518_p1");
    sc_trace(mVcdFile, tmp_6_fu_708_p1, "tmp_6_fu_708_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, queue_head_ptr_fu_86, "queue_head_ptr_fu_86");
    sc_trace(mVcdFile, queue_head_ptr_3_fu_715_p2, "queue_head_ptr_3_fu_715_p2");
    sc_trace(mVcdFile, history_head_ptr_fu_90, "history_head_ptr_fu_90");
    sc_trace(mVcdFile, history_head_ptr_1_fu_720_p2, "history_head_ptr_1_fu_720_p2");
    sc_trace(mVcdFile, queue_3_current_nod_fu_94, "queue_3_current_nod_fu_94");
    sc_trace(mVcdFile, queue_3_current_nod_12_fu_597_p3, "queue_3_current_nod_12_fu_597_p3");
    sc_trace(mVcdFile, queue_3_current_nod_1_fu_98, "queue_3_current_nod_1_fu_98");
    sc_trace(mVcdFile, queue_3_current_nod_11_fu_589_p3, "queue_3_current_nod_11_fu_589_p3");
    sc_trace(mVcdFile, queue_3_current_nod_2_fu_102, "queue_3_current_nod_2_fu_102");
    sc_trace(mVcdFile, queue_3_current_nod_9_fu_574_p3, "queue_3_current_nod_9_fu_574_p3");
    sc_trace(mVcdFile, queue_3_current_nod_3_fu_106, "queue_3_current_nod_3_fu_106");
    sc_trace(mVcdFile, queue_3_current_nod_8_fu_559_p3, "queue_3_current_nod_8_fu_559_p3");
    sc_trace(mVcdFile, queue_3_next_node_2_fu_110, "queue_3_next_node_2_fu_110");
    sc_trace(mVcdFile, queue_3_next_node_7_fu_649_p3, "queue_3_next_node_7_fu_649_p3");
    sc_trace(mVcdFile, queue_3_next_node_3_fu_114, "queue_3_next_node_3_fu_114");
    sc_trace(mVcdFile, queue_3_next_node_5_fu_641_p3, "queue_3_next_node_5_fu_641_p3");
    sc_trace(mVcdFile, queue_3_next_node_6_fu_118, "queue_3_next_node_6_fu_118");
    sc_trace(mVcdFile, queue_3_next_node_1_fu_626_p3, "queue_3_next_node_1_fu_626_p3");
    sc_trace(mVcdFile, queue_3_next_node_8_fu_122, "queue_3_next_node_8_fu_122");
    sc_trace(mVcdFile, queue_3_next_node_fu_611_p3, "queue_3_next_node_fu_611_p3");
    sc_trace(mVcdFile, queue_3_state_2_fu_126, "queue_3_state_2_fu_126");
    sc_trace(mVcdFile, queue_3_state_7_fu_701_p3, "queue_3_state_7_fu_701_p3");
    sc_trace(mVcdFile, queue_3_state_3_fu_130, "queue_3_state_3_fu_130");
    sc_trace(mVcdFile, queue_3_state_5_fu_693_p3, "queue_3_state_5_fu_693_p3");
    sc_trace(mVcdFile, queue_3_state_6_fu_134, "queue_3_state_6_fu_134");
    sc_trace(mVcdFile, queue_3_state_1_fu_678_p3, "queue_3_state_1_fu_678_p3");
    sc_trace(mVcdFile, queue_3_state_8_fu_138, "queue_3_state_8_fu_138");
    sc_trace(mVcdFile, queue_3_state_fu_663_p3, "queue_3_state_fu_663_p3");
    sc_trace(mVcdFile, queue_head_ptr_2_fu_154, "queue_head_ptr_2_fu_154");
    sc_trace(mVcdFile, tmp_1_fu_475_p4, "tmp_1_fu_475_p4");
    sc_trace(mVcdFile, icmp_fu_484_p2, "icmp_fu_484_p2");
    sc_trace(mVcdFile, j_cast_fu_496_p1, "j_cast_fu_496_p1");
    sc_trace(mVcdFile, tmp_14_fu_525_p1, "tmp_14_fu_525_p1");
    sc_trace(mVcdFile, sel_tmp5_fu_540_p2, "sel_tmp5_fu_540_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_534_p2, "sel_tmp4_fu_534_p2");
    sc_trace(mVcdFile, sel_tmp3_fu_528_p2, "sel_tmp3_fu_528_p2");
    sc_trace(mVcdFile, or_cond_fu_546_p2, "or_cond_fu_546_p2");
    sc_trace(mVcdFile, newSel_fu_552_p3, "newSel_fu_552_p3");
    sc_trace(mVcdFile, newSel2_fu_567_p3, "newSel2_fu_567_p3");
    sc_trace(mVcdFile, queue_3_current_nod_10_fu_582_p3, "queue_3_current_nod_10_fu_582_p3");
    sc_trace(mVcdFile, newSel4_fu_604_p3, "newSel4_fu_604_p3");
    sc_trace(mVcdFile, newSel6_fu_619_p3, "newSel6_fu_619_p3");
    sc_trace(mVcdFile, queue_3_next_node_4_fu_634_p3, "queue_3_next_node_4_fu_634_p3");
    sc_trace(mVcdFile, newSel8_fu_656_p3, "newSel8_fu_656_p3");
    sc_trace(mVcdFile, newSel1_fu_671_p3, "newSel1_fu_671_p3");
    sc_trace(mVcdFile, queue_3_state_4_fu_686_p3, "queue_3_state_4_fu_686_p3");
    sc_trace(mVcdFile, rev_fu_811_p2, "rev_fu_811_p2");
    sc_trace(mVcdFile, not_not_fu_822_p2, "not_not_fu_822_p2");
    sc_trace(mVcdFile, brmerge_fu_816_p2, "brmerge_fu_816_p2");
    sc_trace(mVcdFile, sel_tmp_fu_834_p2, "sel_tmp_fu_834_p2");
    sc_trace(mVcdFile, tmp2_fu_845_p2, "tmp2_fu_845_p2");
    sc_trace(mVcdFile, tmp1_fu_840_p2, "tmp1_fu_840_p2");
    sc_trace(mVcdFile, match_found_0_mux_fu_828_p2, "match_found_0_mux_fu_828_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_849_p2, "sel_tmp1_fu_849_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_855_p3, "sel_tmp2_fu_855_p3");
    sc_trace(mVcdFile, sel_tmp19_demorgan_fu_863_p2, "sel_tmp19_demorgan_fu_863_p2");
    sc_trace(mVcdFile, tmp_2_fu_891_p2, "tmp_2_fu_891_p2");
    sc_trace(mVcdFile, tmp_3_fu_897_p2, "tmp_3_fu_897_p2");
    sc_trace(mVcdFile, tmp_7_fu_914_p2, "tmp_7_fu_914_p2");
    sc_trace(mVcdFile, tmp_12_fu_926_p1, "tmp_12_fu_926_p1");
    sc_trace(mVcdFile, queue_head_ptr_1_t_fu_936_p2, "queue_head_ptr_1_t_fu_936_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("scheduler.hdltvin.dat");
    mHdltvoutHandle.open("scheduler.hdltvout.dat");
}

scheduler::~scheduler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete history_current_node_U;
    delete history_next_node_U;
    delete history_state_U;
    delete scheduler_mux_42_eOg_U1;
    delete scheduler_mux_42_eOg_U2;
    delete scheduler_mux_42_eOg_U3;
}

void scheduler::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        halted_flag_reg_375 = halted_flag_1_reg_1228.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_453_p2.read(), ap_const_lv1_1))) {
        halted_flag_reg_375 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
        history_head_ptr_fu_90 = history_head_ptr_1_fu_720_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        history_head_ptr_fu_90 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i1_reg_387 = i_1_reg_1210.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_453_p2.read(), ap_const_lv1_1))) {
        i1_reg_387 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_5_reg_1109.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read())))) {
        i_reg_341 = i_2_reg_1084.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_341 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j_reg_364 = j_1_reg_1161.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_reg_364 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        match_found_reg_352 = match_found_1_fu_868_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        match_found_reg_352 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, demorgan_reg_1233.read()))) {
        queue_head_ptr_2_fu_154 = queue_head_ptr_1_reg_1237.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_453_p2.read(), ap_const_lv1_1))) {
        queue_head_ptr_2_fu_154 = queue_head_ptr_fu_86.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
        queue_head_ptr_fu_86 = queue_head_ptr_3_fu_715_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        queue_head_ptr_fu_86 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        demorgan_reg_1233 = demorgan_fu_920_p2.read();
        halted_flag_1_reg_1228 = halted_flag_1_fu_908_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_1_reg_1210 = i_1_fu_880_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_2_reg_1084 = i_2_fu_459_p2.read();
        queue_head_ptr_load_reg_1074 = queue_head_ptr_fu_86.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1))) {
        j_1_reg_1161 = j_1_fu_506_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, demorgan_fu_920_p2.read()))) {
        new_context_current_1_reg_1242 = new_context_current_1_fu_942_p6.read();
        new_context_next_nod_1_reg_1247 = new_context_next_nod_1_fu_956_p6.read();
        new_context_state_1_reg_1252 = new_context_state_1_fu_970_p6.read();
        queue_head_ptr_1_reg_1237 = queue_head_ptr_1_fu_930_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        new_context_current_s_reg_1128 = sched_interfaces_context_current_node_q0.read();
        new_context_next_nod_reg_1138 = sched_interfaces_context_next_node_q0.read();
        new_context_state_reg_1148 = sched_interfaces_context_state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        or_cond_5_reg_1109 = or_cond_5_fu_490_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
        queue_3_current_nod_1_fu_98 = queue_3_current_nod_11_fu_589_p3.read();
        queue_3_current_nod_2_fu_102 = queue_3_current_nod_9_fu_574_p3.read();
        queue_3_current_nod_3_fu_106 = queue_3_current_nod_8_fu_559_p3.read();
        queue_3_current_nod_fu_94 = queue_3_current_nod_12_fu_597_p3.read();
        queue_3_next_node_2_fu_110 = queue_3_next_node_7_fu_649_p3.read();
        queue_3_next_node_3_fu_114 = queue_3_next_node_5_fu_641_p3.read();
        queue_3_next_node_6_fu_118 = queue_3_next_node_1_fu_626_p3.read();
        queue_3_next_node_8_fu_122 = queue_3_next_node_fu_611_p3.read();
        queue_3_state_2_fu_126 = queue_3_state_7_fu_701_p3.read();
        queue_3_state_3_fu_130 = queue_3_state_5_fu_693_p3.read();
        queue_3_state_6_fu_134 = queue_3_state_1_fu_678_p3.read();
        queue_3_state_8_fu_138 = queue_3_state_fu_663_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_10_reg_1192 = tmp_10_fu_801_p2.read();
        tmp_11_reg_1197 = tmp_11_fu_806_p2.read();
        tmp_s_reg_1186 = tmp_s_fu_796_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_874_p2.read()))) {
        tmp_5_reg_1215 = tmp_5_fu_886_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_453_p2.read(), ap_const_lv1_0))) {
        tmp_reg_1089 = tmp_fu_465_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_500_p2.read()))) {
        ult_reg_1166 = ult_fu_512_p2.read();
    }
}

void scheduler::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void scheduler::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void scheduler::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void scheduler::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void scheduler::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void scheduler::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void scheduler::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void scheduler::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void scheduler::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void scheduler::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void scheduler::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void scheduler::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void scheduler::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_874_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void scheduler::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scheduler::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_874_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void scheduler::thread_brmerge_fu_816_p2() {
    brmerge_fu_816_p2 = (rev_fu_811_p2.read() | match_found_reg_352.read());
}

void scheduler::thread_demorgan_fu_920_p2() {
    demorgan_fu_920_p2 = (setup_interfaces_core_halted_V_q0.read() & tmp_7_fu_914_p2.read());
}

void scheduler::thread_exitcond1_fu_453_p2() {
    exitcond1_fu_453_p2 = (!i_reg_341.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_341.read() == ap_const_lv2_2);
}

void scheduler::thread_exitcond2_fu_500_p2() {
    exitcond2_fu_500_p2 = (!j_reg_364.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_364.read() == ap_const_lv11_400);
}

void scheduler::thread_exitcond_fu_874_p2() {
    exitcond_fu_874_p2 = (!i1_reg_387.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_387.read() == ap_const_lv2_2);
}

void scheduler::thread_finished() {
    finished = esl_zext<32,1>(tmp_3_fu_897_p2.read());
}

void scheduler::thread_finished_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_874_p2.read()))) {
        finished_ap_vld = ap_const_logic_1;
    } else {
        finished_ap_vld = ap_const_logic_0;
    }
}

void scheduler::thread_halted_flag_1_fu_908_p2() {
    halted_flag_1_fu_908_p2 = (setup_interfaces_core_halted_V_q0.read() & halted_flag_reg_375.read());
}

void scheduler::thread_history_current_node_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1))) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
            history_current_node_address0 =  (sc_lv<10>) (tmp_6_fu_708_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_500_p2.read())) {
            history_current_node_address0 =  (sc_lv<10>) (tmp_8_fu_518_p1.read());
        } else {
            history_current_node_address0 = "XXXXXXXXXX";
        }
    } else {
        history_current_node_address0 = "XXXXXXXXXX";
    }
}

void scheduler::thread_history_current_node_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_500_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read())))) {
        history_current_node_ce0 = ap_const_logic_1;
    } else {
        history_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_current_node_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
        history_current_node_we0 = ap_const_logic_1;
    } else {
        history_current_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_head_ptr_1_fu_720_p2() {
    history_head_ptr_1_fu_720_p2 = (!ap_const_lv32_1.is_01() || !history_head_ptr_fu_90.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(history_head_ptr_fu_90.read()));
}

void scheduler::thread_history_next_node_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1))) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
            history_next_node_address0 =  (sc_lv<10>) (tmp_6_fu_708_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_500_p2.read())) {
            history_next_node_address0 =  (sc_lv<10>) (tmp_8_fu_518_p1.read());
        } else {
            history_next_node_address0 = "XXXXXXXXXX";
        }
    } else {
        history_next_node_address0 = "XXXXXXXXXX";
    }
}

void scheduler::thread_history_next_node_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_500_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read())))) {
        history_next_node_ce0 = ap_const_logic_1;
    } else {
        history_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_next_node_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
        history_next_node_we0 = ap_const_logic_1;
    } else {
        history_next_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_state_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1))) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
            history_state_address0 =  (sc_lv<10>) (tmp_6_fu_708_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_500_p2.read())) {
            history_state_address0 =  (sc_lv<10>) (tmp_8_fu_518_p1.read());
        } else {
            history_state_address0 = "XXXXXXXXXX";
        }
    } else {
        history_state_address0 = "XXXXXXXXXX";
    }
}

void scheduler::thread_history_state_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_500_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read())))) {
        history_state_ce0 = ap_const_logic_1;
    } else {
        history_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_5_reg_1109.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_356_p4.read()))) {
        history_state_we0 = ap_const_logic_1;
    } else {
        history_state_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_i_1_fu_880_p2() {
    i_1_fu_880_p2 = (!i1_reg_387.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i1_reg_387.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void scheduler::thread_i_2_fu_459_p2() {
    i_2_fu_459_p2 = (!i_reg_341.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_341.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void scheduler::thread_icmp_fu_484_p2() {
    icmp_fu_484_p2 = (!tmp_1_fu_475_p4.read().is_01() || !ap_const_lv30_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_475_p4.read() == ap_const_lv30_0);
}

void scheduler::thread_j_1_fu_506_p2() {
    j_1_fu_506_p2 = (!j_reg_364.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(j_reg_364.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void scheduler::thread_j_cast_fu_496_p1() {
    j_cast_fu_496_p1 = esl_zext<32,11>(j_reg_364.read());
}

void scheduler::thread_match_found_0_mux_fu_828_p2() {
    match_found_0_mux_fu_828_p2 = (match_found_reg_352.read() | not_not_fu_822_p2.read());
}

void scheduler::thread_match_found_1_fu_868_p2() {
    match_found_1_fu_868_p2 = (sel_tmp2_fu_855_p3.read() & sel_tmp19_demorgan_fu_863_p2.read());
}

void scheduler::thread_match_found_phi_fu_356_p4() {
    match_found_phi_fu_356_p4 = match_found_reg_352.read();
}

void scheduler::thread_newSel1_fu_671_p3() {
    newSel1_fu_671_p3 = (!sel_tmp3_fu_528_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_fu_528_p2.read()[0].to_bool())? new_context_state_reg_1148.read(): queue_3_state_6_fu_134.read());
}

void scheduler::thread_newSel2_fu_567_p3() {
    newSel2_fu_567_p3 = (!sel_tmp3_fu_528_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_fu_528_p2.read()[0].to_bool())? new_context_current_s_reg_1128.read(): queue_3_current_nod_2_fu_102.read());
}

void scheduler::thread_newSel4_fu_604_p3() {
    newSel4_fu_604_p3 = (!sel_tmp3_fu_528_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_fu_528_p2.read()[0].to_bool())? queue_3_next_node_8_fu_122.read(): new_context_next_nod_reg_1138.read());
}

void scheduler::thread_newSel6_fu_619_p3() {
    newSel6_fu_619_p3 = (!sel_tmp3_fu_528_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_fu_528_p2.read()[0].to_bool())? new_context_next_nod_reg_1138.read(): queue_3_next_node_6_fu_118.read());
}

void scheduler::thread_newSel8_fu_656_p3() {
    newSel8_fu_656_p3 = (!sel_tmp3_fu_528_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_fu_528_p2.read()[0].to_bool())? queue_3_state_8_fu_138.read(): new_context_state_reg_1148.read());
}

void scheduler::thread_newSel_fu_552_p3() {
    newSel_fu_552_p3 = (!sel_tmp3_fu_528_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_fu_528_p2.read()[0].to_bool())? queue_3_current_nod_3_fu_106.read(): new_context_current_s_reg_1128.read());
}

void scheduler::thread_not_not_fu_822_p2() {
    not_not_fu_822_p2 = (rev_fu_811_p2.read() ^ ap_const_lv1_1);
}

void scheduler::thread_or_cond_5_fu_490_p2() {
    or_cond_5_fu_490_p2 = (sched_interfaces_schedule_V_q0.read() & icmp_fu_484_p2.read());
}

void scheduler::thread_or_cond_fu_546_p2() {
    or_cond_fu_546_p2 = (sel_tmp5_fu_540_p2.read() | sel_tmp4_fu_534_p2.read());
}

void scheduler::thread_queue_3_current_nod_10_fu_582_p3() {
    queue_3_current_nod_10_fu_582_p3 = (!sel_tmp4_fu_534_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_fu_534_p2.read()[0].to_bool())? new_context_current_s_reg_1128.read(): queue_3_current_nod_1_fu_98.read());
}

void scheduler::thread_queue_3_current_nod_11_fu_589_p3() {
    queue_3_current_nod_11_fu_589_p3 = (!sel_tmp5_fu_540_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_fu_540_p2.read()[0].to_bool())? queue_3_current_nod_1_fu_98.read(): queue_3_current_nod_10_fu_582_p3.read());
}

void scheduler::thread_queue_3_current_nod_12_fu_597_p3() {
    queue_3_current_nod_12_fu_597_p3 = (!sel_tmp5_fu_540_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_fu_540_p2.read()[0].to_bool())? new_context_current_s_reg_1128.read(): queue_3_current_nod_fu_94.read());
}

void scheduler::thread_queue_3_current_nod_8_fu_559_p3() {
    queue_3_current_nod_8_fu_559_p3 = (!or_cond_fu_546_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_546_p2.read()[0].to_bool())? queue_3_current_nod_3_fu_106.read(): newSel_fu_552_p3.read());
}

void scheduler::thread_queue_3_current_nod_9_fu_574_p3() {
    queue_3_current_nod_9_fu_574_p3 = (!or_cond_fu_546_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_546_p2.read()[0].to_bool())? queue_3_current_nod_2_fu_102.read(): newSel2_fu_567_p3.read());
}

void scheduler::thread_queue_3_next_node_1_fu_626_p3() {
    queue_3_next_node_1_fu_626_p3 = (!or_cond_fu_546_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_546_p2.read()[0].to_bool())? queue_3_next_node_6_fu_118.read(): newSel6_fu_619_p3.read());
}

void scheduler::thread_queue_3_next_node_4_fu_634_p3() {
    queue_3_next_node_4_fu_634_p3 = (!sel_tmp4_fu_534_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_fu_534_p2.read()[0].to_bool())? new_context_next_nod_reg_1138.read(): queue_3_next_node_3_fu_114.read());
}

void scheduler::thread_queue_3_next_node_5_fu_641_p3() {
    queue_3_next_node_5_fu_641_p3 = (!sel_tmp5_fu_540_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_fu_540_p2.read()[0].to_bool())? queue_3_next_node_3_fu_114.read(): queue_3_next_node_4_fu_634_p3.read());
}

void scheduler::thread_queue_3_next_node_7_fu_649_p3() {
    queue_3_next_node_7_fu_649_p3 = (!sel_tmp5_fu_540_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_fu_540_p2.read()[0].to_bool())? new_context_next_nod_reg_1138.read(): queue_3_next_node_2_fu_110.read());
}

void scheduler::thread_queue_3_next_node_fu_611_p3() {
    queue_3_next_node_fu_611_p3 = (!or_cond_fu_546_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_546_p2.read()[0].to_bool())? queue_3_next_node_8_fu_122.read(): newSel4_fu_604_p3.read());
}

void scheduler::thread_queue_3_state_1_fu_678_p3() {
    queue_3_state_1_fu_678_p3 = (!or_cond_fu_546_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_546_p2.read()[0].to_bool())? queue_3_state_6_fu_134.read(): newSel1_fu_671_p3.read());
}

void scheduler::thread_queue_3_state_4_fu_686_p3() {
    queue_3_state_4_fu_686_p3 = (!sel_tmp4_fu_534_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_fu_534_p2.read()[0].to_bool())? new_context_state_reg_1148.read(): queue_3_state_3_fu_130.read());
}

void scheduler::thread_queue_3_state_5_fu_693_p3() {
    queue_3_state_5_fu_693_p3 = (!sel_tmp5_fu_540_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_fu_540_p2.read()[0].to_bool())? queue_3_state_3_fu_130.read(): queue_3_state_4_fu_686_p3.read());
}

void scheduler::thread_queue_3_state_7_fu_701_p3() {
    queue_3_state_7_fu_701_p3 = (!sel_tmp5_fu_540_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_fu_540_p2.read()[0].to_bool())? new_context_state_reg_1148.read(): queue_3_state_2_fu_126.read());
}

void scheduler::thread_queue_3_state_fu_663_p3() {
    queue_3_state_fu_663_p3 = (!or_cond_fu_546_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_546_p2.read()[0].to_bool())? queue_3_state_8_fu_138.read(): newSel8_fu_656_p3.read());
}

void scheduler::thread_queue_head_ptr_1_fu_930_p2() {
    queue_head_ptr_1_fu_930_p2 = (!ap_const_lv32_FFFFFFFF.is_01() || !queue_head_ptr_2_fu_154.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFFF) + sc_biguint<32>(queue_head_ptr_2_fu_154.read()));
}

void scheduler::thread_queue_head_ptr_1_t_fu_936_p2() {
    queue_head_ptr_1_t_fu_936_p2 = (!ap_const_lv2_3.is_01() || !tmp_12_fu_926_p1.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_3) + sc_biguint<2>(tmp_12_fu_926_p1.read()));
}

void scheduler::thread_queue_head_ptr_3_fu_715_p2() {
    queue_head_ptr_3_fu_715_p2 = (!ap_const_lv32_1.is_01() || !queue_head_ptr_load_reg_1074.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(queue_head_ptr_load_reg_1074.read()));
}

void scheduler::thread_rev_fu_811_p2() {
    rev_fu_811_p2 = (ult_reg_1166.read() ^ ap_const_lv1_1);
}

void scheduler::thread_sched_interfaces_ack_V_address0() {
    sched_interfaces_ack_V_address0 =  (sc_lv<1>) (tmp_reg_1089.read());
}

void scheduler::thread_sched_interfaces_ack_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sched_interfaces_ack_V_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_ack_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_ack_V_d0() {
    sched_interfaces_ack_V_d0 = ap_const_lv1_0;
}

void scheduler::thread_sched_interfaces_ack_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sched_interfaces_ack_V_we0 = ap_const_logic_1;
    } else {
        sched_interfaces_ack_V_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_current_node_address0() {
    sched_interfaces_context_current_node_address0 =  (sc_lv<1>) (tmp_reg_1089.read());
}

void scheduler::thread_sched_interfaces_context_current_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_current_node_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_next_node_address0() {
    sched_interfaces_context_next_node_address0 =  (sc_lv<1>) (tmp_reg_1089.read());
}

void scheduler::thread_sched_interfaces_context_next_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_next_node_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_state_address0() {
    sched_interfaces_context_state_address0 =  (sc_lv<1>) (tmp_reg_1089.read());
}

void scheduler::thread_sched_interfaces_context_state_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_state_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_schedule_V_address0() {
    sched_interfaces_schedule_V_address0 =  (sc_lv<1>) (tmp_fu_465_p1.read());
}

void scheduler::thread_sched_interfaces_schedule_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sched_interfaces_schedule_V_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_schedule_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sel_tmp19_demorgan_fu_863_p2() {
    sel_tmp19_demorgan_fu_863_p2 = (brmerge_fu_816_p2.read() | tmp_s_reg_1186.read());
}

void scheduler::thread_sel_tmp1_fu_849_p2() {
    sel_tmp1_fu_849_p2 = (tmp2_fu_845_p2.read() & tmp1_fu_840_p2.read());
}

void scheduler::thread_sel_tmp2_fu_855_p3() {
    sel_tmp2_fu_855_p3 = (!brmerge_fu_816_p2.read()[0].is_01())? sc_lv<1>(): ((brmerge_fu_816_p2.read()[0].to_bool())? match_found_0_mux_fu_828_p2.read(): sel_tmp1_fu_849_p2.read());
}

void scheduler::thread_sel_tmp3_fu_528_p2() {
    sel_tmp3_fu_528_p2 = (!tmp_14_fu_525_p1.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(tmp_14_fu_525_p1.read() == ap_const_lv2_2);
}

void scheduler::thread_sel_tmp4_fu_534_p2() {
    sel_tmp4_fu_534_p2 = (!tmp_14_fu_525_p1.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_14_fu_525_p1.read() == ap_const_lv2_1);
}

void scheduler::thread_sel_tmp5_fu_540_p2() {
    sel_tmp5_fu_540_p2 = (!tmp_14_fu_525_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_14_fu_525_p1.read() == ap_const_lv2_0);
}

void scheduler::thread_sel_tmp_fu_834_p2() {
    sel_tmp_fu_834_p2 = (brmerge_fu_816_p2.read() ^ ap_const_lv1_1);
}

void scheduler::thread_setup_interfaces_context_current_node_address0() {
    setup_interfaces_context_current_node_address0 =  (sc_lv<1>) (tmp_5_reg_1215.read());
}

void scheduler::thread_setup_interfaces_context_current_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        setup_interfaces_context_current_node_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_current_node_d0() {
    setup_interfaces_context_current_node_d0 = new_context_current_1_reg_1242.read();
}

void scheduler::thread_setup_interfaces_context_current_node_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        setup_interfaces_context_current_node_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_current_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_next_node_address0() {
    setup_interfaces_context_next_node_address0 =  (sc_lv<1>) (tmp_5_reg_1215.read());
}

void scheduler::thread_setup_interfaces_context_next_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        setup_interfaces_context_next_node_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_next_node_d0() {
    setup_interfaces_context_next_node_d0 = new_context_next_nod_1_reg_1247.read();
}

void scheduler::thread_setup_interfaces_context_next_node_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        setup_interfaces_context_next_node_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_next_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_state_address0() {
    setup_interfaces_context_state_address0 =  (sc_lv<1>) (tmp_5_reg_1215.read());
}

void scheduler::thread_setup_interfaces_context_state_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        setup_interfaces_context_state_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_state_d0() {
    setup_interfaces_context_state_d0 = new_context_state_1_reg_1252.read();
}

void scheduler::thread_setup_interfaces_context_state_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        setup_interfaces_context_state_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_state_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_core_halted_V_address0() {
    setup_interfaces_core_halted_V_address0 =  (sc_lv<1>) (tmp_5_fu_886_p1.read());
}

void scheduler::thread_setup_interfaces_core_halted_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_core_halted_V_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_core_halted_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_restart_V_address0() {
    setup_interfaces_restart_V_address0 =  (sc_lv<1>) (tmp_5_reg_1215.read());
}

void scheduler::thread_setup_interfaces_restart_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        setup_interfaces_restart_V_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_restart_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_restart_V_d0() {
    setup_interfaces_restart_V_d0 = ap_const_lv1_0;
}

void scheduler::thread_setup_interfaces_restart_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        setup_interfaces_restart_V_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_restart_V_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_tmp1_fu_840_p2() {
    tmp1_fu_840_p2 = (tmp_s_reg_1186.read() & sel_tmp_fu_834_p2.read());
}

void scheduler::thread_tmp2_fu_845_p2() {
    tmp2_fu_845_p2 = (tmp_10_reg_1192.read() & tmp_11_reg_1197.read());
}

void scheduler::thread_tmp_10_fu_801_p2() {
    tmp_10_fu_801_p2 = (!history_next_node_q0.read().is_01() || !new_context_next_nod_reg_1138.read().is_01())? sc_lv<1>(): sc_lv<1>(history_next_node_q0.read() == new_context_next_nod_reg_1138.read());
}

void scheduler::thread_tmp_11_fu_806_p2() {
    tmp_11_fu_806_p2 = (!history_state_q0.read().is_01() || !new_context_state_reg_1148.read().is_01())? sc_lv<1>(): sc_lv<1>(history_state_q0.read() == new_context_state_reg_1148.read());
}

void scheduler::thread_tmp_12_fu_926_p1() {
    tmp_12_fu_926_p1 = queue_head_ptr_2_fu_154.read().range(2-1, 0);
}

void scheduler::thread_tmp_14_fu_525_p1() {
    tmp_14_fu_525_p1 = queue_head_ptr_load_reg_1074.read().range(2-1, 0);
}

void scheduler::thread_tmp_1_fu_475_p4() {
    tmp_1_fu_475_p4 = queue_head_ptr_load_reg_1074.read().range(31, 2);
}

void scheduler::thread_tmp_2_fu_891_p2() {
    tmp_2_fu_891_p2 = (!queue_head_ptr_2_fu_154.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(queue_head_ptr_2_fu_154.read() == ap_const_lv32_0);
}

void scheduler::thread_tmp_3_fu_897_p2() {
    tmp_3_fu_897_p2 = (halted_flag_reg_375.read() & tmp_2_fu_891_p2.read());
}

void scheduler::thread_tmp_5_fu_886_p1() {
    tmp_5_fu_886_p1 = esl_zext<64,2>(i1_reg_387.read());
}

void scheduler::thread_tmp_6_fu_708_p1() {
    tmp_6_fu_708_p1 = esl_zext<64,32>(history_head_ptr_fu_90.read());
}

void scheduler::thread_tmp_7_fu_914_p2() {
    tmp_7_fu_914_p2 = (!queue_head_ptr_2_fu_154.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(queue_head_ptr_2_fu_154.read() != ap_const_lv32_0);
}

void scheduler::thread_tmp_8_fu_518_p1() {
    tmp_8_fu_518_p1 = esl_zext<64,11>(j_reg_364.read());
}

void scheduler::thread_tmp_fu_465_p1() {
    tmp_fu_465_p1 = esl_zext<64,2>(i_reg_341.read());
}

void scheduler::thread_tmp_s_fu_796_p2() {
    tmp_s_fu_796_p2 = (!history_current_node_q0.read().is_01() || !new_context_current_s_reg_1128.read().is_01())? sc_lv<1>(): sc_lv<1>(history_current_node_q0.read() == new_context_current_s_reg_1128.read());
}

void scheduler::thread_ult_fu_512_p2() {
    ult_fu_512_p2 = (!j_cast_fu_496_p1.read().is_01() || !history_head_ptr_fu_90.read().is_01())? sc_lv<1>(): (sc_biguint<32>(j_cast_fu_496_p1.read()) < sc_biguint<32>(history_head_ptr_fu_90.read()));
}

void scheduler::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_453_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_5_fu_490_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && (esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_5_reg_1109.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_500_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_874_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, demorgan_fu_920_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

void scheduler::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_current_node_address0\" :  \"" << sched_interfaces_context_current_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_current_node_ce0\" :  \"" << sched_interfaces_context_current_node_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_current_node_q0\" :  \"" << sched_interfaces_context_current_node_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_next_node_address0\" :  \"" << sched_interfaces_context_next_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_next_node_ce0\" :  \"" << sched_interfaces_context_next_node_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_next_node_q0\" :  \"" << sched_interfaces_context_next_node_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_state_address0\" :  \"" << sched_interfaces_context_state_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_state_ce0\" :  \"" << sched_interfaces_context_state_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_state_q0\" :  \"" << sched_interfaces_context_state_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_schedule_V_address0\" :  \"" << sched_interfaces_schedule_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_schedule_V_ce0\" :  \"" << sched_interfaces_schedule_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_schedule_V_q0\" :  \"" << sched_interfaces_schedule_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_address0\" :  \"" << sched_interfaces_ack_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_ce0\" :  \"" << sched_interfaces_ack_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_we0\" :  \"" << sched_interfaces_ack_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_d0\" :  \"" << sched_interfaces_ack_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_address0\" :  \"" << setup_interfaces_context_current_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_ce0\" :  \"" << setup_interfaces_context_current_node_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_we0\" :  \"" << setup_interfaces_context_current_node_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_d0\" :  \"" << setup_interfaces_context_current_node_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_address0\" :  \"" << setup_interfaces_context_next_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_ce0\" :  \"" << setup_interfaces_context_next_node_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_we0\" :  \"" << setup_interfaces_context_next_node_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_d0\" :  \"" << setup_interfaces_context_next_node_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_address0\" :  \"" << setup_interfaces_context_state_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_ce0\" :  \"" << setup_interfaces_context_state_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_we0\" :  \"" << setup_interfaces_context_state_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_d0\" :  \"" << setup_interfaces_context_state_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_address0\" :  \"" << setup_interfaces_restart_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_ce0\" :  \"" << setup_interfaces_restart_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_we0\" :  \"" << setup_interfaces_restart_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_d0\" :  \"" << setup_interfaces_restart_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_core_halted_V_address0\" :  \"" << setup_interfaces_core_halted_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_core_halted_V_ce0\" :  \"" << setup_interfaces_core_halted_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"setup_interfaces_core_halted_V_q0\" :  \"" << setup_interfaces_core_halted_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finished\" :  \"" << finished.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finished_ap_vld\" :  \"" << finished_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


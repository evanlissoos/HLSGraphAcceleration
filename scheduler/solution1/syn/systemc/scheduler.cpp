// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scheduler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scheduler::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scheduler::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> scheduler::ap_ST_fsm_state1 = "1";
const sc_lv<13> scheduler::ap_ST_fsm_state2 = "10";
const sc_lv<13> scheduler::ap_ST_fsm_state3 = "100";
const sc_lv<13> scheduler::ap_ST_fsm_state4 = "1000";
const sc_lv<13> scheduler::ap_ST_fsm_state5 = "10000";
const sc_lv<13> scheduler::ap_ST_fsm_state6 = "100000";
const sc_lv<13> scheduler::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> scheduler::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> scheduler::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> scheduler::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> scheduler::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> scheduler::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> scheduler::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> scheduler::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> scheduler::ap_const_lv32_1 = "1";
const sc_lv<1> scheduler::ap_const_lv1_0 = "0";
const sc_lv<32> scheduler::ap_const_lv32_2 = "10";
const sc_lv<1> scheduler::ap_const_lv1_1 = "1";
const sc_lv<32> scheduler::ap_const_lv32_3 = "11";
const sc_lv<32> scheduler::ap_const_lv32_5 = "101";
const sc_lv<32> scheduler::ap_const_lv32_6 = "110";
const sc_lv<32> scheduler::ap_const_lv32_7 = "111";
const sc_lv<32> scheduler::ap_const_lv32_8 = "1000";
const sc_lv<32> scheduler::ap_const_lv32_9 = "1001";
const sc_lv<32> scheduler::ap_const_lv32_A = "1010";
const sc_lv<6> scheduler::ap_const_lv6_0 = "000000";
const sc_lv<32> scheduler::ap_const_lv32_4 = "100";
const sc_lv<13> scheduler::ap_const_lv13_0 = "0000000000000";
const sc_lv<32> scheduler::ap_const_lv32_C = "1100";
const sc_lv<32> scheduler::ap_const_lv32_B = "1011";
const sc_lv<6> scheduler::ap_const_lv6_20 = "100000";
const sc_lv<6> scheduler::ap_const_lv6_1 = "1";
const sc_lv<32> scheduler::ap_const_lv32_140 = "101000000";
const sc_lv<13> scheduler::ap_const_lv13_1000 = "1000000000000";
const sc_lv<13> scheduler::ap_const_lv13_1 = "1";
const sc_lv<32> scheduler::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const bool scheduler::ap_const_boolean_1 = true;

scheduler::scheduler(sc_module_name name) : sc_module(name), mVcdFile(0) {
    history_current_node_U = new scheduler_historybkb("history_current_node_U");
    history_current_node_U->clk(ap_clk);
    history_current_node_U->reset(ap_rst);
    history_current_node_U->address0(history_current_node_address0);
    history_current_node_U->ce0(history_current_node_ce0);
    history_current_node_U->we0(history_current_node_we0);
    history_current_node_U->d0(new_context_current_s_reg_736);
    history_current_node_U->q0(history_current_node_q0);
    history_next_node_U = new scheduler_historybkb("history_next_node_U");
    history_next_node_U->clk(ap_clk);
    history_next_node_U->reset(ap_rst);
    history_next_node_U->address0(history_next_node_address0);
    history_next_node_U->ce0(history_next_node_ce0);
    history_next_node_U->we0(history_next_node_we0);
    history_next_node_U->d0(new_context_next_nod_reg_743);
    history_next_node_U->q0(history_next_node_q0);
    history_state_U = new scheduler_historybkb("history_state_U");
    history_state_U->clk(ap_clk);
    history_state_U->reset(ap_rst);
    history_state_U->address0(history_state_address0);
    history_state_U->ce0(history_state_ce0);
    history_state_U->we0(history_state_we0);
    history_state_U->d0(new_context_state_reg_750);
    history_state_U->q0(history_state_q0);
    queue_current_node_U = new scheduler_queue_ceOg("queue_current_node_U");
    queue_current_node_U->clk(ap_clk);
    queue_current_node_U->reset(ap_rst);
    queue_current_node_U->address0(queue_current_node_address0);
    queue_current_node_U->ce0(queue_current_node_ce0);
    queue_current_node_U->we0(queue_current_node_we0);
    queue_current_node_U->d0(new_context_current_s_reg_736);
    queue_current_node_U->q0(queue_current_node_q0);
    queue_next_node_U = new scheduler_queue_ceOg("queue_next_node_U");
    queue_next_node_U->clk(ap_clk);
    queue_next_node_U->reset(ap_rst);
    queue_next_node_U->address0(queue_next_node_address0);
    queue_next_node_U->ce0(queue_next_node_ce0);
    queue_next_node_U->we0(queue_next_node_we0);
    queue_next_node_U->d0(new_context_next_nod_reg_743);
    queue_next_node_U->q0(queue_next_node_q0);
    queue_state_U = new scheduler_queue_ceOg("queue_state_U");
    queue_state_U->clk(ap_clk);
    queue_state_U->reset(ap_rst);
    queue_state_U->address0(queue_state_address0);
    queue_state_U->ce0(queue_state_ce0);
    queue_state_U->we0(queue_state_we0);
    queue_state_U->d0(new_context_state_reg_750);
    queue_state_U->q0(queue_state_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_599_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_599_p2 );

    SC_METHOD(thread_brmerge_fu_541_p2);
    sensitive << ( match_found_reg_360 );
    sensitive << ( rev4_fu_536_p2 );

    SC_METHOD(thread_demorgan_fu_645_p2);
    sensitive << ( setup_interfaces_core_halted_V_q0 );
    sensitive << ( tmp_7_fu_639_p2 );

    SC_METHOD(thread_exitcond1_fu_425_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_349 );

    SC_METHOD(thread_exitcond2_fu_462_p2);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j_reg_372 );

    SC_METHOD(thread_exitcond_fu_599_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( i1_reg_395 );

    SC_METHOD(thread_finished);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_599_p2 );
    sensitive << ( tmp_3_fu_622_p2 );

    SC_METHOD(thread_finished_ap_vld);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_599_p2 );

    SC_METHOD(thread_halted_flag_1_fu_633_p2);
    sensitive << ( setup_interfaces_core_halted_V_q0 );
    sensitive << ( halted_flag_reg_383 );

    SC_METHOD(thread_history_current_node_address0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );
    sensitive << ( tmp_8_fu_480_p1 );
    sensitive << ( tmp_6_fu_493_p1 );

    SC_METHOD(thread_history_current_node_ce0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_history_current_node_we0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_history_head_ptr_1_fu_505_p2);
    sensitive << ( history_head_ptr_fu_80 );

    SC_METHOD(thread_history_next_node_address0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );
    sensitive << ( tmp_8_fu_480_p1 );
    sensitive << ( tmp_6_fu_493_p1 );

    SC_METHOD(thread_history_next_node_ce0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_history_next_node_we0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_history_state_address0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );
    sensitive << ( tmp_8_fu_480_p1 );
    sensitive << ( tmp_6_fu_493_p1 );

    SC_METHOD(thread_history_state_ce0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_history_state_we0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_i_1_fu_605_p2);
    sensitive << ( i1_reg_395 );

    SC_METHOD(thread_i_2_fu_431_p2);
    sensitive << ( i_reg_349 );

    SC_METHOD(thread_j_1_fu_468_p2);
    sensitive << ( j_reg_372 );

    SC_METHOD(thread_j_cast_fu_458_p1);
    sensitive << ( j_reg_372 );

    SC_METHOD(thread_match_found_0_mux_fu_553_p2);
    sensitive << ( match_found_reg_360 );
    sensitive << ( not_not_fu_547_p2 );

    SC_METHOD(thread_match_found_1_fu_593_p2);
    sensitive << ( sel_tmp4_fu_580_p3 );
    sensitive << ( sel_tmp7_demorgan_fu_588_p2 );

    SC_METHOD(thread_match_found_phi_fu_364_p4);
    sensitive << ( match_found_reg_360 );

    SC_METHOD(thread_not_not_fu_547_p2);
    sensitive << ( rev4_fu_536_p2 );

    SC_METHOD(thread_or_cond_fu_452_p2);
    sensitive << ( sched_interfaces_schedule_V_q0 );
    sensitive << ( tmp_1_fu_447_p2 );

    SC_METHOD(thread_queue_current_node_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_s_fu_487_p1 );
    sensitive << ( tmp_9_fu_657_p1 );

    SC_METHOD(thread_queue_current_node_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_queue_current_node_we0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_queue_head_ptr_1_fu_651_p2);
    sensitive << ( queue_head_ptr_2_fu_108 );

    SC_METHOD(thread_queue_head_ptr_3_fu_500_p2);
    sensitive << ( queue_head_ptr_load_reg_682 );

    SC_METHOD(thread_queue_next_node_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_s_fu_487_p1 );
    sensitive << ( tmp_9_fu_657_p1 );

    SC_METHOD(thread_queue_next_node_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_queue_next_node_we0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_queue_state_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_s_fu_487_p1 );
    sensitive << ( tmp_9_fu_657_p1 );

    SC_METHOD(thread_queue_state_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_queue_state_we0);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( match_found_phi_fu_364_p4 );

    SC_METHOD(thread_rev4_fu_536_p2);
    sensitive << ( ult_reg_765 );

    SC_METHOD(thread_sched_interfaces_ack_V_address0);
    sensitive << ( tmp_reg_697 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_d0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_context_current_node_address0);
    sensitive << ( tmp_reg_697 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_current_node_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_next_node_address0);
    sensitive << ( tmp_reg_697 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_next_node_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_state_address0);
    sensitive << ( tmp_reg_697 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_state_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_schedule_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_437_p1 );

    SC_METHOD(thread_sched_interfaces_schedule_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sel_tmp3_fu_574_p2);
    sensitive << ( tmp1_fu_570_p2 );
    sensitive << ( tmp9_fu_565_p2 );

    SC_METHOD(thread_sel_tmp4_fu_580_p3);
    sensitive << ( brmerge_fu_541_p2 );
    sensitive << ( match_found_0_mux_fu_553_p2 );
    sensitive << ( sel_tmp3_fu_574_p2 );

    SC_METHOD(thread_sel_tmp7_demorgan_fu_588_p2);
    sensitive << ( tmp_10_reg_785 );
    sensitive << ( brmerge_fu_541_p2 );

    SC_METHOD(thread_sel_tmp_fu_559_p2);
    sensitive << ( brmerge_fu_541_p2 );

    SC_METHOD(thread_setup_interfaces_context_current_node_address0);
    sensitive << ( tmp_5_reg_814 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_current_node_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_current_node_d0);
    sensitive << ( new_context_current_1_reg_856 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_current_node_we0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_next_node_address0);
    sensitive << ( tmp_5_reg_814 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_next_node_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_next_node_d0);
    sensitive << ( new_context_next_nod_1_reg_861 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_next_node_we0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_state_address0);
    sensitive << ( tmp_5_reg_814 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_state_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_state_d0);
    sensitive << ( new_context_state_1_reg_866 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_context_state_we0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_core_halted_V_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_5_fu_611_p1 );

    SC_METHOD(thread_setup_interfaces_core_halted_V_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_restart_V_address0);
    sensitive << ( tmp_5_reg_814 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_restart_V_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_restart_V_d0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_setup_interfaces_restart_V_we0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_tmp1_fu_570_p2);
    sensitive << ( tmp_11_reg_791 );
    sensitive << ( tmp_12_reg_796 );

    SC_METHOD(thread_tmp9_fu_565_p2);
    sensitive << ( tmp_10_reg_785 );
    sensitive << ( sel_tmp_fu_559_p2 );

    SC_METHOD(thread_tmp_10_fu_521_p2);
    sensitive << ( new_context_current_s_reg_736 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( history_current_node_q0 );

    SC_METHOD(thread_tmp_11_fu_526_p2);
    sensitive << ( new_context_next_nod_reg_743 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( history_next_node_q0 );

    SC_METHOD(thread_tmp_12_fu_531_p2);
    sensitive << ( new_context_state_reg_750 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( history_state_q0 );

    SC_METHOD(thread_tmp_1_fu_447_p2);
    sensitive << ( queue_head_ptr_load_reg_682 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_2_fu_616_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_599_p2 );
    sensitive << ( queue_head_ptr_2_fu_108 );

    SC_METHOD(thread_tmp_3_fu_622_p2);
    sensitive << ( halted_flag_reg_383 );
    sensitive << ( tmp_2_fu_616_p2 );

    SC_METHOD(thread_tmp_5_fu_611_p1);
    sensitive << ( i1_reg_395 );

    SC_METHOD(thread_tmp_6_fu_493_p1);
    sensitive << ( history_head_ptr_fu_80 );

    SC_METHOD(thread_tmp_7_fu_639_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( queue_head_ptr_2_fu_108 );

    SC_METHOD(thread_tmp_8_fu_480_p1);
    sensitive << ( j_reg_372 );

    SC_METHOD(thread_tmp_9_fu_657_p1);
    sensitive << ( queue_head_ptr_1_fu_651_p2 );

    SC_METHOD(thread_tmp_fu_437_p1);
    sensitive << ( i_reg_349 );

    SC_METHOD(thread_tmp_s_fu_487_p1);
    sensitive << ( queue_head_ptr_load_reg_682 );

    SC_METHOD(thread_ult_fu_474_p2);
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( history_head_ptr_fu_80 );
    sensitive << ( j_cast_fu_458_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_425_p2 );
    sensitive << ( or_cond_fu_452_p2 );
    sensitive << ( or_cond_reg_717 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond2_fu_462_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond_fu_599_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( demorgan_fu_645_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scheduler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_address0, "(port)sched_interfaces_context_current_node_address0");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_ce0, "(port)sched_interfaces_context_current_node_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_q0, "(port)sched_interfaces_context_current_node_q0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_address0, "(port)sched_interfaces_context_next_node_address0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_ce0, "(port)sched_interfaces_context_next_node_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_q0, "(port)sched_interfaces_context_next_node_q0");
    sc_trace(mVcdFile, sched_interfaces_context_state_address0, "(port)sched_interfaces_context_state_address0");
    sc_trace(mVcdFile, sched_interfaces_context_state_ce0, "(port)sched_interfaces_context_state_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_state_q0, "(port)sched_interfaces_context_state_q0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_address0, "(port)sched_interfaces_schedule_V_address0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_ce0, "(port)sched_interfaces_schedule_V_ce0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_q0, "(port)sched_interfaces_schedule_V_q0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_address0, "(port)sched_interfaces_ack_V_address0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_ce0, "(port)sched_interfaces_ack_V_ce0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_we0, "(port)sched_interfaces_ack_V_we0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_d0, "(port)sched_interfaces_ack_V_d0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_address0, "(port)setup_interfaces_context_current_node_address0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_ce0, "(port)setup_interfaces_context_current_node_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_we0, "(port)setup_interfaces_context_current_node_we0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_d0, "(port)setup_interfaces_context_current_node_d0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_address0, "(port)setup_interfaces_context_next_node_address0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_ce0, "(port)setup_interfaces_context_next_node_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_we0, "(port)setup_interfaces_context_next_node_we0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_d0, "(port)setup_interfaces_context_next_node_d0");
    sc_trace(mVcdFile, setup_interfaces_context_state_address0, "(port)setup_interfaces_context_state_address0");
    sc_trace(mVcdFile, setup_interfaces_context_state_ce0, "(port)setup_interfaces_context_state_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_state_we0, "(port)setup_interfaces_context_state_we0");
    sc_trace(mVcdFile, setup_interfaces_context_state_d0, "(port)setup_interfaces_context_state_d0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_address0, "(port)setup_interfaces_restart_V_address0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_ce0, "(port)setup_interfaces_restart_V_ce0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_we0, "(port)setup_interfaces_restart_V_we0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_d0, "(port)setup_interfaces_restart_V_d0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_address0, "(port)setup_interfaces_core_halted_V_address0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_ce0, "(port)setup_interfaces_core_halted_V_ce0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_q0, "(port)setup_interfaces_core_halted_V_q0");
    sc_trace(mVcdFile, finished, "(port)finished");
    sc_trace(mVcdFile, finished_ap_vld, "(port)finished_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, queue_head_ptr_load_reg_682, "queue_head_ptr_load_reg_682");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_2_fu_431_p2, "i_2_fu_431_p2");
    sc_trace(mVcdFile, i_2_reg_692, "i_2_reg_692");
    sc_trace(mVcdFile, tmp_fu_437_p1, "tmp_fu_437_p1");
    sc_trace(mVcdFile, tmp_reg_697, "tmp_reg_697");
    sc_trace(mVcdFile, exitcond1_fu_425_p2, "exitcond1_fu_425_p2");
    sc_trace(mVcdFile, or_cond_fu_452_p2, "or_cond_fu_452_p2");
    sc_trace(mVcdFile, or_cond_reg_717, "or_cond_reg_717");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, new_context_current_s_reg_736, "new_context_current_s_reg_736");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, new_context_next_nod_reg_743, "new_context_next_nod_reg_743");
    sc_trace(mVcdFile, new_context_state_reg_750, "new_context_state_reg_750");
    sc_trace(mVcdFile, j_1_fu_468_p2, "j_1_fu_468_p2");
    sc_trace(mVcdFile, j_1_reg_760, "j_1_reg_760");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ult_fu_474_p2, "ult_fu_474_p2");
    sc_trace(mVcdFile, ult_reg_765, "ult_reg_765");
    sc_trace(mVcdFile, exitcond2_fu_462_p2, "exitcond2_fu_462_p2");
    sc_trace(mVcdFile, tmp_10_fu_521_p2, "tmp_10_fu_521_p2");
    sc_trace(mVcdFile, tmp_10_reg_785, "tmp_10_reg_785");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_11_fu_526_p2, "tmp_11_fu_526_p2");
    sc_trace(mVcdFile, tmp_11_reg_791, "tmp_11_reg_791");
    sc_trace(mVcdFile, tmp_12_fu_531_p2, "tmp_12_fu_531_p2");
    sc_trace(mVcdFile, tmp_12_reg_796, "tmp_12_reg_796");
    sc_trace(mVcdFile, match_found_1_fu_593_p2, "match_found_1_fu_593_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_1_fu_605_p2, "i_1_fu_605_p2");
    sc_trace(mVcdFile, i_1_reg_809, "i_1_reg_809");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_5_fu_611_p1, "tmp_5_fu_611_p1");
    sc_trace(mVcdFile, tmp_5_reg_814, "tmp_5_reg_814");
    sc_trace(mVcdFile, exitcond_fu_599_p2, "exitcond_fu_599_p2");
    sc_trace(mVcdFile, halted_flag_1_fu_633_p2, "halted_flag_1_fu_633_p2");
    sc_trace(mVcdFile, halted_flag_1_reg_827, "halted_flag_1_reg_827");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, demorgan_fu_645_p2, "demorgan_fu_645_p2");
    sc_trace(mVcdFile, demorgan_reg_832, "demorgan_reg_832");
    sc_trace(mVcdFile, queue_head_ptr_1_fu_651_p2, "queue_head_ptr_1_fu_651_p2");
    sc_trace(mVcdFile, queue_head_ptr_1_reg_836, "queue_head_ptr_1_reg_836");
    sc_trace(mVcdFile, queue_current_node_q0, "queue_current_node_q0");
    sc_trace(mVcdFile, new_context_current_1_reg_856, "new_context_current_1_reg_856");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, queue_next_node_q0, "queue_next_node_q0");
    sc_trace(mVcdFile, new_context_next_nod_1_reg_861, "new_context_next_nod_1_reg_861");
    sc_trace(mVcdFile, queue_state_q0, "queue_state_q0");
    sc_trace(mVcdFile, new_context_state_1_reg_866, "new_context_state_1_reg_866");
    sc_trace(mVcdFile, history_current_node_address0, "history_current_node_address0");
    sc_trace(mVcdFile, history_current_node_ce0, "history_current_node_ce0");
    sc_trace(mVcdFile, history_current_node_we0, "history_current_node_we0");
    sc_trace(mVcdFile, history_current_node_q0, "history_current_node_q0");
    sc_trace(mVcdFile, history_next_node_address0, "history_next_node_address0");
    sc_trace(mVcdFile, history_next_node_ce0, "history_next_node_ce0");
    sc_trace(mVcdFile, history_next_node_we0, "history_next_node_we0");
    sc_trace(mVcdFile, history_next_node_q0, "history_next_node_q0");
    sc_trace(mVcdFile, history_state_address0, "history_state_address0");
    sc_trace(mVcdFile, history_state_ce0, "history_state_ce0");
    sc_trace(mVcdFile, history_state_we0, "history_state_we0");
    sc_trace(mVcdFile, history_state_q0, "history_state_q0");
    sc_trace(mVcdFile, queue_current_node_address0, "queue_current_node_address0");
    sc_trace(mVcdFile, queue_current_node_ce0, "queue_current_node_ce0");
    sc_trace(mVcdFile, queue_current_node_we0, "queue_current_node_we0");
    sc_trace(mVcdFile, queue_next_node_address0, "queue_next_node_address0");
    sc_trace(mVcdFile, queue_next_node_ce0, "queue_next_node_ce0");
    sc_trace(mVcdFile, queue_next_node_we0, "queue_next_node_we0");
    sc_trace(mVcdFile, queue_state_address0, "queue_state_address0");
    sc_trace(mVcdFile, queue_state_ce0, "queue_state_ce0");
    sc_trace(mVcdFile, queue_state_we0, "queue_state_we0");
    sc_trace(mVcdFile, i_reg_349, "i_reg_349");
    sc_trace(mVcdFile, match_found_phi_fu_364_p4, "match_found_phi_fu_364_p4");
    sc_trace(mVcdFile, match_found_reg_360, "match_found_reg_360");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, j_reg_372, "j_reg_372");
    sc_trace(mVcdFile, halted_flag_reg_383, "halted_flag_reg_383");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, i1_reg_395, "i1_reg_395");
    sc_trace(mVcdFile, tmp_8_fu_480_p1, "tmp_8_fu_480_p1");
    sc_trace(mVcdFile, tmp_s_fu_487_p1, "tmp_s_fu_487_p1");
    sc_trace(mVcdFile, tmp_6_fu_493_p1, "tmp_6_fu_493_p1");
    sc_trace(mVcdFile, tmp_9_fu_657_p1, "tmp_9_fu_657_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, queue_head_ptr_fu_76, "queue_head_ptr_fu_76");
    sc_trace(mVcdFile, queue_head_ptr_3_fu_500_p2, "queue_head_ptr_3_fu_500_p2");
    sc_trace(mVcdFile, history_head_ptr_fu_80, "history_head_ptr_fu_80");
    sc_trace(mVcdFile, history_head_ptr_1_fu_505_p2, "history_head_ptr_1_fu_505_p2");
    sc_trace(mVcdFile, queue_head_ptr_2_fu_108, "queue_head_ptr_2_fu_108");
    sc_trace(mVcdFile, tmp_1_fu_447_p2, "tmp_1_fu_447_p2");
    sc_trace(mVcdFile, j_cast_fu_458_p1, "j_cast_fu_458_p1");
    sc_trace(mVcdFile, rev4_fu_536_p2, "rev4_fu_536_p2");
    sc_trace(mVcdFile, not_not_fu_547_p2, "not_not_fu_547_p2");
    sc_trace(mVcdFile, brmerge_fu_541_p2, "brmerge_fu_541_p2");
    sc_trace(mVcdFile, sel_tmp_fu_559_p2, "sel_tmp_fu_559_p2");
    sc_trace(mVcdFile, tmp1_fu_570_p2, "tmp1_fu_570_p2");
    sc_trace(mVcdFile, tmp9_fu_565_p2, "tmp9_fu_565_p2");
    sc_trace(mVcdFile, match_found_0_mux_fu_553_p2, "match_found_0_mux_fu_553_p2");
    sc_trace(mVcdFile, sel_tmp3_fu_574_p2, "sel_tmp3_fu_574_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_580_p3, "sel_tmp4_fu_580_p3");
    sc_trace(mVcdFile, sel_tmp7_demorgan_fu_588_p2, "sel_tmp7_demorgan_fu_588_p2");
    sc_trace(mVcdFile, tmp_2_fu_616_p2, "tmp_2_fu_616_p2");
    sc_trace(mVcdFile, tmp_3_fu_622_p2, "tmp_3_fu_622_p2");
    sc_trace(mVcdFile, tmp_7_fu_639_p2, "tmp_7_fu_639_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("scheduler.hdltvin.dat");
    mHdltvoutHandle.open("scheduler.hdltvout.dat");
}

scheduler::~scheduler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete history_current_node_U;
    delete history_next_node_U;
    delete history_state_U;
    delete queue_current_node_U;
    delete queue_next_node_U;
    delete queue_state_U;
}

void scheduler::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        halted_flag_reg_383 = halted_flag_1_reg_827.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_425_p2.read(), ap_const_lv1_1))) {
        halted_flag_reg_383 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
        history_head_ptr_fu_80 = history_head_ptr_1_fu_505_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        history_head_ptr_fu_80 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i1_reg_395 = i_1_reg_809.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_425_p2.read(), ap_const_lv1_1))) {
        i1_reg_395 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_717.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read())))) {
        i_reg_349 = i_2_reg_692.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_349 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j_reg_372 = j_1_reg_760.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_reg_372 = ap_const_lv13_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        match_found_reg_360 = match_found_1_fu_593_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        match_found_reg_360 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, demorgan_reg_832.read()))) {
        queue_head_ptr_2_fu_108 = queue_head_ptr_1_reg_836.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_425_p2.read(), ap_const_lv1_1))) {
        queue_head_ptr_2_fu_108 = queue_head_ptr_fu_76.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
        queue_head_ptr_fu_76 = queue_head_ptr_3_fu_500_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        queue_head_ptr_fu_76 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        demorgan_reg_832 = demorgan_fu_645_p2.read();
        halted_flag_1_reg_827 = halted_flag_1_fu_633_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_1_reg_809 = i_1_fu_605_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_2_reg_692 = i_2_fu_431_p2.read();
        queue_head_ptr_load_reg_682 = queue_head_ptr_fu_76.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1))) {
        j_1_reg_760 = j_1_fu_468_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        new_context_current_1_reg_856 = queue_current_node_q0.read();
        new_context_next_nod_1_reg_861 = queue_next_node_q0.read();
        new_context_state_1_reg_866 = queue_state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        new_context_current_s_reg_736 = sched_interfaces_context_current_node_q0.read();
        new_context_next_nod_reg_743 = sched_interfaces_context_next_node_q0.read();
        new_context_state_reg_750 = sched_interfaces_context_state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        or_cond_reg_717 = or_cond_fu_452_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, demorgan_fu_645_p2.read()))) {
        queue_head_ptr_1_reg_836 = queue_head_ptr_1_fu_651_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_10_reg_785 = tmp_10_fu_521_p2.read();
        tmp_11_reg_791 = tmp_11_fu_526_p2.read();
        tmp_12_reg_796 = tmp_12_fu_531_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_599_p2.read()))) {
        tmp_5_reg_814 = tmp_5_fu_611_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_425_p2.read(), ap_const_lv1_0))) {
        tmp_reg_697 = tmp_fu_437_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_462_p2.read()))) {
        ult_reg_765 = ult_fu_474_p2.read();
    }
}

void scheduler::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void scheduler::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void scheduler::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void scheduler::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void scheduler::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void scheduler::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void scheduler::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void scheduler::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void scheduler::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void scheduler::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void scheduler::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void scheduler::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void scheduler::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void scheduler::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_599_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void scheduler::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scheduler::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_599_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void scheduler::thread_brmerge_fu_541_p2() {
    brmerge_fu_541_p2 = (rev4_fu_536_p2.read() | match_found_reg_360.read());
}

void scheduler::thread_demorgan_fu_645_p2() {
    demorgan_fu_645_p2 = (setup_interfaces_core_halted_V_q0.read() & tmp_7_fu_639_p2.read());
}

void scheduler::thread_exitcond1_fu_425_p2() {
    exitcond1_fu_425_p2 = (!i_reg_349.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_349.read() == ap_const_lv6_20);
}

void scheduler::thread_exitcond2_fu_462_p2() {
    exitcond2_fu_462_p2 = (!j_reg_372.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_372.read() == ap_const_lv13_1000);
}

void scheduler::thread_exitcond_fu_599_p2() {
    exitcond_fu_599_p2 = (!i1_reg_395.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_395.read() == ap_const_lv6_20);
}

void scheduler::thread_finished() {
    finished = esl_zext<32,1>(tmp_3_fu_622_p2.read());
}

void scheduler::thread_finished_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_599_p2.read()))) {
        finished_ap_vld = ap_const_logic_1;
    } else {
        finished_ap_vld = ap_const_logic_0;
    }
}

void scheduler::thread_halted_flag_1_fu_633_p2() {
    halted_flag_1_fu_633_p2 = (setup_interfaces_core_halted_V_q0.read() & halted_flag_reg_383.read());
}

void scheduler::thread_history_current_node_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1))) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
            history_current_node_address0 =  (sc_lv<12>) (tmp_6_fu_493_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_462_p2.read())) {
            history_current_node_address0 =  (sc_lv<12>) (tmp_8_fu_480_p1.read());
        } else {
            history_current_node_address0 = "XXXXXXXXXXXX";
        }
    } else {
        history_current_node_address0 = "XXXXXXXXXXXX";
    }
}

void scheduler::thread_history_current_node_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_462_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read())))) {
        history_current_node_ce0 = ap_const_logic_1;
    } else {
        history_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_current_node_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
        history_current_node_we0 = ap_const_logic_1;
    } else {
        history_current_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_head_ptr_1_fu_505_p2() {
    history_head_ptr_1_fu_505_p2 = (!history_head_ptr_fu_80.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(history_head_ptr_fu_80.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void scheduler::thread_history_next_node_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1))) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
            history_next_node_address0 =  (sc_lv<12>) (tmp_6_fu_493_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_462_p2.read())) {
            history_next_node_address0 =  (sc_lv<12>) (tmp_8_fu_480_p1.read());
        } else {
            history_next_node_address0 = "XXXXXXXXXXXX";
        }
    } else {
        history_next_node_address0 = "XXXXXXXXXXXX";
    }
}

void scheduler::thread_history_next_node_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_462_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read())))) {
        history_next_node_ce0 = ap_const_logic_1;
    } else {
        history_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_next_node_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
        history_next_node_we0 = ap_const_logic_1;
    } else {
        history_next_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_state_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1))) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
            history_state_address0 =  (sc_lv<12>) (tmp_6_fu_493_p1.read());
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_462_p2.read())) {
            history_state_address0 =  (sc_lv<12>) (tmp_8_fu_480_p1.read());
        } else {
            history_state_address0 = "XXXXXXXXXXXX";
        }
    } else {
        history_state_address0 = "XXXXXXXXXXXX";
    }
}

void scheduler::thread_history_state_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_462_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read())))) {
        history_state_ce0 = ap_const_logic_1;
    } else {
        history_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_history_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
        history_state_we0 = ap_const_logic_1;
    } else {
        history_state_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_i_1_fu_605_p2() {
    i_1_fu_605_p2 = (!i1_reg_395.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i1_reg_395.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void scheduler::thread_i_2_fu_431_p2() {
    i_2_fu_431_p2 = (!i_reg_349.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_349.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void scheduler::thread_j_1_fu_468_p2() {
    j_1_fu_468_p2 = (!j_reg_372.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(j_reg_372.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void scheduler::thread_j_cast_fu_458_p1() {
    j_cast_fu_458_p1 = esl_zext<32,13>(j_reg_372.read());
}

void scheduler::thread_match_found_0_mux_fu_553_p2() {
    match_found_0_mux_fu_553_p2 = (match_found_reg_360.read() | not_not_fu_547_p2.read());
}

void scheduler::thread_match_found_1_fu_593_p2() {
    match_found_1_fu_593_p2 = (sel_tmp4_fu_580_p3.read() & sel_tmp7_demorgan_fu_588_p2.read());
}

void scheduler::thread_match_found_phi_fu_364_p4() {
    match_found_phi_fu_364_p4 = match_found_reg_360.read();
}

void scheduler::thread_not_not_fu_547_p2() {
    not_not_fu_547_p2 = (rev4_fu_536_p2.read() ^ ap_const_lv1_1);
}

void scheduler::thread_or_cond_fu_452_p2() {
    or_cond_fu_452_p2 = (sched_interfaces_schedule_V_q0.read() & tmp_1_fu_447_p2.read());
}

void scheduler::thread_queue_current_node_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        queue_current_node_address0 =  (sc_lv<9>) (tmp_9_fu_657_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        queue_current_node_address0 =  (sc_lv<9>) (tmp_s_fu_487_p1.read());
    } else {
        queue_current_node_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void scheduler::thread_queue_current_node_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        queue_current_node_ce0 = ap_const_logic_1;
    } else {
        queue_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_queue_current_node_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
        queue_current_node_we0 = ap_const_logic_1;
    } else {
        queue_current_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_queue_head_ptr_1_fu_651_p2() {
    queue_head_ptr_1_fu_651_p2 = (!queue_head_ptr_2_fu_108.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(queue_head_ptr_2_fu_108.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void scheduler::thread_queue_head_ptr_3_fu_500_p2() {
    queue_head_ptr_3_fu_500_p2 = (!queue_head_ptr_load_reg_682.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(queue_head_ptr_load_reg_682.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void scheduler::thread_queue_next_node_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        queue_next_node_address0 =  (sc_lv<9>) (tmp_9_fu_657_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        queue_next_node_address0 =  (sc_lv<9>) (tmp_s_fu_487_p1.read());
    } else {
        queue_next_node_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void scheduler::thread_queue_next_node_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        queue_next_node_ce0 = ap_const_logic_1;
    } else {
        queue_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_queue_next_node_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
        queue_next_node_we0 = ap_const_logic_1;
    } else {
        queue_next_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_queue_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        queue_state_address0 =  (sc_lv<9>) (tmp_9_fu_657_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        queue_state_address0 =  (sc_lv<9>) (tmp_s_fu_487_p1.read());
    } else {
        queue_state_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void scheduler::thread_queue_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        queue_state_ce0 = ap_const_logic_1;
    } else {
        queue_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_queue_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(or_cond_reg_717.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, match_found_phi_fu_364_p4.read()))) {
        queue_state_we0 = ap_const_logic_1;
    } else {
        queue_state_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_rev4_fu_536_p2() {
    rev4_fu_536_p2 = (ult_reg_765.read() ^ ap_const_lv1_1);
}

void scheduler::thread_sched_interfaces_ack_V_address0() {
    sched_interfaces_ack_V_address0 =  (sc_lv<5>) (tmp_reg_697.read());
}

void scheduler::thread_sched_interfaces_ack_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sched_interfaces_ack_V_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_ack_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_ack_V_d0() {
    sched_interfaces_ack_V_d0 = ap_const_lv1_0;
}

void scheduler::thread_sched_interfaces_ack_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sched_interfaces_ack_V_we0 = ap_const_logic_1;
    } else {
        sched_interfaces_ack_V_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_current_node_address0() {
    sched_interfaces_context_current_node_address0 =  (sc_lv<5>) (tmp_reg_697.read());
}

void scheduler::thread_sched_interfaces_context_current_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_current_node_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_next_node_address0() {
    sched_interfaces_context_next_node_address0 =  (sc_lv<5>) (tmp_reg_697.read());
}

void scheduler::thread_sched_interfaces_context_next_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_next_node_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_state_address0() {
    sched_interfaces_context_state_address0 =  (sc_lv<5>) (tmp_reg_697.read());
}

void scheduler::thread_sched_interfaces_context_state_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_state_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_schedule_V_address0() {
    sched_interfaces_schedule_V_address0 =  (sc_lv<5>) (tmp_fu_437_p1.read());
}

void scheduler::thread_sched_interfaces_schedule_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sched_interfaces_schedule_V_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_schedule_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sel_tmp3_fu_574_p2() {
    sel_tmp3_fu_574_p2 = (tmp1_fu_570_p2.read() & tmp9_fu_565_p2.read());
}

void scheduler::thread_sel_tmp4_fu_580_p3() {
    sel_tmp4_fu_580_p3 = (!brmerge_fu_541_p2.read()[0].is_01())? sc_lv<1>(): ((brmerge_fu_541_p2.read()[0].to_bool())? match_found_0_mux_fu_553_p2.read(): sel_tmp3_fu_574_p2.read());
}

void scheduler::thread_sel_tmp7_demorgan_fu_588_p2() {
    sel_tmp7_demorgan_fu_588_p2 = (brmerge_fu_541_p2.read() | tmp_10_reg_785.read());
}

void scheduler::thread_sel_tmp_fu_559_p2() {
    sel_tmp_fu_559_p2 = (brmerge_fu_541_p2.read() ^ ap_const_lv1_1);
}

void scheduler::thread_setup_interfaces_context_current_node_address0() {
    setup_interfaces_context_current_node_address0 =  (sc_lv<5>) (tmp_5_reg_814.read());
}

void scheduler::thread_setup_interfaces_context_current_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        setup_interfaces_context_current_node_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_current_node_d0() {
    setup_interfaces_context_current_node_d0 = new_context_current_1_reg_856.read();
}

void scheduler::thread_setup_interfaces_context_current_node_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        setup_interfaces_context_current_node_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_current_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_next_node_address0() {
    setup_interfaces_context_next_node_address0 =  (sc_lv<5>) (tmp_5_reg_814.read());
}

void scheduler::thread_setup_interfaces_context_next_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        setup_interfaces_context_next_node_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_next_node_d0() {
    setup_interfaces_context_next_node_d0 = new_context_next_nod_1_reg_861.read();
}

void scheduler::thread_setup_interfaces_context_next_node_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        setup_interfaces_context_next_node_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_next_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_state_address0() {
    setup_interfaces_context_state_address0 =  (sc_lv<5>) (tmp_5_reg_814.read());
}

void scheduler::thread_setup_interfaces_context_state_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        setup_interfaces_context_state_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_state_d0() {
    setup_interfaces_context_state_d0 = new_context_state_1_reg_866.read();
}

void scheduler::thread_setup_interfaces_context_state_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        setup_interfaces_context_state_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_state_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_core_halted_V_address0() {
    setup_interfaces_core_halted_V_address0 =  (sc_lv<5>) (tmp_5_fu_611_p1.read());
}

void scheduler::thread_setup_interfaces_core_halted_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_core_halted_V_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_core_halted_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_restart_V_address0() {
    setup_interfaces_restart_V_address0 =  (sc_lv<5>) (tmp_5_reg_814.read());
}

void scheduler::thread_setup_interfaces_restart_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        setup_interfaces_restart_V_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_restart_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_restart_V_d0() {
    setup_interfaces_restart_V_d0 = ap_const_lv1_0;
}

void scheduler::thread_setup_interfaces_restart_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        setup_interfaces_restart_V_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_restart_V_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_tmp1_fu_570_p2() {
    tmp1_fu_570_p2 = (tmp_11_reg_791.read() & tmp_12_reg_796.read());
}

void scheduler::thread_tmp9_fu_565_p2() {
    tmp9_fu_565_p2 = (tmp_10_reg_785.read() & sel_tmp_fu_559_p2.read());
}

void scheduler::thread_tmp_10_fu_521_p2() {
    tmp_10_fu_521_p2 = (!history_current_node_q0.read().is_01() || !new_context_current_s_reg_736.read().is_01())? sc_lv<1>(): sc_lv<1>(history_current_node_q0.read() == new_context_current_s_reg_736.read());
}

void scheduler::thread_tmp_11_fu_526_p2() {
    tmp_11_fu_526_p2 = (!history_next_node_q0.read().is_01() || !new_context_next_nod_reg_743.read().is_01())? sc_lv<1>(): sc_lv<1>(history_next_node_q0.read() == new_context_next_nod_reg_743.read());
}

void scheduler::thread_tmp_12_fu_531_p2() {
    tmp_12_fu_531_p2 = (!history_state_q0.read().is_01() || !new_context_state_reg_750.read().is_01())? sc_lv<1>(): sc_lv<1>(history_state_q0.read() == new_context_state_reg_750.read());
}

void scheduler::thread_tmp_1_fu_447_p2() {
    tmp_1_fu_447_p2 = (!queue_head_ptr_load_reg_682.read().is_01() || !ap_const_lv32_140.is_01())? sc_lv<1>(): (sc_biguint<32>(queue_head_ptr_load_reg_682.read()) < sc_biguint<32>(ap_const_lv32_140));
}

void scheduler::thread_tmp_2_fu_616_p2() {
    tmp_2_fu_616_p2 = (!queue_head_ptr_2_fu_108.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(queue_head_ptr_2_fu_108.read() == ap_const_lv32_0);
}

void scheduler::thread_tmp_3_fu_622_p2() {
    tmp_3_fu_622_p2 = (halted_flag_reg_383.read() & tmp_2_fu_616_p2.read());
}

void scheduler::thread_tmp_5_fu_611_p1() {
    tmp_5_fu_611_p1 = esl_zext<64,6>(i1_reg_395.read());
}

void scheduler::thread_tmp_6_fu_493_p1() {
    tmp_6_fu_493_p1 = esl_zext<64,32>(history_head_ptr_fu_80.read());
}

void scheduler::thread_tmp_7_fu_639_p2() {
    tmp_7_fu_639_p2 = (!queue_head_ptr_2_fu_108.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(queue_head_ptr_2_fu_108.read() != ap_const_lv32_0);
}

void scheduler::thread_tmp_8_fu_480_p1() {
    tmp_8_fu_480_p1 = esl_zext<64,13>(j_reg_372.read());
}

void scheduler::thread_tmp_9_fu_657_p1() {
    tmp_9_fu_657_p1 = esl_zext<64,32>(queue_head_ptr_1_fu_651_p2.read());
}

void scheduler::thread_tmp_fu_437_p1() {
    tmp_fu_437_p1 = esl_zext<64,6>(i_reg_349.read());
}

void scheduler::thread_tmp_s_fu_487_p1() {
    tmp_s_fu_487_p1 = esl_zext<64,32>(queue_head_ptr_load_reg_682.read());
}

void scheduler::thread_ult_fu_474_p2() {
    ult_fu_474_p2 = (!j_cast_fu_458_p1.read().is_01() || !history_head_ptr_fu_80.read().is_01())? sc_lv<1>(): (sc_biguint<32>(j_cast_fu_458_p1.read()) < sc_biguint<32>(history_head_ptr_fu_80.read()));
}

void scheduler::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_425_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_452_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && (esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_717.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_462_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_599_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, demorgan_fu_645_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void scheduler::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_current_node_address0\" :  \"" << sched_interfaces_context_current_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_current_node_ce0\" :  \"" << sched_interfaces_context_current_node_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_current_node_q0\" :  \"" << sched_interfaces_context_current_node_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_next_node_address0\" :  \"" << sched_interfaces_context_next_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_next_node_ce0\" :  \"" << sched_interfaces_context_next_node_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_next_node_q0\" :  \"" << sched_interfaces_context_next_node_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_state_address0\" :  \"" << sched_interfaces_context_state_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_state_ce0\" :  \"" << sched_interfaces_context_state_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_state_q0\" :  \"" << sched_interfaces_context_state_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_schedule_V_address0\" :  \"" << sched_interfaces_schedule_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_schedule_V_ce0\" :  \"" << sched_interfaces_schedule_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_schedule_V_q0\" :  \"" << sched_interfaces_schedule_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_address0\" :  \"" << sched_interfaces_ack_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_ce0\" :  \"" << sched_interfaces_ack_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_we0\" :  \"" << sched_interfaces_ack_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_d0\" :  \"" << sched_interfaces_ack_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_address0\" :  \"" << setup_interfaces_context_current_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_ce0\" :  \"" << setup_interfaces_context_current_node_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_we0\" :  \"" << setup_interfaces_context_current_node_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_d0\" :  \"" << setup_interfaces_context_current_node_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_address0\" :  \"" << setup_interfaces_context_next_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_ce0\" :  \"" << setup_interfaces_context_next_node_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_we0\" :  \"" << setup_interfaces_context_next_node_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_d0\" :  \"" << setup_interfaces_context_next_node_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_address0\" :  \"" << setup_interfaces_context_state_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_ce0\" :  \"" << setup_interfaces_context_state_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_we0\" :  \"" << setup_interfaces_context_state_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_d0\" :  \"" << setup_interfaces_context_state_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_address0\" :  \"" << setup_interfaces_restart_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_ce0\" :  \"" << setup_interfaces_restart_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_we0\" :  \"" << setup_interfaces_restart_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_d0\" :  \"" << setup_interfaces_restart_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_core_halted_V_address0\" :  \"" << setup_interfaces_core_halted_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_core_halted_V_ce0\" :  \"" << setup_interfaces_core_halted_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"setup_interfaces_core_halted_V_q0\" :  \"" << setup_interfaces_core_halted_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finished\" :  \"" << finished.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"finished_ap_vld\" :  \"" << finished_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


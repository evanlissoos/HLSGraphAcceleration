// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scheduler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scheduler::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scheduler::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> scheduler::ap_ST_fsm_state1 = "1";
const sc_lv<10> scheduler::ap_ST_fsm_state2 = "10";
const sc_lv<10> scheduler::ap_ST_fsm_state3 = "100";
const sc_lv<10> scheduler::ap_ST_fsm_state4 = "1000";
const sc_lv<10> scheduler::ap_ST_fsm_state5 = "10000";
const sc_lv<10> scheduler::ap_ST_fsm_state6 = "100000";
const sc_lv<10> scheduler::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> scheduler::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> scheduler::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> scheduler::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> scheduler::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> scheduler::ap_const_lv32_1 = "1";
const sc_lv<1> scheduler::ap_const_lv1_0 = "0";
const sc_lv<32> scheduler::ap_const_lv32_2 = "10";
const sc_lv<1> scheduler::ap_const_lv1_1 = "1";
const sc_lv<32> scheduler::ap_const_lv32_3 = "11";
const sc_lv<32> scheduler::ap_const_lv32_6 = "110";
const sc_lv<32> scheduler::ap_const_lv32_7 = "111";
const sc_lv<32> scheduler::ap_const_lv32_5 = "101";
const sc_lv<32> scheduler::ap_const_lv32_9 = "1001";
const sc_lv<2> scheduler::ap_const_lv2_0 = "00";
const sc_lv<32> scheduler::ap_const_lv32_8 = "1000";
const sc_lv<32> scheduler::ap_const_lv32_4 = "100";
const sc_lv<32> scheduler::ap_const_lv32_1F = "11111";
const sc_lv<30> scheduler::ap_const_lv30_0 = "000000000000000000000000000000";
const sc_lv<2> scheduler::ap_const_lv2_2 = "10";
const sc_lv<2> scheduler::ap_const_lv2_1 = "1";
const sc_lv<32> scheduler::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const bool scheduler::ap_const_boolean_1 = true;

scheduler::scheduler(sc_module_name name) : sc_module(name), mVcdFile(0) {
    scheduler_mux_42_bkb_U1 = new scheduler_mux_42_bkb<1,1,32,32,32,32,2,32>("scheduler_mux_42_bkb_U1");
    scheduler_mux_42_bkb_U1->din1(queue_3_current_nod_fu_76);
    scheduler_mux_42_bkb_U1->din2(queue_3_current_nod_1_fu_80);
    scheduler_mux_42_bkb_U1->din3(queue_3_current_nod_2_fu_84);
    scheduler_mux_42_bkb_U1->din4(queue_3_current_nod_3_fu_88);
    scheduler_mux_42_bkb_U1->din5(tmp_6_fu_660_p1);
    scheduler_mux_42_bkb_U1->dout(new_context_current_1_fu_664_p6);
    scheduler_mux_42_bkb_U2 = new scheduler_mux_42_bkb<1,1,32,32,32,32,2,32>("scheduler_mux_42_bkb_U2");
    scheduler_mux_42_bkb_U2->din1(queue_3_next_node_2_fu_92);
    scheduler_mux_42_bkb_U2->din2(queue_3_next_node_3_fu_96);
    scheduler_mux_42_bkb_U2->din3(queue_3_next_node_6_fu_100);
    scheduler_mux_42_bkb_U2->din4(queue_3_next_node_8_fu_104);
    scheduler_mux_42_bkb_U2->din5(tmp_6_fu_660_p1);
    scheduler_mux_42_bkb_U2->dout(new_context_next_nod_1_fu_678_p6);
    scheduler_mux_42_bkb_U3 = new scheduler_mux_42_bkb<1,1,32,32,32,32,2,32>("scheduler_mux_42_bkb_U3");
    scheduler_mux_42_bkb_U3->din1(queue_3_state_2_fu_108);
    scheduler_mux_42_bkb_U3->din2(queue_3_state_3_fu_112);
    scheduler_mux_42_bkb_U3->din3(queue_3_state_6_fu_116);
    scheduler_mux_42_bkb_U3->din4(queue_3_state_8_fu_120);
    scheduler_mux_42_bkb_U3->din5(tmp_6_fu_660_p1);
    scheduler_mux_42_bkb_U3->dout(new_context_state_fu_692_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_demorgan_fu_654_p2);
    sensitive << ( setup_interfaces_core_halted_V_q0 );
    sensitive << ( tmp_5_fu_648_p2 );

    SC_METHOD(thread_exitcond1_fu_359_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_fu_72 );

    SC_METHOD(thread_exitcond_fu_631_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i1_reg_292 );

    SC_METHOD(thread_i_1_fu_621_p2);
    sensitive << ( i_load_reg_791 );

    SC_METHOD(thread_i_2_fu_637_p2);
    sensitive << ( i1_reg_292 );

    SC_METHOD(thread_icmp_fu_380_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_370_p4 );

    SC_METHOD(thread_newSel1_fu_522_p3);
    sensitive << ( new_context_state_2_reg_918 );
    sensitive << ( queue_3_state_6_fu_116 );
    sensitive << ( sel_tmp_fu_395_p2 );

    SC_METHOD(thread_newSel2_fu_432_p3);
    sensitive << ( new_context_current_s_reg_902 );
    sensitive << ( queue_3_current_nod_2_fu_84 );
    sensitive << ( sel_tmp_fu_395_p2 );

    SC_METHOD(thread_newSel4_fu_464_p3);
    sensitive << ( new_context_next_nod_reg_910 );
    sensitive << ( queue_3_next_node_8_fu_104 );
    sensitive << ( sel_tmp_fu_395_p2 );

    SC_METHOD(thread_newSel6_fu_477_p3);
    sensitive << ( new_context_next_nod_reg_910 );
    sensitive << ( queue_3_next_node_6_fu_100 );
    sensitive << ( sel_tmp_fu_395_p2 );

    SC_METHOD(thread_newSel8_fu_509_p3);
    sensitive << ( new_context_state_2_reg_918 );
    sensitive << ( queue_3_state_8_fu_120 );
    sensitive << ( sel_tmp_fu_395_p2 );

    SC_METHOD(thread_newSel_fu_419_p3);
    sensitive << ( new_context_current_s_reg_902 );
    sensitive << ( queue_3_current_nod_3_fu_88 );
    sensitive << ( sel_tmp_fu_395_p2 );

    SC_METHOD(thread_or_cond_5_fu_386_p2);
    sensitive << ( sched_interfaces_schedule_V_q0 );
    sensitive << ( icmp_fu_380_p2 );

    SC_METHOD(thread_or_cond_fu_413_p2);
    sensitive << ( sel_tmp2_fu_407_p2 );
    sensitive << ( sel_tmp1_fu_401_p2 );

    SC_METHOD(thread_queue_3_current_nod_10_fu_445_p3);
    sensitive << ( new_context_current_s_reg_902 );
    sensitive << ( queue_3_current_nod_1_fu_80 );
    sensitive << ( sel_tmp1_fu_401_p2 );

    SC_METHOD(thread_queue_3_current_nod_11_fu_451_p3);
    sensitive << ( queue_3_current_nod_1_fu_80 );
    sensitive << ( sel_tmp2_fu_407_p2 );
    sensitive << ( queue_3_current_nod_10_fu_445_p3 );

    SC_METHOD(thread_queue_3_current_nod_12_fu_458_p3);
    sensitive << ( new_context_current_s_reg_902 );
    sensitive << ( queue_3_current_nod_fu_76 );
    sensitive << ( sel_tmp2_fu_407_p2 );

    SC_METHOD(thread_queue_3_current_nod_8_fu_425_p3);
    sensitive << ( queue_3_current_nod_3_fu_88 );
    sensitive << ( or_cond_fu_413_p2 );
    sensitive << ( newSel_fu_419_p3 );

    SC_METHOD(thread_queue_3_current_nod_9_fu_438_p3);
    sensitive << ( queue_3_current_nod_2_fu_84 );
    sensitive << ( or_cond_fu_413_p2 );
    sensitive << ( newSel2_fu_432_p3 );

    SC_METHOD(thread_queue_3_next_node_1_fu_483_p3);
    sensitive << ( queue_3_next_node_6_fu_100 );
    sensitive << ( or_cond_fu_413_p2 );
    sensitive << ( newSel6_fu_477_p3 );

    SC_METHOD(thread_queue_3_next_node_4_fu_490_p3);
    sensitive << ( new_context_next_nod_reg_910 );
    sensitive << ( queue_3_next_node_3_fu_96 );
    sensitive << ( sel_tmp1_fu_401_p2 );

    SC_METHOD(thread_queue_3_next_node_5_fu_496_p3);
    sensitive << ( queue_3_next_node_3_fu_96 );
    sensitive << ( sel_tmp2_fu_407_p2 );
    sensitive << ( queue_3_next_node_4_fu_490_p3 );

    SC_METHOD(thread_queue_3_next_node_7_fu_503_p3);
    sensitive << ( new_context_next_nod_reg_910 );
    sensitive << ( queue_3_next_node_2_fu_92 );
    sensitive << ( sel_tmp2_fu_407_p2 );

    SC_METHOD(thread_queue_3_next_node_fu_470_p3);
    sensitive << ( queue_3_next_node_8_fu_104 );
    sensitive << ( or_cond_fu_413_p2 );
    sensitive << ( newSel4_fu_464_p3 );

    SC_METHOD(thread_queue_3_state_1_fu_528_p3);
    sensitive << ( queue_3_state_6_fu_116 );
    sensitive << ( or_cond_fu_413_p2 );
    sensitive << ( newSel1_fu_522_p3 );

    SC_METHOD(thread_queue_3_state_4_fu_535_p3);
    sensitive << ( new_context_state_2_reg_918 );
    sensitive << ( queue_3_state_3_fu_112 );
    sensitive << ( sel_tmp1_fu_401_p2 );

    SC_METHOD(thread_queue_3_state_5_fu_541_p3);
    sensitive << ( queue_3_state_3_fu_112 );
    sensitive << ( sel_tmp2_fu_407_p2 );
    sensitive << ( queue_3_state_4_fu_535_p3 );

    SC_METHOD(thread_queue_3_state_7_fu_548_p3);
    sensitive << ( new_context_state_2_reg_918 );
    sensitive << ( queue_3_state_2_fu_108 );
    sensitive << ( sel_tmp2_fu_407_p2 );

    SC_METHOD(thread_queue_3_state_fu_515_p3);
    sensitive << ( queue_3_state_8_fu_120 );
    sensitive << ( or_cond_fu_413_p2 );
    sensitive << ( newSel8_fu_509_p3 );

    SC_METHOD(thread_queue_head_ptr_1_be_phi_fu_272_p4);
    sensitive << ( exitcond1_reg_797 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( queue_head_ptr_3_phi_fu_261_p4 );
    sensitive << ( queue_head_ptr_1_be_reg_268 );

    SC_METHOD(thread_queue_head_ptr_2_fu_706_p2);
    sensitive << ( queue_head_ptr_4_reg_280 );

    SC_METHOD(thread_queue_head_ptr_3_phi_fu_261_p4);
    sensitive << ( exitcond1_reg_797 );
    sensitive << ( or_cond_5_reg_814 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( queue_head_ptr_fu_554_p2 );
    sensitive << ( queue_head_ptr_3_reg_258 );

    SC_METHOD(thread_queue_head_ptr_fu_554_p2);
    sensitive << ( queue_head_ptr_1_reg_246 );

    SC_METHOD(thread_sched_interfaces_ack_V_address0);
    sensitive << ( tmp_reg_801 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_d0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_ack_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sched_interfaces_context_current_node_address0);
    sensitive << ( tmp_reg_801 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_current_node_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_next_node_address0);
    sensitive << ( tmp_reg_801 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_next_node_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_state_address0);
    sensitive << ( tmp_reg_801 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_context_state_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sched_interfaces_schedule_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_365_p1 );

    SC_METHOD(thread_sched_interfaces_schedule_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sel_tmp1_fu_401_p2);
    sensitive << ( exitcond1_reg_797 );
    sensitive << ( or_cond_5_reg_814 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_3_fu_392_p1 );

    SC_METHOD(thread_sel_tmp2_fu_407_p2);
    sensitive << ( exitcond1_reg_797 );
    sensitive << ( or_cond_5_reg_814 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_3_fu_392_p1 );

    SC_METHOD(thread_sel_tmp_fu_395_p2);
    sensitive << ( exitcond1_reg_797 );
    sensitive << ( or_cond_5_reg_814 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_3_fu_392_p1 );

    SC_METHOD(thread_setup_interfaces_context_current_node_address0);
    sensitive << ( tmp_4_reg_934 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_current_node_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_current_node_d0);
    sensitive << ( new_context_current_1_reg_950 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_current_node_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_next_node_address0);
    sensitive << ( tmp_4_reg_934 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_next_node_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_next_node_d0);
    sensitive << ( new_context_next_nod_1_reg_955 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_next_node_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_state_address0);
    sensitive << ( tmp_4_reg_934 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_state_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_state_d0);
    sensitive << ( new_context_state_reg_960 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_context_state_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_core_halted_V_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_4_fu_643_p1 );

    SC_METHOD(thread_setup_interfaces_core_halted_V_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_setup_interfaces_restart_V_address0);
    sensitive << ( tmp_4_reg_934 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_restart_V_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_restart_V_d0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_setup_interfaces_restart_V_we0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_tmp_1_fu_370_p4);
    sensitive << ( queue_head_ptr_1_reg_246 );

    SC_METHOD(thread_tmp_3_fu_392_p1);
    sensitive << ( i_load_reg_791 );

    SC_METHOD(thread_tmp_4_fu_643_p1);
    sensitive << ( i1_reg_292 );

    SC_METHOD(thread_tmp_5_fu_648_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( queue_head_ptr_4_reg_280 );

    SC_METHOD(thread_tmp_6_fu_660_p1);
    sensitive << ( queue_head_ptr_4_reg_280 );

    SC_METHOD(thread_tmp_fu_365_p1);
    sensitive << ( i_fu_72 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_359_p2 );
    sensitive << ( or_cond_5_fu_386_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_fu_631_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( demorgan_fu_654_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scheduler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_address0, "(port)sched_interfaces_context_current_node_address0");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_ce0, "(port)sched_interfaces_context_current_node_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_current_node_q0, "(port)sched_interfaces_context_current_node_q0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_address0, "(port)sched_interfaces_context_next_node_address0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_ce0, "(port)sched_interfaces_context_next_node_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_next_node_q0, "(port)sched_interfaces_context_next_node_q0");
    sc_trace(mVcdFile, sched_interfaces_context_state_address0, "(port)sched_interfaces_context_state_address0");
    sc_trace(mVcdFile, sched_interfaces_context_state_ce0, "(port)sched_interfaces_context_state_ce0");
    sc_trace(mVcdFile, sched_interfaces_context_state_q0, "(port)sched_interfaces_context_state_q0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_address0, "(port)sched_interfaces_schedule_V_address0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_ce0, "(port)sched_interfaces_schedule_V_ce0");
    sc_trace(mVcdFile, sched_interfaces_schedule_V_q0, "(port)sched_interfaces_schedule_V_q0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_address0, "(port)sched_interfaces_ack_V_address0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_ce0, "(port)sched_interfaces_ack_V_ce0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_we0, "(port)sched_interfaces_ack_V_we0");
    sc_trace(mVcdFile, sched_interfaces_ack_V_d0, "(port)sched_interfaces_ack_V_d0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_address0, "(port)setup_interfaces_context_current_node_address0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_ce0, "(port)setup_interfaces_context_current_node_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_we0, "(port)setup_interfaces_context_current_node_we0");
    sc_trace(mVcdFile, setup_interfaces_context_current_node_d0, "(port)setup_interfaces_context_current_node_d0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_address0, "(port)setup_interfaces_context_next_node_address0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_ce0, "(port)setup_interfaces_context_next_node_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_we0, "(port)setup_interfaces_context_next_node_we0");
    sc_trace(mVcdFile, setup_interfaces_context_next_node_d0, "(port)setup_interfaces_context_next_node_d0");
    sc_trace(mVcdFile, setup_interfaces_context_state_address0, "(port)setup_interfaces_context_state_address0");
    sc_trace(mVcdFile, setup_interfaces_context_state_ce0, "(port)setup_interfaces_context_state_ce0");
    sc_trace(mVcdFile, setup_interfaces_context_state_we0, "(port)setup_interfaces_context_state_we0");
    sc_trace(mVcdFile, setup_interfaces_context_state_d0, "(port)setup_interfaces_context_state_d0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_address0, "(port)setup_interfaces_restart_V_address0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_ce0, "(port)setup_interfaces_restart_V_ce0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_we0, "(port)setup_interfaces_restart_V_we0");
    sc_trace(mVcdFile, setup_interfaces_restart_V_d0, "(port)setup_interfaces_restart_V_d0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_address0, "(port)setup_interfaces_core_halted_V_address0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_ce0, "(port)setup_interfaces_core_halted_V_ce0");
    sc_trace(mVcdFile, setup_interfaces_core_halted_V_q0, "(port)setup_interfaces_core_halted_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_load_reg_791, "i_load_reg_791");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond1_fu_359_p2, "exitcond1_fu_359_p2");
    sc_trace(mVcdFile, exitcond1_reg_797, "exitcond1_reg_797");
    sc_trace(mVcdFile, tmp_fu_365_p1, "tmp_fu_365_p1");
    sc_trace(mVcdFile, tmp_reg_801, "tmp_reg_801");
    sc_trace(mVcdFile, or_cond_5_fu_386_p2, "or_cond_5_fu_386_p2");
    sc_trace(mVcdFile, or_cond_5_reg_814, "or_cond_5_reg_814");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, new_context_current_s_reg_902, "new_context_current_s_reg_902");
    sc_trace(mVcdFile, new_context_next_nod_reg_910, "new_context_next_nod_reg_910");
    sc_trace(mVcdFile, new_context_state_2_reg_918, "new_context_state_2_reg_918");
    sc_trace(mVcdFile, i_2_fu_637_p2, "i_2_fu_637_p2");
    sc_trace(mVcdFile, i_2_reg_929, "i_2_reg_929");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_4_fu_643_p1, "tmp_4_fu_643_p1");
    sc_trace(mVcdFile, tmp_4_reg_934, "tmp_4_reg_934");
    sc_trace(mVcdFile, exitcond_fu_631_p2, "exitcond_fu_631_p2");
    sc_trace(mVcdFile, new_context_current_1_fu_664_p6, "new_context_current_1_fu_664_p6");
    sc_trace(mVcdFile, new_context_current_1_reg_950, "new_context_current_1_reg_950");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, demorgan_fu_654_p2, "demorgan_fu_654_p2");
    sc_trace(mVcdFile, new_context_next_nod_1_fu_678_p6, "new_context_next_nod_1_fu_678_p6");
    sc_trace(mVcdFile, new_context_next_nod_1_reg_955, "new_context_next_nod_1_reg_955");
    sc_trace(mVcdFile, new_context_state_fu_692_p6, "new_context_state_fu_692_p6");
    sc_trace(mVcdFile, new_context_state_reg_960, "new_context_state_reg_960");
    sc_trace(mVcdFile, queue_head_ptr_2_fu_706_p2, "queue_head_ptr_2_fu_706_p2");
    sc_trace(mVcdFile, queue_head_ptr_2_reg_965, "queue_head_ptr_2_reg_965");
    sc_trace(mVcdFile, queue_head_ptr_1_reg_246, "queue_head_ptr_1_reg_246");
    sc_trace(mVcdFile, queue_head_ptr_1_be_phi_fu_272_p4, "queue_head_ptr_1_be_phi_fu_272_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, queue_head_ptr_fu_554_p2, "queue_head_ptr_fu_554_p2");
    sc_trace(mVcdFile, queue_head_ptr_3_phi_fu_261_p4, "queue_head_ptr_3_phi_fu_261_p4");
    sc_trace(mVcdFile, queue_head_ptr_3_reg_258, "queue_head_ptr_3_reg_258");
    sc_trace(mVcdFile, queue_head_ptr_1_be_reg_268, "queue_head_ptr_1_be_reg_268");
    sc_trace(mVcdFile, queue_head_ptr_4_reg_280, "queue_head_ptr_4_reg_280");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i1_reg_292, "i1_reg_292");
    sc_trace(mVcdFile, queue_head_ptr_4_be_reg_303, "queue_head_ptr_4_be_reg_303");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_fu_72, "i_fu_72");
    sc_trace(mVcdFile, i_1_fu_621_p2, "i_1_fu_621_p2");
    sc_trace(mVcdFile, queue_3_current_nod_fu_76, "queue_3_current_nod_fu_76");
    sc_trace(mVcdFile, queue_3_current_nod_12_fu_458_p3, "queue_3_current_nod_12_fu_458_p3");
    sc_trace(mVcdFile, queue_3_current_nod_1_fu_80, "queue_3_current_nod_1_fu_80");
    sc_trace(mVcdFile, queue_3_current_nod_11_fu_451_p3, "queue_3_current_nod_11_fu_451_p3");
    sc_trace(mVcdFile, queue_3_current_nod_2_fu_84, "queue_3_current_nod_2_fu_84");
    sc_trace(mVcdFile, queue_3_current_nod_9_fu_438_p3, "queue_3_current_nod_9_fu_438_p3");
    sc_trace(mVcdFile, queue_3_current_nod_3_fu_88, "queue_3_current_nod_3_fu_88");
    sc_trace(mVcdFile, queue_3_current_nod_8_fu_425_p3, "queue_3_current_nod_8_fu_425_p3");
    sc_trace(mVcdFile, queue_3_next_node_2_fu_92, "queue_3_next_node_2_fu_92");
    sc_trace(mVcdFile, queue_3_next_node_7_fu_503_p3, "queue_3_next_node_7_fu_503_p3");
    sc_trace(mVcdFile, queue_3_next_node_3_fu_96, "queue_3_next_node_3_fu_96");
    sc_trace(mVcdFile, queue_3_next_node_5_fu_496_p3, "queue_3_next_node_5_fu_496_p3");
    sc_trace(mVcdFile, queue_3_next_node_6_fu_100, "queue_3_next_node_6_fu_100");
    sc_trace(mVcdFile, queue_3_next_node_1_fu_483_p3, "queue_3_next_node_1_fu_483_p3");
    sc_trace(mVcdFile, queue_3_next_node_8_fu_104, "queue_3_next_node_8_fu_104");
    sc_trace(mVcdFile, queue_3_next_node_fu_470_p3, "queue_3_next_node_fu_470_p3");
    sc_trace(mVcdFile, queue_3_state_2_fu_108, "queue_3_state_2_fu_108");
    sc_trace(mVcdFile, queue_3_state_7_fu_548_p3, "queue_3_state_7_fu_548_p3");
    sc_trace(mVcdFile, queue_3_state_3_fu_112, "queue_3_state_3_fu_112");
    sc_trace(mVcdFile, queue_3_state_5_fu_541_p3, "queue_3_state_5_fu_541_p3");
    sc_trace(mVcdFile, queue_3_state_6_fu_116, "queue_3_state_6_fu_116");
    sc_trace(mVcdFile, queue_3_state_1_fu_528_p3, "queue_3_state_1_fu_528_p3");
    sc_trace(mVcdFile, queue_3_state_8_fu_120, "queue_3_state_8_fu_120");
    sc_trace(mVcdFile, queue_3_state_fu_515_p3, "queue_3_state_fu_515_p3");
    sc_trace(mVcdFile, tmp_1_fu_370_p4, "tmp_1_fu_370_p4");
    sc_trace(mVcdFile, icmp_fu_380_p2, "icmp_fu_380_p2");
    sc_trace(mVcdFile, tmp_3_fu_392_p1, "tmp_3_fu_392_p1");
    sc_trace(mVcdFile, sel_tmp2_fu_407_p2, "sel_tmp2_fu_407_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_401_p2, "sel_tmp1_fu_401_p2");
    sc_trace(mVcdFile, sel_tmp_fu_395_p2, "sel_tmp_fu_395_p2");
    sc_trace(mVcdFile, or_cond_fu_413_p2, "or_cond_fu_413_p2");
    sc_trace(mVcdFile, newSel_fu_419_p3, "newSel_fu_419_p3");
    sc_trace(mVcdFile, newSel2_fu_432_p3, "newSel2_fu_432_p3");
    sc_trace(mVcdFile, queue_3_current_nod_10_fu_445_p3, "queue_3_current_nod_10_fu_445_p3");
    sc_trace(mVcdFile, newSel4_fu_464_p3, "newSel4_fu_464_p3");
    sc_trace(mVcdFile, newSel6_fu_477_p3, "newSel6_fu_477_p3");
    sc_trace(mVcdFile, queue_3_next_node_4_fu_490_p3, "queue_3_next_node_4_fu_490_p3");
    sc_trace(mVcdFile, newSel8_fu_509_p3, "newSel8_fu_509_p3");
    sc_trace(mVcdFile, newSel1_fu_522_p3, "newSel1_fu_522_p3");
    sc_trace(mVcdFile, queue_3_state_4_fu_535_p3, "queue_3_state_4_fu_535_p3");
    sc_trace(mVcdFile, tmp_5_fu_648_p2, "tmp_5_fu_648_p2");
    sc_trace(mVcdFile, tmp_6_fu_660_p1, "tmp_6_fu_660_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("scheduler.hdltvin.dat");
    mHdltvoutHandle.open("scheduler.hdltvout.dat");
}

scheduler::~scheduler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete scheduler_mux_42_bkb_U1;
    delete scheduler_mux_42_bkb_U2;
    delete scheduler_mux_42_bkb_U3;
}

void scheduler::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i1_reg_292 = i_2_reg_929.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_359_p2.read(), ap_const_lv1_1))) {
        i1_reg_292 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_797.read(), ap_const_lv1_0))) {
        i_fu_72 = i_1_fu_621_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_631_p2.read())))) {
        i_fu_72 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_631_p2.read()))) {
        queue_head_ptr_1_be_reg_268 = queue_head_ptr_4_reg_280.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(exitcond1_reg_797.read(), ap_const_lv1_0))) {
        queue_head_ptr_1_be_reg_268 = queue_head_ptr_3_phi_fu_261_p4.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        queue_head_ptr_1_reg_246 = queue_head_ptr_1_be_phi_fu_272_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        queue_head_ptr_1_reg_246 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_5_fu_386_p2.read()))) {
        queue_head_ptr_3_reg_258 = queue_head_ptr_1_reg_246.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(exitcond1_reg_797.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(or_cond_5_reg_814.read(), ap_const_lv1_1))) {
        queue_head_ptr_3_reg_258 = queue_head_ptr_fu_554_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, demorgan_fu_654_p2.read()))) {
        queue_head_ptr_4_be_reg_303 = queue_head_ptr_4_reg_280.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        queue_head_ptr_4_be_reg_303 = queue_head_ptr_2_reg_965.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        queue_head_ptr_4_reg_280 = queue_head_ptr_4_be_reg_303.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_359_p2.read(), ap_const_lv1_1))) {
        queue_head_ptr_4_reg_280 = queue_head_ptr_1_reg_246.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        exitcond1_reg_797 = exitcond1_fu_359_p2.read();
        i_load_reg_791 = i_fu_72.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_2_reg_929 = i_2_fu_637_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, demorgan_fu_654_p2.read()))) {
        new_context_current_1_reg_950 = new_context_current_1_fu_664_p6.read();
        new_context_next_nod_1_reg_955 = new_context_next_nod_1_fu_678_p6.read();
        new_context_state_reg_960 = new_context_state_fu_692_p6.read();
        queue_head_ptr_2_reg_965 = queue_head_ptr_2_fu_706_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        new_context_current_s_reg_902 = sched_interfaces_context_current_node_q0.read();
        new_context_next_nod_reg_910 = sched_interfaces_context_next_node_q0.read();
        new_context_state_2_reg_918 = sched_interfaces_context_state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        or_cond_5_reg_814 = or_cond_5_fu_386_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond1_reg_797.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(or_cond_5_reg_814.read(), ap_const_lv1_1))) {
        queue_3_current_nod_1_fu_80 = queue_3_current_nod_11_fu_451_p3.read();
        queue_3_current_nod_2_fu_84 = queue_3_current_nod_9_fu_438_p3.read();
        queue_3_current_nod_3_fu_88 = queue_3_current_nod_8_fu_425_p3.read();
        queue_3_current_nod_fu_76 = queue_3_current_nod_12_fu_458_p3.read();
        queue_3_next_node_2_fu_92 = queue_3_next_node_7_fu_503_p3.read();
        queue_3_next_node_3_fu_96 = queue_3_next_node_5_fu_496_p3.read();
        queue_3_next_node_6_fu_100 = queue_3_next_node_1_fu_483_p3.read();
        queue_3_next_node_8_fu_104 = queue_3_next_node_fu_470_p3.read();
        queue_3_state_2_fu_108 = queue_3_state_7_fu_548_p3.read();
        queue_3_state_3_fu_112 = queue_3_state_5_fu_541_p3.read();
        queue_3_state_6_fu_116 = queue_3_state_1_fu_528_p3.read();
        queue_3_state_8_fu_120 = queue_3_state_fu_515_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_631_p2.read()))) {
        tmp_4_reg_934 = tmp_4_fu_643_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_359_p2.read(), ap_const_lv1_0))) {
        tmp_reg_801 = tmp_fu_365_p1.read();
    }
}

void scheduler::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void scheduler::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void scheduler::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void scheduler::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void scheduler::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void scheduler::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void scheduler::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void scheduler::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void scheduler::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void scheduler::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void scheduler::thread_ap_done() {
    ap_done = ap_const_logic_0;
}

void scheduler::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scheduler::thread_ap_ready() {
    ap_ready = ap_const_logic_0;
}

void scheduler::thread_demorgan_fu_654_p2() {
    demorgan_fu_654_p2 = (setup_interfaces_core_halted_V_q0.read() & tmp_5_fu_648_p2.read());
}

void scheduler::thread_exitcond1_fu_359_p2() {
    exitcond1_fu_359_p2 = (!i_fu_72.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(i_fu_72.read() == ap_const_lv32_2);
}

void scheduler::thread_exitcond_fu_631_p2() {
    exitcond_fu_631_p2 = (!i1_reg_292.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_292.read() == ap_const_lv2_2);
}

void scheduler::thread_i_1_fu_621_p2() {
    i_1_fu_621_p2 = (!i_load_reg_791.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_load_reg_791.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void scheduler::thread_i_2_fu_637_p2() {
    i_2_fu_637_p2 = (!i1_reg_292.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i1_reg_292.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void scheduler::thread_icmp_fu_380_p2() {
    icmp_fu_380_p2 = (!tmp_1_fu_370_p4.read().is_01() || !ap_const_lv30_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_370_p4.read() == ap_const_lv30_0);
}

void scheduler::thread_newSel1_fu_522_p3() {
    newSel1_fu_522_p3 = (!sel_tmp_fu_395_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_395_p2.read()[0].to_bool())? new_context_state_2_reg_918.read(): queue_3_state_6_fu_116.read());
}

void scheduler::thread_newSel2_fu_432_p3() {
    newSel2_fu_432_p3 = (!sel_tmp_fu_395_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_395_p2.read()[0].to_bool())? new_context_current_s_reg_902.read(): queue_3_current_nod_2_fu_84.read());
}

void scheduler::thread_newSel4_fu_464_p3() {
    newSel4_fu_464_p3 = (!sel_tmp_fu_395_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_395_p2.read()[0].to_bool())? queue_3_next_node_8_fu_104.read(): new_context_next_nod_reg_910.read());
}

void scheduler::thread_newSel6_fu_477_p3() {
    newSel6_fu_477_p3 = (!sel_tmp_fu_395_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_395_p2.read()[0].to_bool())? new_context_next_nod_reg_910.read(): queue_3_next_node_6_fu_100.read());
}

void scheduler::thread_newSel8_fu_509_p3() {
    newSel8_fu_509_p3 = (!sel_tmp_fu_395_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_395_p2.read()[0].to_bool())? queue_3_state_8_fu_120.read(): new_context_state_2_reg_918.read());
}

void scheduler::thread_newSel_fu_419_p3() {
    newSel_fu_419_p3 = (!sel_tmp_fu_395_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_395_p2.read()[0].to_bool())? queue_3_current_nod_3_fu_88.read(): new_context_current_s_reg_902.read());
}

void scheduler::thread_or_cond_5_fu_386_p2() {
    or_cond_5_fu_386_p2 = (sched_interfaces_schedule_V_q0.read() & icmp_fu_380_p2.read());
}

void scheduler::thread_or_cond_fu_413_p2() {
    or_cond_fu_413_p2 = (sel_tmp2_fu_407_p2.read() | sel_tmp1_fu_401_p2.read());
}

void scheduler::thread_queue_3_current_nod_10_fu_445_p3() {
    queue_3_current_nod_10_fu_445_p3 = (!sel_tmp1_fu_401_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp1_fu_401_p2.read()[0].to_bool())? new_context_current_s_reg_902.read(): queue_3_current_nod_1_fu_80.read());
}

void scheduler::thread_queue_3_current_nod_11_fu_451_p3() {
    queue_3_current_nod_11_fu_451_p3 = (!sel_tmp2_fu_407_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_407_p2.read()[0].to_bool())? queue_3_current_nod_1_fu_80.read(): queue_3_current_nod_10_fu_445_p3.read());
}

void scheduler::thread_queue_3_current_nod_12_fu_458_p3() {
    queue_3_current_nod_12_fu_458_p3 = (!sel_tmp2_fu_407_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_407_p2.read()[0].to_bool())? new_context_current_s_reg_902.read(): queue_3_current_nod_fu_76.read());
}

void scheduler::thread_queue_3_current_nod_8_fu_425_p3() {
    queue_3_current_nod_8_fu_425_p3 = (!or_cond_fu_413_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_413_p2.read()[0].to_bool())? queue_3_current_nod_3_fu_88.read(): newSel_fu_419_p3.read());
}

void scheduler::thread_queue_3_current_nod_9_fu_438_p3() {
    queue_3_current_nod_9_fu_438_p3 = (!or_cond_fu_413_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_413_p2.read()[0].to_bool())? queue_3_current_nod_2_fu_84.read(): newSel2_fu_432_p3.read());
}

void scheduler::thread_queue_3_next_node_1_fu_483_p3() {
    queue_3_next_node_1_fu_483_p3 = (!or_cond_fu_413_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_413_p2.read()[0].to_bool())? queue_3_next_node_6_fu_100.read(): newSel6_fu_477_p3.read());
}

void scheduler::thread_queue_3_next_node_4_fu_490_p3() {
    queue_3_next_node_4_fu_490_p3 = (!sel_tmp1_fu_401_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp1_fu_401_p2.read()[0].to_bool())? new_context_next_nod_reg_910.read(): queue_3_next_node_3_fu_96.read());
}

void scheduler::thread_queue_3_next_node_5_fu_496_p3() {
    queue_3_next_node_5_fu_496_p3 = (!sel_tmp2_fu_407_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_407_p2.read()[0].to_bool())? queue_3_next_node_3_fu_96.read(): queue_3_next_node_4_fu_490_p3.read());
}

void scheduler::thread_queue_3_next_node_7_fu_503_p3() {
    queue_3_next_node_7_fu_503_p3 = (!sel_tmp2_fu_407_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_407_p2.read()[0].to_bool())? new_context_next_nod_reg_910.read(): queue_3_next_node_2_fu_92.read());
}

void scheduler::thread_queue_3_next_node_fu_470_p3() {
    queue_3_next_node_fu_470_p3 = (!or_cond_fu_413_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_413_p2.read()[0].to_bool())? queue_3_next_node_8_fu_104.read(): newSel4_fu_464_p3.read());
}

void scheduler::thread_queue_3_state_1_fu_528_p3() {
    queue_3_state_1_fu_528_p3 = (!or_cond_fu_413_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_413_p2.read()[0].to_bool())? queue_3_state_6_fu_116.read(): newSel1_fu_522_p3.read());
}

void scheduler::thread_queue_3_state_4_fu_535_p3() {
    queue_3_state_4_fu_535_p3 = (!sel_tmp1_fu_401_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp1_fu_401_p2.read()[0].to_bool())? new_context_state_2_reg_918.read(): queue_3_state_3_fu_112.read());
}

void scheduler::thread_queue_3_state_5_fu_541_p3() {
    queue_3_state_5_fu_541_p3 = (!sel_tmp2_fu_407_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_407_p2.read()[0].to_bool())? queue_3_state_3_fu_112.read(): queue_3_state_4_fu_535_p3.read());
}

void scheduler::thread_queue_3_state_7_fu_548_p3() {
    queue_3_state_7_fu_548_p3 = (!sel_tmp2_fu_407_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_407_p2.read()[0].to_bool())? new_context_state_2_reg_918.read(): queue_3_state_2_fu_108.read());
}

void scheduler::thread_queue_3_state_fu_515_p3() {
    queue_3_state_fu_515_p3 = (!or_cond_fu_413_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_413_p2.read()[0].to_bool())? queue_3_state_8_fu_120.read(): newSel8_fu_509_p3.read());
}

void scheduler::thread_queue_head_ptr_1_be_phi_fu_272_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_797.read(), ap_const_lv1_0))) {
        queue_head_ptr_1_be_phi_fu_272_p4 = queue_head_ptr_3_phi_fu_261_p4.read();
    } else {
        queue_head_ptr_1_be_phi_fu_272_p4 = queue_head_ptr_1_be_reg_268.read();
    }
}

void scheduler::thread_queue_head_ptr_2_fu_706_p2() {
    queue_head_ptr_2_fu_706_p2 = (!ap_const_lv32_FFFFFFFF.is_01() || !queue_head_ptr_4_reg_280.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFFF) + sc_biguint<32>(queue_head_ptr_4_reg_280.read()));
}

void scheduler::thread_queue_head_ptr_3_phi_fu_261_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(exitcond1_reg_797.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(or_cond_5_reg_814.read(), ap_const_lv1_1))) {
        queue_head_ptr_3_phi_fu_261_p4 = queue_head_ptr_fu_554_p2.read();
    } else {
        queue_head_ptr_3_phi_fu_261_p4 = queue_head_ptr_3_reg_258.read();
    }
}

void scheduler::thread_queue_head_ptr_fu_554_p2() {
    queue_head_ptr_fu_554_p2 = (!ap_const_lv32_1.is_01() || !queue_head_ptr_1_reg_246.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(queue_head_ptr_1_reg_246.read()));
}

void scheduler::thread_sched_interfaces_ack_V_address0() {
    sched_interfaces_ack_V_address0 =  (sc_lv<1>) (tmp_reg_801.read());
}

void scheduler::thread_sched_interfaces_ack_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sched_interfaces_ack_V_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_ack_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_ack_V_d0() {
    sched_interfaces_ack_V_d0 = ap_const_lv1_0;
}

void scheduler::thread_sched_interfaces_ack_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sched_interfaces_ack_V_we0 = ap_const_logic_1;
    } else {
        sched_interfaces_ack_V_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_current_node_address0() {
    sched_interfaces_context_current_node_address0 =  (sc_lv<1>) (tmp_reg_801.read());
}

void scheduler::thread_sched_interfaces_context_current_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_current_node_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_next_node_address0() {
    sched_interfaces_context_next_node_address0 =  (sc_lv<1>) (tmp_reg_801.read());
}

void scheduler::thread_sched_interfaces_context_next_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_next_node_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_context_state_address0() {
    sched_interfaces_context_state_address0 =  (sc_lv<1>) (tmp_reg_801.read());
}

void scheduler::thread_sched_interfaces_context_state_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sched_interfaces_context_state_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_context_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sched_interfaces_schedule_V_address0() {
    sched_interfaces_schedule_V_address0 =  (sc_lv<1>) (tmp_fu_365_p1.read());
}

void scheduler::thread_sched_interfaces_schedule_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sched_interfaces_schedule_V_ce0 = ap_const_logic_1;
    } else {
        sched_interfaces_schedule_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_sel_tmp1_fu_401_p2() {
    sel_tmp1_fu_401_p2 = (!tmp_3_fu_392_p1.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_392_p1.read() == ap_const_lv2_1);
}

void scheduler::thread_sel_tmp2_fu_407_p2() {
    sel_tmp2_fu_407_p2 = (!tmp_3_fu_392_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_392_p1.read() == ap_const_lv2_0);
}

void scheduler::thread_sel_tmp_fu_395_p2() {
    sel_tmp_fu_395_p2 = (!tmp_3_fu_392_p1.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_392_p1.read() == ap_const_lv2_2);
}

void scheduler::thread_setup_interfaces_context_current_node_address0() {
    setup_interfaces_context_current_node_address0 =  (sc_lv<1>) (tmp_4_reg_934.read());
}

void scheduler::thread_setup_interfaces_context_current_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_context_current_node_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_current_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_current_node_d0() {
    setup_interfaces_context_current_node_d0 = new_context_current_1_reg_950.read();
}

void scheduler::thread_setup_interfaces_context_current_node_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_context_current_node_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_current_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_next_node_address0() {
    setup_interfaces_context_next_node_address0 =  (sc_lv<1>) (tmp_4_reg_934.read());
}

void scheduler::thread_setup_interfaces_context_next_node_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_context_next_node_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_next_node_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_next_node_d0() {
    setup_interfaces_context_next_node_d0 = new_context_next_nod_1_reg_955.read();
}

void scheduler::thread_setup_interfaces_context_next_node_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_context_next_node_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_next_node_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_state_address0() {
    setup_interfaces_context_state_address0 =  (sc_lv<1>) (tmp_4_reg_934.read());
}

void scheduler::thread_setup_interfaces_context_state_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_context_state_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_state_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_context_state_d0() {
    setup_interfaces_context_state_d0 = new_context_state_reg_960.read();
}

void scheduler::thread_setup_interfaces_context_state_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_context_state_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_context_state_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_core_halted_V_address0() {
    setup_interfaces_core_halted_V_address0 =  (sc_lv<1>) (tmp_4_fu_643_p1.read());
}

void scheduler::thread_setup_interfaces_core_halted_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        setup_interfaces_core_halted_V_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_core_halted_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_restart_V_address0() {
    setup_interfaces_restart_V_address0 =  (sc_lv<1>) (tmp_4_reg_934.read());
}

void scheduler::thread_setup_interfaces_restart_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_restart_V_ce0 = ap_const_logic_1;
    } else {
        setup_interfaces_restart_V_ce0 = ap_const_logic_0;
    }
}

void scheduler::thread_setup_interfaces_restart_V_d0() {
    setup_interfaces_restart_V_d0 = ap_const_lv1_0;
}

void scheduler::thread_setup_interfaces_restart_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        setup_interfaces_restart_V_we0 = ap_const_logic_1;
    } else {
        setup_interfaces_restart_V_we0 = ap_const_logic_0;
    }
}

void scheduler::thread_tmp_1_fu_370_p4() {
    tmp_1_fu_370_p4 = queue_head_ptr_1_reg_246.read().range(31, 2);
}

void scheduler::thread_tmp_3_fu_392_p1() {
    tmp_3_fu_392_p1 = i_load_reg_791.read().range(2-1, 0);
}

void scheduler::thread_tmp_4_fu_643_p1() {
    tmp_4_fu_643_p1 = esl_zext<64,2>(i1_reg_292.read());
}

void scheduler::thread_tmp_5_fu_648_p2() {
    tmp_5_fu_648_p2 = (!queue_head_ptr_4_reg_280.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(queue_head_ptr_4_reg_280.read() != ap_const_lv32_0);
}

void scheduler::thread_tmp_6_fu_660_p1() {
    tmp_6_fu_660_p1 = queue_head_ptr_4_reg_280.read().range(2-1, 0);
}

void scheduler::thread_tmp_fu_365_p1() {
    tmp_fu_365_p1 = esl_sext<64,32>(i_fu_72.read());
}

void scheduler::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_359_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_5_fu_386_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_631_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, demorgan_fu_654_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void scheduler::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_current_node_address0\" :  \"" << sched_interfaces_context_current_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_current_node_ce0\" :  \"" << sched_interfaces_context_current_node_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_current_node_q0\" :  \"" << sched_interfaces_context_current_node_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_next_node_address0\" :  \"" << sched_interfaces_context_next_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_next_node_ce0\" :  \"" << sched_interfaces_context_next_node_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_next_node_q0\" :  \"" << sched_interfaces_context_next_node_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_state_address0\" :  \"" << sched_interfaces_context_state_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_context_state_ce0\" :  \"" << sched_interfaces_context_state_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_context_state_q0\" :  \"" << sched_interfaces_context_state_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_schedule_V_address0\" :  \"" << sched_interfaces_schedule_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_schedule_V_ce0\" :  \"" << sched_interfaces_schedule_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sched_interfaces_schedule_V_q0\" :  \"" << sched_interfaces_schedule_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_address0\" :  \"" << sched_interfaces_ack_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_ce0\" :  \"" << sched_interfaces_ack_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_we0\" :  \"" << sched_interfaces_ack_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sched_interfaces_ack_V_d0\" :  \"" << sched_interfaces_ack_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_address0\" :  \"" << setup_interfaces_context_current_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_ce0\" :  \"" << setup_interfaces_context_current_node_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_we0\" :  \"" << setup_interfaces_context_current_node_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_current_node_d0\" :  \"" << setup_interfaces_context_current_node_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_address0\" :  \"" << setup_interfaces_context_next_node_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_ce0\" :  \"" << setup_interfaces_context_next_node_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_we0\" :  \"" << setup_interfaces_context_next_node_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_next_node_d0\" :  \"" << setup_interfaces_context_next_node_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_address0\" :  \"" << setup_interfaces_context_state_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_ce0\" :  \"" << setup_interfaces_context_state_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_we0\" :  \"" << setup_interfaces_context_state_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_context_state_d0\" :  \"" << setup_interfaces_context_state_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_address0\" :  \"" << setup_interfaces_restart_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_ce0\" :  \"" << setup_interfaces_restart_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_we0\" :  \"" << setup_interfaces_restart_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_restart_V_d0\" :  \"" << setup_interfaces_restart_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_core_halted_V_address0\" :  \"" << setup_interfaces_core_halted_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"setup_interfaces_core_halted_V_ce0\" :  \"" << setup_interfaces_core_halted_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"setup_interfaces_core_halted_V_q0\" :  \"" << setup_interfaces_core_halted_V_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


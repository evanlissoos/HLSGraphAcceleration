-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scheduler is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sched_interfaces_context_current_node_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_context_current_node_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_current_node_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_context_next_node_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_context_next_node_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_next_node_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_context_state_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_context_state_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_schedule_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_schedule_V_ce0 : OUT STD_LOGIC;
    sched_interfaces_schedule_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_ack_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_ack_V_ce0 : OUT STD_LOGIC;
    sched_interfaces_ack_V_we0 : OUT STD_LOGIC;
    sched_interfaces_ack_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_current_node_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_current_node_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_current_node_we0 : OUT STD_LOGIC;
    setup_interfaces_context_current_node_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_context_next_node_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_next_node_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_next_node_we0 : OUT STD_LOGIC;
    setup_interfaces_context_next_node_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_context_state_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_state_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_state_we0 : OUT STD_LOGIC;
    setup_interfaces_context_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_restart_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_restart_V_ce0 : OUT STD_LOGIC;
    setup_interfaces_restart_V_we0 : OUT STD_LOGIC;
    setup_interfaces_restart_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_core_halted_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_core_halted_V_ce0 : OUT STD_LOGIC;
    setup_interfaces_core_halted_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of scheduler is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scheduler,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.922000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1483,HLS_SYN_LUT=1053}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_load_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_801 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond_5_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_5_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal new_context_current_s_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_next_nod_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_state_2_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_637_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_929 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_934 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_context_current_1_fu_664_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_current_1_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal demorgan_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_context_next_nod_1_fu_678_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_next_nod_1_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_state_fu_692_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_state_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_2_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_2_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_1_reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_1_be_phi_fu_272_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal queue_head_ptr_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_3_phi_fu_261_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_3_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_1_be_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_4_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i1_reg_292 : STD_LOGIC_VECTOR (1 downto 0);
    signal queue_head_ptr_4_be_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_12_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_11_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_2_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_9_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_3_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_8_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_2_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_7_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_3_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_5_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_6_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_1_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_8_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_2_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_7_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_3_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_5_fu_541_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_6_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_1_fu_528_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_8_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_fu_515_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_370_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_392_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp2_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel2_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_10_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel4_fu_464_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel6_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_4_fu_490_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel8_fu_509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_4_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_660_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component scheduler_mux_42_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    scheduler_mux_42_bkb_U1 : component scheduler_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => queue_3_current_nod_fu_76,
        din2 => queue_3_current_nod_1_fu_80,
        din3 => queue_3_current_nod_2_fu_84,
        din4 => queue_3_current_nod_3_fu_88,
        din5 => tmp_6_fu_660_p1,
        dout => new_context_current_1_fu_664_p6);

    scheduler_mux_42_bkb_U2 : component scheduler_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => queue_3_next_node_2_fu_92,
        din2 => queue_3_next_node_3_fu_96,
        din3 => queue_3_next_node_6_fu_100,
        din4 => queue_3_next_node_8_fu_104,
        din5 => tmp_6_fu_660_p1,
        dout => new_context_next_nod_1_fu_678_p6);

    scheduler_mux_42_bkb_U3 : component scheduler_mux_42_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => queue_3_state_2_fu_108,
        din2 => queue_3_state_3_fu_112,
        din3 => queue_3_state_6_fu_116,
        din4 => queue_3_state_8_fu_120,
        din5 => tmp_6_fu_660_p1,
        dout => new_context_state_fu_692_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i1_reg_292 <= i_2_reg_929;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_359_p2 = ap_const_lv1_1))) then 
                i1_reg_292 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_reg_797 = ap_const_lv1_0))) then 
                i_fu_72 <= i_1_fu_621_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_631_p2)))) then 
                i_fu_72 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    queue_head_ptr_1_be_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_631_p2))) then 
                queue_head_ptr_1_be_reg_268 <= queue_head_ptr_4_reg_280;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_reg_797 = ap_const_lv1_0))) then 
                queue_head_ptr_1_be_reg_268 <= queue_head_ptr_3_phi_fu_261_p4;
            end if; 
        end if;
    end process;

    queue_head_ptr_1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                queue_head_ptr_1_reg_246 <= queue_head_ptr_1_be_phi_fu_272_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                queue_head_ptr_1_reg_246 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    queue_head_ptr_3_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = or_cond_5_fu_386_p2))) then 
                queue_head_ptr_3_reg_258 <= queue_head_ptr_1_reg_246;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_reg_797 = ap_const_lv1_0) and (or_cond_5_reg_814 = ap_const_lv1_1))) then 
                queue_head_ptr_3_reg_258 <= queue_head_ptr_fu_554_p2;
            end if; 
        end if;
    end process;

    queue_head_ptr_4_be_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = demorgan_fu_654_p2))) then 
                queue_head_ptr_4_be_reg_303 <= queue_head_ptr_4_reg_280;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                queue_head_ptr_4_be_reg_303 <= queue_head_ptr_2_reg_965;
            end if; 
        end if;
    end process;

    queue_head_ptr_4_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                queue_head_ptr_4_reg_280 <= queue_head_ptr_4_be_reg_303;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_359_p2 = ap_const_lv1_1))) then 
                queue_head_ptr_4_reg_280 <= queue_head_ptr_1_reg_246;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                exitcond1_reg_797 <= exitcond1_fu_359_p2;
                i_load_reg_791 <= i_fu_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_929 <= i_2_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = demorgan_fu_654_p2))) then
                new_context_current_1_reg_950 <= new_context_current_1_fu_664_p6;
                new_context_next_nod_1_reg_955 <= new_context_next_nod_1_fu_678_p6;
                new_context_state_reg_960 <= new_context_state_fu_692_p6;
                queue_head_ptr_2_reg_965 <= queue_head_ptr_2_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                new_context_current_s_reg_902 <= sched_interfaces_context_current_node_q0;
                new_context_next_nod_reg_910 <= sched_interfaces_context_next_node_q0;
                new_context_state_2_reg_918 <= sched_interfaces_context_state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                or_cond_5_reg_814 <= or_cond_5_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_reg_797 = ap_const_lv1_0) and (or_cond_5_reg_814 = ap_const_lv1_1))) then
                queue_3_current_nod_1_fu_80 <= queue_3_current_nod_11_fu_451_p3;
                queue_3_current_nod_2_fu_84 <= queue_3_current_nod_9_fu_438_p3;
                queue_3_current_nod_3_fu_88 <= queue_3_current_nod_8_fu_425_p3;
                queue_3_current_nod_fu_76 <= queue_3_current_nod_12_fu_458_p3;
                queue_3_next_node_2_fu_92 <= queue_3_next_node_7_fu_503_p3;
                queue_3_next_node_3_fu_96 <= queue_3_next_node_5_fu_496_p3;
                queue_3_next_node_6_fu_100 <= queue_3_next_node_1_fu_483_p3;
                queue_3_next_node_8_fu_104 <= queue_3_next_node_fu_470_p3;
                queue_3_state_2_fu_108 <= queue_3_state_7_fu_548_p3;
                queue_3_state_3_fu_112 <= queue_3_state_5_fu_541_p3;
                queue_3_state_6_fu_116 <= queue_3_state_1_fu_528_p3;
                queue_3_state_8_fu_120 <= queue_3_state_fu_515_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_631_p2))) then
                    tmp_4_reg_934(1 downto 0) <= tmp_4_fu_643_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_359_p2 = ap_const_lv1_0))) then
                tmp_reg_801 <= tmp_fu_365_p1;
            end if;
        end if;
    end process;
    tmp_4_reg_934(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_359_p2, or_cond_5_fu_386_p2, ap_CS_fsm_state3, ap_CS_fsm_state7, exitcond_fu_631_p2, ap_CS_fsm_state8, demorgan_fu_654_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_359_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = or_cond_5_fu_386_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_631_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = demorgan_fu_654_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_done <= ap_const_logic_0;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_const_logic_0;
    demorgan_fu_654_p2 <= (setup_interfaces_core_halted_V_q0 and tmp_5_fu_648_p2);
    exitcond1_fu_359_p2 <= "1" when (i_fu_72 = ap_const_lv32_2) else "0";
    exitcond_fu_631_p2 <= "1" when (i1_reg_292 = ap_const_lv2_2) else "0";
    i_1_fu_621_p2 <= std_logic_vector(unsigned(i_load_reg_791) + unsigned(ap_const_lv32_1));
    i_2_fu_637_p2 <= std_logic_vector(unsigned(i1_reg_292) + unsigned(ap_const_lv2_1));
    icmp_fu_380_p2 <= "1" when (tmp_1_fu_370_p4 = ap_const_lv30_0) else "0";
    newSel1_fu_522_p3 <= 
        new_context_state_2_reg_918 when (sel_tmp_fu_395_p2(0) = '1') else 
        queue_3_state_6_fu_116;
    newSel2_fu_432_p3 <= 
        new_context_current_s_reg_902 when (sel_tmp_fu_395_p2(0) = '1') else 
        queue_3_current_nod_2_fu_84;
    newSel4_fu_464_p3 <= 
        queue_3_next_node_8_fu_104 when (sel_tmp_fu_395_p2(0) = '1') else 
        new_context_next_nod_reg_910;
    newSel6_fu_477_p3 <= 
        new_context_next_nod_reg_910 when (sel_tmp_fu_395_p2(0) = '1') else 
        queue_3_next_node_6_fu_100;
    newSel8_fu_509_p3 <= 
        queue_3_state_8_fu_120 when (sel_tmp_fu_395_p2(0) = '1') else 
        new_context_state_2_reg_918;
    newSel_fu_419_p3 <= 
        queue_3_current_nod_3_fu_88 when (sel_tmp_fu_395_p2(0) = '1') else 
        new_context_current_s_reg_902;
    or_cond_5_fu_386_p2 <= (sched_interfaces_schedule_V_q0 and icmp_fu_380_p2);
    or_cond_fu_413_p2 <= (sel_tmp2_fu_407_p2 or sel_tmp1_fu_401_p2);
    queue_3_current_nod_10_fu_445_p3 <= 
        new_context_current_s_reg_902 when (sel_tmp1_fu_401_p2(0) = '1') else 
        queue_3_current_nod_1_fu_80;
    queue_3_current_nod_11_fu_451_p3 <= 
        queue_3_current_nod_1_fu_80 when (sel_tmp2_fu_407_p2(0) = '1') else 
        queue_3_current_nod_10_fu_445_p3;
    queue_3_current_nod_12_fu_458_p3 <= 
        new_context_current_s_reg_902 when (sel_tmp2_fu_407_p2(0) = '1') else 
        queue_3_current_nod_fu_76;
    queue_3_current_nod_8_fu_425_p3 <= 
        queue_3_current_nod_3_fu_88 when (or_cond_fu_413_p2(0) = '1') else 
        newSel_fu_419_p3;
    queue_3_current_nod_9_fu_438_p3 <= 
        queue_3_current_nod_2_fu_84 when (or_cond_fu_413_p2(0) = '1') else 
        newSel2_fu_432_p3;
    queue_3_next_node_1_fu_483_p3 <= 
        queue_3_next_node_6_fu_100 when (or_cond_fu_413_p2(0) = '1') else 
        newSel6_fu_477_p3;
    queue_3_next_node_4_fu_490_p3 <= 
        new_context_next_nod_reg_910 when (sel_tmp1_fu_401_p2(0) = '1') else 
        queue_3_next_node_3_fu_96;
    queue_3_next_node_5_fu_496_p3 <= 
        queue_3_next_node_3_fu_96 when (sel_tmp2_fu_407_p2(0) = '1') else 
        queue_3_next_node_4_fu_490_p3;
    queue_3_next_node_7_fu_503_p3 <= 
        new_context_next_nod_reg_910 when (sel_tmp2_fu_407_p2(0) = '1') else 
        queue_3_next_node_2_fu_92;
    queue_3_next_node_fu_470_p3 <= 
        queue_3_next_node_8_fu_104 when (or_cond_fu_413_p2(0) = '1') else 
        newSel4_fu_464_p3;
    queue_3_state_1_fu_528_p3 <= 
        queue_3_state_6_fu_116 when (or_cond_fu_413_p2(0) = '1') else 
        newSel1_fu_522_p3;
    queue_3_state_4_fu_535_p3 <= 
        new_context_state_2_reg_918 when (sel_tmp1_fu_401_p2(0) = '1') else 
        queue_3_state_3_fu_112;
    queue_3_state_5_fu_541_p3 <= 
        queue_3_state_3_fu_112 when (sel_tmp2_fu_407_p2(0) = '1') else 
        queue_3_state_4_fu_535_p3;
    queue_3_state_7_fu_548_p3 <= 
        new_context_state_2_reg_918 when (sel_tmp2_fu_407_p2(0) = '1') else 
        queue_3_state_2_fu_108;
    queue_3_state_fu_515_p3 <= 
        queue_3_state_8_fu_120 when (or_cond_fu_413_p2(0) = '1') else 
        newSel8_fu_509_p3;

    queue_head_ptr_1_be_phi_fu_272_p4_assign_proc : process(exitcond1_reg_797, ap_CS_fsm_state6, queue_head_ptr_3_phi_fu_261_p4, queue_head_ptr_1_be_reg_268)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_reg_797 = ap_const_lv1_0))) then 
            queue_head_ptr_1_be_phi_fu_272_p4 <= queue_head_ptr_3_phi_fu_261_p4;
        else 
            queue_head_ptr_1_be_phi_fu_272_p4 <= queue_head_ptr_1_be_reg_268;
        end if; 
    end process;

    queue_head_ptr_2_fu_706_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(queue_head_ptr_4_reg_280));

    queue_head_ptr_3_phi_fu_261_p4_assign_proc : process(exitcond1_reg_797, or_cond_5_reg_814, ap_CS_fsm_state6, queue_head_ptr_fu_554_p2, queue_head_ptr_3_reg_258)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_reg_797 = ap_const_lv1_0) and (or_cond_5_reg_814 = ap_const_lv1_1))) then 
            queue_head_ptr_3_phi_fu_261_p4 <= queue_head_ptr_fu_554_p2;
        else 
            queue_head_ptr_3_phi_fu_261_p4 <= queue_head_ptr_3_reg_258;
        end if; 
    end process;

    queue_head_ptr_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(queue_head_ptr_1_reg_246));
    sched_interfaces_ack_V_address0 <= tmp_reg_801(1 - 1 downto 0);

    sched_interfaces_ack_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sched_interfaces_ack_V_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_ack_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_ack_V_d0 <= ap_const_lv1_0;

    sched_interfaces_ack_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sched_interfaces_ack_V_we0 <= ap_const_logic_1;
        else 
            sched_interfaces_ack_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_current_node_address0 <= tmp_reg_801(1 - 1 downto 0);

    sched_interfaces_context_current_node_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_current_node_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_next_node_address0 <= tmp_reg_801(1 - 1 downto 0);

    sched_interfaces_context_next_node_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_next_node_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_state_address0 <= tmp_reg_801(1 - 1 downto 0);

    sched_interfaces_context_state_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_state_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_schedule_V_address0 <= tmp_fu_365_p1(1 - 1 downto 0);

    sched_interfaces_schedule_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sched_interfaces_schedule_V_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_schedule_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_401_p2 <= "1" when (tmp_3_fu_392_p1 = ap_const_lv2_1) else "0";
    sel_tmp2_fu_407_p2 <= "1" when (tmp_3_fu_392_p1 = ap_const_lv2_0) else "0";
    sel_tmp_fu_395_p2 <= "1" when (tmp_3_fu_392_p1 = ap_const_lv2_2) else "0";
    setup_interfaces_context_current_node_address0 <= tmp_4_reg_934(1 - 1 downto 0);

    setup_interfaces_context_current_node_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_context_current_node_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_current_node_d0 <= new_context_current_1_reg_950;

    setup_interfaces_context_current_node_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_context_current_node_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_current_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_next_node_address0 <= tmp_4_reg_934(1 - 1 downto 0);

    setup_interfaces_context_next_node_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_context_next_node_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_next_node_d0 <= new_context_next_nod_1_reg_955;

    setup_interfaces_context_next_node_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_context_next_node_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_next_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_state_address0 <= tmp_4_reg_934(1 - 1 downto 0);

    setup_interfaces_context_state_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_context_state_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_state_d0 <= new_context_state_reg_960;

    setup_interfaces_context_state_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_context_state_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_core_halted_V_address0 <= tmp_4_fu_643_p1(1 - 1 downto 0);

    setup_interfaces_core_halted_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            setup_interfaces_core_halted_V_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_core_halted_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_restart_V_address0 <= tmp_4_reg_934(1 - 1 downto 0);

    setup_interfaces_restart_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_restart_V_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_restart_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_restart_V_d0 <= ap_const_lv1_0;

    setup_interfaces_restart_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_restart_V_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_restart_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_370_p4 <= queue_head_ptr_1_reg_246(31 downto 2);
    tmp_3_fu_392_p1 <= i_load_reg_791(2 - 1 downto 0);
    tmp_4_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_292),64));
    tmp_5_fu_648_p2 <= "0" when (queue_head_ptr_4_reg_280 = ap_const_lv32_0) else "1";
    tmp_6_fu_660_p1 <= queue_head_ptr_4_reg_280(2 - 1 downto 0);
        tmp_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_fu_72),64));

end behav;

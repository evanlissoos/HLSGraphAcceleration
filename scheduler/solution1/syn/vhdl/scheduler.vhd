-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scheduler is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sched_interfaces_context_current_node_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sched_interfaces_context_current_node_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_current_node_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_context_next_node_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sched_interfaces_context_next_node_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_next_node_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_context_state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sched_interfaces_context_state_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_schedule_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sched_interfaces_schedule_V_ce0 : OUT STD_LOGIC;
    sched_interfaces_schedule_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_ack_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sched_interfaces_ack_V_ce0 : OUT STD_LOGIC;
    sched_interfaces_ack_V_we0 : OUT STD_LOGIC;
    sched_interfaces_ack_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_current_node_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    setup_interfaces_context_current_node_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_current_node_we0 : OUT STD_LOGIC;
    setup_interfaces_context_current_node_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_context_next_node_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    setup_interfaces_context_next_node_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_next_node_we0 : OUT STD_LOGIC;
    setup_interfaces_context_next_node_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_context_state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    setup_interfaces_context_state_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_state_we0 : OUT STD_LOGIC;
    setup_interfaces_context_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_restart_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    setup_interfaces_restart_V_ce0 : OUT STD_LOGIC;
    setup_interfaces_restart_V_we0 : OUT STD_LOGIC;
    setup_interfaces_restart_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_core_halted_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    setup_interfaces_core_halted_V_ce0 : OUT STD_LOGIC;
    setup_interfaces_core_halted_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    finished : OUT STD_LOGIC_VECTOR (31 downto 0);
    finished_ap_vld : OUT STD_LOGIC );
end;


architecture behav of scheduler is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scheduler,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.280000,HLS_SYN_LAT=262402,HLS_SYN_TPT=none,HLS_SYN_MEM=27,HLS_SYN_DSP=0,HLS_SYN_FF=829,HLS_SYN_LUT=535}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal queue_head_ptr_load_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_431_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_692 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_697 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal new_context_current_s_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal new_context_next_nod_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_state_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_468_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_reg_760 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ult_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_11_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal match_found_1_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_1_fu_605_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_809 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_5_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_814 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal halted_flag_1_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal halted_flag_1_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal demorgan_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal queue_head_ptr_1_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_1_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_current_node_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_current_1_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal queue_next_node_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_next_nod_1_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_state_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_state_1_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_current_node_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal history_current_node_ce0 : STD_LOGIC;
    signal history_current_node_we0 : STD_LOGIC;
    signal history_current_node_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_next_node_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal history_next_node_ce0 : STD_LOGIC;
    signal history_next_node_we0 : STD_LOGIC;
    signal history_next_node_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_state_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal history_state_ce0 : STD_LOGIC;
    signal history_state_we0 : STD_LOGIC;
    signal history_state_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_current_node_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal queue_current_node_ce0 : STD_LOGIC;
    signal queue_current_node_we0 : STD_LOGIC;
    signal queue_next_node_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal queue_next_node_ce0 : STD_LOGIC;
    signal queue_next_node_we0 : STD_LOGIC;
    signal queue_state_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal queue_state_ce0 : STD_LOGIC;
    signal queue_state_we0 : STD_LOGIC;
    signal i_reg_349 : STD_LOGIC_VECTOR (5 downto 0);
    signal match_found_phi_fu_364_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal match_found_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_reg_372 : STD_LOGIC_VECTOR (12 downto 0);
    signal halted_flag_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i1_reg_395 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal queue_head_ptr_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_3_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_head_ptr_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_head_ptr_1_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_2_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev4_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_not_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal match_found_0_mux_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_580_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_demorgan_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component scheduler_historybkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scheduler_queue_ceOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    history_current_node_U : component scheduler_historybkb
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => history_current_node_address0,
        ce0 => history_current_node_ce0,
        we0 => history_current_node_we0,
        d0 => new_context_current_s_reg_736,
        q0 => history_current_node_q0);

    history_next_node_U : component scheduler_historybkb
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => history_next_node_address0,
        ce0 => history_next_node_ce0,
        we0 => history_next_node_we0,
        d0 => new_context_next_nod_reg_743,
        q0 => history_next_node_q0);

    history_state_U : component scheduler_historybkb
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => history_state_address0,
        ce0 => history_state_ce0,
        we0 => history_state_we0,
        d0 => new_context_state_reg_750,
        q0 => history_state_q0);

    queue_current_node_U : component scheduler_queue_ceOg
    generic map (
        DataWidth => 32,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_current_node_address0,
        ce0 => queue_current_node_ce0,
        we0 => queue_current_node_we0,
        d0 => new_context_current_s_reg_736,
        q0 => queue_current_node_q0);

    queue_next_node_U : component scheduler_queue_ceOg
    generic map (
        DataWidth => 32,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_next_node_address0,
        ce0 => queue_next_node_ce0,
        we0 => queue_next_node_we0,
        d0 => new_context_next_nod_reg_743,
        q0 => queue_next_node_q0);

    queue_state_U : component scheduler_queue_ceOg
    generic map (
        DataWidth => 32,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_state_address0,
        ce0 => queue_state_ce0,
        we0 => queue_state_we0,
        d0 => new_context_state_reg_750,
        q0 => queue_state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    halted_flag_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                halted_flag_reg_383 <= halted_flag_1_reg_827;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_1))) then 
                halted_flag_reg_383 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    history_head_ptr_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
                history_head_ptr_fu_80 <= history_head_ptr_1_fu_505_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                history_head_ptr_fu_80 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i1_reg_395 <= i_1_reg_809;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_1))) then 
                i1_reg_395 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((ap_const_lv1_0 = or_cond_reg_717) or (ap_const_lv1_1 = exitcond2_fu_462_p2)))) then 
                i_reg_349 <= i_2_reg_692;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_349 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_372 <= j_1_reg_760;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_372 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    match_found_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                match_found_reg_360 <= match_found_1_fu_593_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                match_found_reg_360 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    queue_head_ptr_2_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = demorgan_reg_832))) then 
                queue_head_ptr_2_fu_108 <= queue_head_ptr_1_reg_836;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_1))) then 
                queue_head_ptr_2_fu_108 <= queue_head_ptr_fu_76;
            end if; 
        end if;
    end process;

    queue_head_ptr_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
                queue_head_ptr_fu_76 <= queue_head_ptr_3_fu_500_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                queue_head_ptr_fu_76 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                demorgan_reg_832 <= demorgan_fu_645_p2;
                halted_flag_1_reg_827 <= halted_flag_1_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_1_reg_809 <= i_1_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_692 <= i_2_fu_431_p2;
                queue_head_ptr_load_reg_682 <= queue_head_ptr_fu_76;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1))) then
                j_1_reg_760 <= j_1_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                new_context_current_1_reg_856 <= queue_current_node_q0;
                new_context_next_nod_1_reg_861 <= queue_next_node_q0;
                new_context_state_1_reg_866 <= queue_state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                new_context_current_s_reg_736 <= sched_interfaces_context_current_node_q0;
                new_context_next_nod_reg_743 <= sched_interfaces_context_next_node_q0;
                new_context_state_reg_750 <= sched_interfaces_context_state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                or_cond_reg_717 <= or_cond_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = demorgan_fu_645_p2))) then
                queue_head_ptr_1_reg_836 <= queue_head_ptr_1_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_10_reg_785 <= tmp_10_fu_521_p2;
                tmp_11_reg_791 <= tmp_11_fu_526_p2;
                tmp_12_reg_796 <= tmp_12_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_fu_599_p2))) then
                    tmp_5_reg_814(5 downto 0) <= tmp_5_fu_611_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_0))) then
                    tmp_reg_697(5 downto 0) <= tmp_fu_437_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond2_fu_462_p2))) then
                ult_reg_765 <= ult_fu_474_p2;
            end if;
        end if;
    end process;
    tmp_reg_697(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_5_reg_814(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_425_p2, or_cond_fu_452_p2, or_cond_reg_717, ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond2_fu_462_p2, ap_CS_fsm_state9, exitcond_fu_599_p2, ap_CS_fsm_state10, demorgan_fu_645_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_425_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = or_cond_fu_452_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((ap_const_lv1_0 = or_cond_reg_717) or (ap_const_lv1_1 = exitcond2_fu_462_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_fu_599_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = demorgan_fu_645_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_599_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_fu_599_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_599_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_fu_599_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_541_p2 <= (rev4_fu_536_p2 or match_found_reg_360);
    demorgan_fu_645_p2 <= (setup_interfaces_core_halted_V_q0 and tmp_7_fu_639_p2);
    exitcond1_fu_425_p2 <= "1" when (i_reg_349 = ap_const_lv6_20) else "0";
    exitcond2_fu_462_p2 <= "1" when (j_reg_372 = ap_const_lv13_1000) else "0";
    exitcond_fu_599_p2 <= "1" when (i1_reg_395 = ap_const_lv6_20) else "0";
    finished <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_622_p2),32));

    finished_ap_vld_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_599_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_fu_599_p2))) then 
            finished_ap_vld <= ap_const_logic_1;
        else 
            finished_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    halted_flag_1_fu_633_p2 <= (setup_interfaces_core_halted_V_q0 and halted_flag_reg_383);

    history_current_node_address0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4, tmp_8_fu_480_p1, tmp_6_fu_493_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1))) then
            if (((ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
                history_current_node_address0 <= tmp_6_fu_493_p1(12 - 1 downto 0);
            elsif ((ap_const_lv1_0 = exitcond2_fu_462_p2)) then 
                history_current_node_address0 <= tmp_8_fu_480_p1(12 - 1 downto 0);
            else 
                history_current_node_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            history_current_node_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    history_current_node_ce0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond2_fu_462_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4)))) then 
            history_current_node_ce0 <= ap_const_logic_1;
        else 
            history_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    history_current_node_we0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
            history_current_node_we0 <= ap_const_logic_1;
        else 
            history_current_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    history_head_ptr_1_fu_505_p2 <= std_logic_vector(unsigned(history_head_ptr_fu_80) + unsigned(ap_const_lv32_1));

    history_next_node_address0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4, tmp_8_fu_480_p1, tmp_6_fu_493_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1))) then
            if (((ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
                history_next_node_address0 <= tmp_6_fu_493_p1(12 - 1 downto 0);
            elsif ((ap_const_lv1_0 = exitcond2_fu_462_p2)) then 
                history_next_node_address0 <= tmp_8_fu_480_p1(12 - 1 downto 0);
            else 
                history_next_node_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            history_next_node_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    history_next_node_ce0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond2_fu_462_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4)))) then 
            history_next_node_ce0 <= ap_const_logic_1;
        else 
            history_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    history_next_node_we0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
            history_next_node_we0 <= ap_const_logic_1;
        else 
            history_next_node_we0 <= ap_const_logic_0;
        end if; 
    end process;


    history_state_address0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4, tmp_8_fu_480_p1, tmp_6_fu_493_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1))) then
            if (((ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
                history_state_address0 <= tmp_6_fu_493_p1(12 - 1 downto 0);
            elsif ((ap_const_lv1_0 = exitcond2_fu_462_p2)) then 
                history_state_address0 <= tmp_8_fu_480_p1(12 - 1 downto 0);
            else 
                history_state_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            history_state_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    history_state_ce0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond2_fu_462_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4)))) then 
            history_state_ce0 <= ap_const_logic_1;
        else 
            history_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    history_state_we0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
            history_state_we0 <= ap_const_logic_1;
        else 
            history_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_605_p2 <= std_logic_vector(unsigned(i1_reg_395) + unsigned(ap_const_lv6_1));
    i_2_fu_431_p2 <= std_logic_vector(unsigned(i_reg_349) + unsigned(ap_const_lv6_1));
    j_1_fu_468_p2 <= std_logic_vector(unsigned(j_reg_372) + unsigned(ap_const_lv13_1));
    j_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_372),32));
    match_found_0_mux_fu_553_p2 <= (match_found_reg_360 or not_not_fu_547_p2);
    match_found_1_fu_593_p2 <= (sel_tmp4_fu_580_p3 and sel_tmp7_demorgan_fu_588_p2);
    match_found_phi_fu_364_p4 <= match_found_reg_360;
    not_not_fu_547_p2 <= (rev4_fu_536_p2 xor ap_const_lv1_1);
    or_cond_fu_452_p2 <= (sched_interfaces_schedule_V_q0 and tmp_1_fu_447_p2);

    queue_current_node_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, tmp_s_fu_487_p1, tmp_9_fu_657_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            queue_current_node_address0 <= tmp_9_fu_657_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            queue_current_node_address0 <= tmp_s_fu_487_p1(9 - 1 downto 0);
        else 
            queue_current_node_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    queue_current_node_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            queue_current_node_ce0 <= ap_const_logic_1;
        else 
            queue_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_current_node_we0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
            queue_current_node_we0 <= ap_const_logic_1;
        else 
            queue_current_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    queue_head_ptr_1_fu_651_p2 <= std_logic_vector(unsigned(queue_head_ptr_2_fu_108) + unsigned(ap_const_lv32_FFFFFFFF));
    queue_head_ptr_3_fu_500_p2 <= std_logic_vector(unsigned(queue_head_ptr_load_reg_682) + unsigned(ap_const_lv32_1));

    queue_next_node_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, tmp_s_fu_487_p1, tmp_9_fu_657_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            queue_next_node_address0 <= tmp_9_fu_657_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            queue_next_node_address0 <= tmp_s_fu_487_p1(9 - 1 downto 0);
        else 
            queue_next_node_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    queue_next_node_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            queue_next_node_ce0 <= ap_const_logic_1;
        else 
            queue_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_next_node_we0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
            queue_next_node_we0 <= ap_const_logic_1;
        else 
            queue_next_node_we0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_state_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, tmp_s_fu_487_p1, tmp_9_fu_657_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            queue_state_address0 <= tmp_9_fu_657_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            queue_state_address0 <= tmp_s_fu_487_p1(9 - 1 downto 0);
        else 
            queue_state_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    queue_state_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            queue_state_ce0 <= ap_const_logic_1;
        else 
            queue_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_state_we0_assign_proc : process(or_cond_reg_717, ap_CS_fsm_state6, exitcond2_fu_462_p2, match_found_phi_fu_364_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_reg_717 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_462_p2) and (ap_const_lv1_0 = match_found_phi_fu_364_p4))) then 
            queue_state_we0 <= ap_const_logic_1;
        else 
            queue_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rev4_fu_536_p2 <= (ult_reg_765 xor ap_const_lv1_1);
    sched_interfaces_ack_V_address0 <= tmp_reg_697(5 - 1 downto 0);

    sched_interfaces_ack_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sched_interfaces_ack_V_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_ack_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_ack_V_d0 <= ap_const_lv1_0;

    sched_interfaces_ack_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sched_interfaces_ack_V_we0 <= ap_const_logic_1;
        else 
            sched_interfaces_ack_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_current_node_address0 <= tmp_reg_697(5 - 1 downto 0);

    sched_interfaces_context_current_node_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_current_node_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_next_node_address0 <= tmp_reg_697(5 - 1 downto 0);

    sched_interfaces_context_next_node_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_next_node_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_state_address0 <= tmp_reg_697(5 - 1 downto 0);

    sched_interfaces_context_state_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_state_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_schedule_V_address0 <= tmp_fu_437_p1(5 - 1 downto 0);

    sched_interfaces_schedule_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sched_interfaces_schedule_V_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_schedule_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp3_fu_574_p2 <= (tmp1_fu_570_p2 and tmp9_fu_565_p2);
    sel_tmp4_fu_580_p3 <= 
        match_found_0_mux_fu_553_p2 when (brmerge_fu_541_p2(0) = '1') else 
        sel_tmp3_fu_574_p2;
    sel_tmp7_demorgan_fu_588_p2 <= (brmerge_fu_541_p2 or tmp_10_reg_785);
    sel_tmp_fu_559_p2 <= (brmerge_fu_541_p2 xor ap_const_lv1_1);
    setup_interfaces_context_current_node_address0 <= tmp_5_reg_814(5 - 1 downto 0);

    setup_interfaces_context_current_node_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            setup_interfaces_context_current_node_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_current_node_d0 <= new_context_current_1_reg_856;

    setup_interfaces_context_current_node_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            setup_interfaces_context_current_node_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_current_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_next_node_address0 <= tmp_5_reg_814(5 - 1 downto 0);

    setup_interfaces_context_next_node_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            setup_interfaces_context_next_node_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_next_node_d0 <= new_context_next_nod_1_reg_861;

    setup_interfaces_context_next_node_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            setup_interfaces_context_next_node_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_next_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_state_address0 <= tmp_5_reg_814(5 - 1 downto 0);

    setup_interfaces_context_state_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            setup_interfaces_context_state_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_state_d0 <= new_context_state_1_reg_866;

    setup_interfaces_context_state_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            setup_interfaces_context_state_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_core_halted_V_address0 <= tmp_5_fu_611_p1(5 - 1 downto 0);

    setup_interfaces_core_halted_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_core_halted_V_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_core_halted_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_restart_V_address0 <= tmp_5_reg_814(5 - 1 downto 0);

    setup_interfaces_restart_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            setup_interfaces_restart_V_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_restart_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_restart_V_d0 <= ap_const_lv1_0;

    setup_interfaces_restart_V_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            setup_interfaces_restart_V_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_restart_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_570_p2 <= (tmp_11_reg_791 and tmp_12_reg_796);
    tmp9_fu_565_p2 <= (tmp_10_reg_785 and sel_tmp_fu_559_p2);
    tmp_10_fu_521_p2 <= "1" when (history_current_node_q0 = new_context_current_s_reg_736) else "0";
    tmp_11_fu_526_p2 <= "1" when (history_next_node_q0 = new_context_next_nod_reg_743) else "0";
    tmp_12_fu_531_p2 <= "1" when (history_state_q0 = new_context_state_reg_750) else "0";
    tmp_1_fu_447_p2 <= "1" when (unsigned(queue_head_ptr_load_reg_682) < unsigned(ap_const_lv32_140)) else "0";
    tmp_2_fu_616_p2 <= "1" when (queue_head_ptr_2_fu_108 = ap_const_lv32_0) else "0";
    tmp_3_fu_622_p2 <= (halted_flag_reg_383 and tmp_2_fu_616_p2);
    tmp_5_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_395),64));
    tmp_6_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(history_head_ptr_fu_80),64));
    tmp_7_fu_639_p2 <= "0" when (queue_head_ptr_2_fu_108 = ap_const_lv32_0) else "1";
    tmp_8_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_372),64));
    tmp_9_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(queue_head_ptr_1_fu_651_p2),64));
    tmp_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_349),64));
    tmp_s_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(queue_head_ptr_load_reg_682),64));
    ult_fu_474_p2 <= "1" when (unsigned(j_cast_fu_458_p1) < unsigned(history_head_ptr_fu_80)) else "0";
end behav;

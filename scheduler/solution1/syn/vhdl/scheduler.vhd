-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scheduler is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sched_interfaces_context_current_node_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_context_current_node_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_current_node_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_context_next_node_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_context_next_node_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_next_node_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_context_state_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_context_state_ce0 : OUT STD_LOGIC;
    sched_interfaces_context_state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sched_interfaces_schedule_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_schedule_V_ce0 : OUT STD_LOGIC;
    sched_interfaces_schedule_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_ack_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    sched_interfaces_ack_V_ce0 : OUT STD_LOGIC;
    sched_interfaces_ack_V_we0 : OUT STD_LOGIC;
    sched_interfaces_ack_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_current_node_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_current_node_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_current_node_we0 : OUT STD_LOGIC;
    setup_interfaces_context_current_node_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_context_next_node_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_next_node_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_next_node_we0 : OUT STD_LOGIC;
    setup_interfaces_context_next_node_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_context_state_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_context_state_ce0 : OUT STD_LOGIC;
    setup_interfaces_context_state_we0 : OUT STD_LOGIC;
    setup_interfaces_context_state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setup_interfaces_restart_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_restart_V_ce0 : OUT STD_LOGIC;
    setup_interfaces_restart_V_we0 : OUT STD_LOGIC;
    setup_interfaces_restart_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_core_halted_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    setup_interfaces_core_halted_V_ce0 : OUT STD_LOGIC;
    setup_interfaces_core_halted_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    finished : OUT STD_LOGIC_VECTOR (31 downto 0);
    finished_ap_vld : OUT STD_LOGIC );
end;


architecture behav of scheduler is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scheduler,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.280000,HLS_SYN_LAT=4114,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1420,HLS_SYN_LUT=1223}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal queue_head_ptr_load_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_459_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_1084 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1089 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_5_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_5_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal new_context_current_s_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal new_context_next_nod_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_state_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_506_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_1161 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ult_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_10_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal match_found_1_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_1_fu_880_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_1210 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_5_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1215 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal halted_flag_1_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal halted_flag_1_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal demorgan_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal queue_head_ptr_1_fu_930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_1_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_current_1_fu_942_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_current_1_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_next_nod_1_fu_956_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_next_nod_1_reg_1247 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_state_1_fu_970_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_context_state_1_reg_1252 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_current_node_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal history_current_node_ce0 : STD_LOGIC;
    signal history_current_node_we0 : STD_LOGIC;
    signal history_current_node_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_next_node_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal history_next_node_ce0 : STD_LOGIC;
    signal history_next_node_we0 : STD_LOGIC;
    signal history_next_node_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_state_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal history_state_ce0 : STD_LOGIC;
    signal history_state_we0 : STD_LOGIC;
    signal history_state_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_341 : STD_LOGIC_VECTOR (1 downto 0);
    signal match_found_phi_fu_356_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal match_found_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_reg_364 : STD_LOGIC_VECTOR (10 downto 0);
    signal halted_flag_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i1_reg_387 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal queue_head_ptr_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_3_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_head_ptr_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal history_head_ptr_1_fu_720_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_12_fu_597_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_1_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_11_fu_589_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_2_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_9_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_3_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_8_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_2_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_7_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_3_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_5_fu_641_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_6_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_1_fu_626_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_8_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_fu_611_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_2_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_7_fu_701_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_3_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_5_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_6_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_1_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_8_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_head_ptr_2_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_475_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_525_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp5_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_552_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel2_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_current_nod_10_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel4_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel6_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_next_node_4_fu_634_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel8_fu_656_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_671_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal queue_3_state_4_fu_686_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_not_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal match_found_0_mux_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_855_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_demorgan_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_926_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal queue_head_ptr_1_t_fu_936_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component scheduler_mux_42_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scheduler_historybkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    history_current_node_U : component scheduler_historybkb
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => history_current_node_address0,
        ce0 => history_current_node_ce0,
        we0 => history_current_node_we0,
        d0 => new_context_current_s_reg_1128,
        q0 => history_current_node_q0);

    history_next_node_U : component scheduler_historybkb
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => history_next_node_address0,
        ce0 => history_next_node_ce0,
        we0 => history_next_node_we0,
        d0 => new_context_next_nod_reg_1138,
        q0 => history_next_node_q0);

    history_state_U : component scheduler_historybkb
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => history_state_address0,
        ce0 => history_state_ce0,
        we0 => history_state_we0,
        d0 => new_context_state_reg_1148,
        q0 => history_state_q0);

    scheduler_mux_42_eOg_U1 : component scheduler_mux_42_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => queue_3_current_nod_fu_94,
        din2 => queue_3_current_nod_1_fu_98,
        din3 => queue_3_current_nod_2_fu_102,
        din4 => queue_3_current_nod_3_fu_106,
        din5 => queue_head_ptr_1_t_fu_936_p2,
        dout => new_context_current_1_fu_942_p6);

    scheduler_mux_42_eOg_U2 : component scheduler_mux_42_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => queue_3_next_node_2_fu_110,
        din2 => queue_3_next_node_3_fu_114,
        din3 => queue_3_next_node_6_fu_118,
        din4 => queue_3_next_node_8_fu_122,
        din5 => queue_head_ptr_1_t_fu_936_p2,
        dout => new_context_next_nod_1_fu_956_p6);

    scheduler_mux_42_eOg_U3 : component scheduler_mux_42_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => queue_3_state_2_fu_126,
        din2 => queue_3_state_3_fu_130,
        din3 => queue_3_state_6_fu_134,
        din4 => queue_3_state_8_fu_138,
        din5 => queue_head_ptr_1_t_fu_936_p2,
        dout => new_context_state_1_fu_970_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    halted_flag_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                halted_flag_reg_375 <= halted_flag_1_reg_1228;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_453_p2 = ap_const_lv1_1))) then 
                halted_flag_reg_375 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    history_head_ptr_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then 
                history_head_ptr_fu_90 <= history_head_ptr_1_fu_720_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                history_head_ptr_fu_90 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i1_reg_387 <= i_1_reg_1210;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_453_p2 = ap_const_lv1_1))) then 
                i1_reg_387 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((ap_const_lv1_0 = or_cond_5_reg_1109) or (ap_const_lv1_1 = exitcond2_fu_500_p2)))) then 
                i_reg_341 <= i_2_reg_1084;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_341 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_364 <= j_1_reg_1161;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_364 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    match_found_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                match_found_reg_352 <= match_found_1_fu_868_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                match_found_reg_352 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    queue_head_ptr_2_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = demorgan_reg_1233))) then 
                queue_head_ptr_2_fu_154 <= queue_head_ptr_1_reg_1237;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_453_p2 = ap_const_lv1_1))) then 
                queue_head_ptr_2_fu_154 <= queue_head_ptr_fu_86;
            end if; 
        end if;
    end process;

    queue_head_ptr_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then 
                queue_head_ptr_fu_86 <= queue_head_ptr_3_fu_715_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                queue_head_ptr_fu_86 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                demorgan_reg_1233 <= demorgan_fu_920_p2;
                halted_flag_1_reg_1228 <= halted_flag_1_fu_908_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_1_reg_1210 <= i_1_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_1084 <= i_2_fu_459_p2;
                queue_head_ptr_load_reg_1074 <= queue_head_ptr_fu_86;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1))) then
                j_1_reg_1161 <= j_1_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = demorgan_fu_920_p2))) then
                new_context_current_1_reg_1242 <= new_context_current_1_fu_942_p6;
                new_context_next_nod_1_reg_1247 <= new_context_next_nod_1_fu_956_p6;
                new_context_state_1_reg_1252 <= new_context_state_1_fu_970_p6;
                queue_head_ptr_1_reg_1237 <= queue_head_ptr_1_fu_930_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                new_context_current_s_reg_1128 <= sched_interfaces_context_current_node_q0;
                new_context_next_nod_reg_1138 <= sched_interfaces_context_next_node_q0;
                new_context_state_reg_1148 <= sched_interfaces_context_state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                or_cond_5_reg_1109 <= or_cond_5_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then
                queue_3_current_nod_1_fu_98 <= queue_3_current_nod_11_fu_589_p3;
                queue_3_current_nod_2_fu_102 <= queue_3_current_nod_9_fu_574_p3;
                queue_3_current_nod_3_fu_106 <= queue_3_current_nod_8_fu_559_p3;
                queue_3_current_nod_fu_94 <= queue_3_current_nod_12_fu_597_p3;
                queue_3_next_node_2_fu_110 <= queue_3_next_node_7_fu_649_p3;
                queue_3_next_node_3_fu_114 <= queue_3_next_node_5_fu_641_p3;
                queue_3_next_node_6_fu_118 <= queue_3_next_node_1_fu_626_p3;
                queue_3_next_node_8_fu_122 <= queue_3_next_node_fu_611_p3;
                queue_3_state_2_fu_126 <= queue_3_state_7_fu_701_p3;
                queue_3_state_3_fu_130 <= queue_3_state_5_fu_693_p3;
                queue_3_state_6_fu_134 <= queue_3_state_1_fu_678_p3;
                queue_3_state_8_fu_138 <= queue_3_state_fu_663_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_10_reg_1192 <= tmp_10_fu_801_p2;
                tmp_11_reg_1197 <= tmp_11_fu_806_p2;
                tmp_s_reg_1186 <= tmp_s_fu_796_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_fu_874_p2))) then
                    tmp_5_reg_1215(1 downto 0) <= tmp_5_fu_886_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_453_p2 = ap_const_lv1_0))) then
                    tmp_reg_1089(1 downto 0) <= tmp_fu_465_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond2_fu_500_p2))) then
                ult_reg_1166 <= ult_fu_512_p2;
            end if;
        end if;
    end process;
    tmp_reg_1089(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    tmp_5_reg_1215(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_453_p2, or_cond_5_fu_490_p2, or_cond_5_reg_1109, ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond2_fu_500_p2, ap_CS_fsm_state9, exitcond_fu_874_p2, ap_CS_fsm_state10, demorgan_fu_920_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_453_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = or_cond_5_fu_490_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((ap_const_lv1_0 = or_cond_5_reg_1109) or (ap_const_lv1_1 = exitcond2_fu_500_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_fu_874_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = demorgan_fu_920_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_874_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_fu_874_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_874_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_fu_874_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_816_p2 <= (rev_fu_811_p2 or match_found_reg_352);
    demorgan_fu_920_p2 <= (setup_interfaces_core_halted_V_q0 and tmp_7_fu_914_p2);
    exitcond1_fu_453_p2 <= "1" when (i_reg_341 = ap_const_lv2_2) else "0";
    exitcond2_fu_500_p2 <= "1" when (j_reg_364 = ap_const_lv11_400) else "0";
    exitcond_fu_874_p2 <= "1" when (i1_reg_387 = ap_const_lv2_2) else "0";
    finished <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_897_p2),32));

    finished_ap_vld_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_874_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_fu_874_p2))) then 
            finished_ap_vld <= ap_const_logic_1;
        else 
            finished_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    halted_flag_1_fu_908_p2 <= (setup_interfaces_core_halted_V_q0 and halted_flag_reg_375);

    history_current_node_address0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4, tmp_8_fu_518_p1, tmp_6_fu_708_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1))) then
            if (((ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then 
                history_current_node_address0 <= tmp_6_fu_708_p1(10 - 1 downto 0);
            elsif ((ap_const_lv1_0 = exitcond2_fu_500_p2)) then 
                history_current_node_address0 <= tmp_8_fu_518_p1(10 - 1 downto 0);
            else 
                history_current_node_address0 <= "XXXXXXXXXX";
            end if;
        else 
            history_current_node_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    history_current_node_ce0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond2_fu_500_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4)))) then 
            history_current_node_ce0 <= ap_const_logic_1;
        else 
            history_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    history_current_node_we0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then 
            history_current_node_we0 <= ap_const_logic_1;
        else 
            history_current_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    history_head_ptr_1_fu_720_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(history_head_ptr_fu_90));

    history_next_node_address0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4, tmp_8_fu_518_p1, tmp_6_fu_708_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1))) then
            if (((ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then 
                history_next_node_address0 <= tmp_6_fu_708_p1(10 - 1 downto 0);
            elsif ((ap_const_lv1_0 = exitcond2_fu_500_p2)) then 
                history_next_node_address0 <= tmp_8_fu_518_p1(10 - 1 downto 0);
            else 
                history_next_node_address0 <= "XXXXXXXXXX";
            end if;
        else 
            history_next_node_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    history_next_node_ce0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond2_fu_500_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4)))) then 
            history_next_node_ce0 <= ap_const_logic_1;
        else 
            history_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    history_next_node_we0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then 
            history_next_node_we0 <= ap_const_logic_1;
        else 
            history_next_node_we0 <= ap_const_logic_0;
        end if; 
    end process;


    history_state_address0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4, tmp_8_fu_518_p1, tmp_6_fu_708_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1))) then
            if (((ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then 
                history_state_address0 <= tmp_6_fu_708_p1(10 - 1 downto 0);
            elsif ((ap_const_lv1_0 = exitcond2_fu_500_p2)) then 
                history_state_address0 <= tmp_8_fu_518_p1(10 - 1 downto 0);
            else 
                history_state_address0 <= "XXXXXXXXXX";
            end if;
        else 
            history_state_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    history_state_ce0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond2_fu_500_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4)))) then 
            history_state_ce0 <= ap_const_logic_1;
        else 
            history_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    history_state_we0_assign_proc : process(or_cond_5_reg_1109, ap_CS_fsm_state6, exitcond2_fu_500_p2, match_found_phi_fu_356_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (or_cond_5_reg_1109 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond2_fu_500_p2) and (ap_const_lv1_0 = match_found_phi_fu_356_p4))) then 
            history_state_we0 <= ap_const_logic_1;
        else 
            history_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_880_p2 <= std_logic_vector(unsigned(i1_reg_387) + unsigned(ap_const_lv2_1));
    i_2_fu_459_p2 <= std_logic_vector(unsigned(i_reg_341) + unsigned(ap_const_lv2_1));
    icmp_fu_484_p2 <= "1" when (tmp_1_fu_475_p4 = ap_const_lv30_0) else "0";
    j_1_fu_506_p2 <= std_logic_vector(unsigned(j_reg_364) + unsigned(ap_const_lv11_1));
    j_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_364),32));
    match_found_0_mux_fu_828_p2 <= (match_found_reg_352 or not_not_fu_822_p2);
    match_found_1_fu_868_p2 <= (sel_tmp2_fu_855_p3 and sel_tmp19_demorgan_fu_863_p2);
    match_found_phi_fu_356_p4 <= match_found_reg_352;
    newSel1_fu_671_p3 <= 
        new_context_state_reg_1148 when (sel_tmp3_fu_528_p2(0) = '1') else 
        queue_3_state_6_fu_134;
    newSel2_fu_567_p3 <= 
        new_context_current_s_reg_1128 when (sel_tmp3_fu_528_p2(0) = '1') else 
        queue_3_current_nod_2_fu_102;
    newSel4_fu_604_p3 <= 
        queue_3_next_node_8_fu_122 when (sel_tmp3_fu_528_p2(0) = '1') else 
        new_context_next_nod_reg_1138;
    newSel6_fu_619_p3 <= 
        new_context_next_nod_reg_1138 when (sel_tmp3_fu_528_p2(0) = '1') else 
        queue_3_next_node_6_fu_118;
    newSel8_fu_656_p3 <= 
        queue_3_state_8_fu_138 when (sel_tmp3_fu_528_p2(0) = '1') else 
        new_context_state_reg_1148;
    newSel_fu_552_p3 <= 
        queue_3_current_nod_3_fu_106 when (sel_tmp3_fu_528_p2(0) = '1') else 
        new_context_current_s_reg_1128;
    not_not_fu_822_p2 <= (rev_fu_811_p2 xor ap_const_lv1_1);
    or_cond_5_fu_490_p2 <= (sched_interfaces_schedule_V_q0 and icmp_fu_484_p2);
    or_cond_fu_546_p2 <= (sel_tmp5_fu_540_p2 or sel_tmp4_fu_534_p2);
    queue_3_current_nod_10_fu_582_p3 <= 
        new_context_current_s_reg_1128 when (sel_tmp4_fu_534_p2(0) = '1') else 
        queue_3_current_nod_1_fu_98;
    queue_3_current_nod_11_fu_589_p3 <= 
        queue_3_current_nod_1_fu_98 when (sel_tmp5_fu_540_p2(0) = '1') else 
        queue_3_current_nod_10_fu_582_p3;
    queue_3_current_nod_12_fu_597_p3 <= 
        new_context_current_s_reg_1128 when (sel_tmp5_fu_540_p2(0) = '1') else 
        queue_3_current_nod_fu_94;
    queue_3_current_nod_8_fu_559_p3 <= 
        queue_3_current_nod_3_fu_106 when (or_cond_fu_546_p2(0) = '1') else 
        newSel_fu_552_p3;
    queue_3_current_nod_9_fu_574_p3 <= 
        queue_3_current_nod_2_fu_102 when (or_cond_fu_546_p2(0) = '1') else 
        newSel2_fu_567_p3;
    queue_3_next_node_1_fu_626_p3 <= 
        queue_3_next_node_6_fu_118 when (or_cond_fu_546_p2(0) = '1') else 
        newSel6_fu_619_p3;
    queue_3_next_node_4_fu_634_p3 <= 
        new_context_next_nod_reg_1138 when (sel_tmp4_fu_534_p2(0) = '1') else 
        queue_3_next_node_3_fu_114;
    queue_3_next_node_5_fu_641_p3 <= 
        queue_3_next_node_3_fu_114 when (sel_tmp5_fu_540_p2(0) = '1') else 
        queue_3_next_node_4_fu_634_p3;
    queue_3_next_node_7_fu_649_p3 <= 
        new_context_next_nod_reg_1138 when (sel_tmp5_fu_540_p2(0) = '1') else 
        queue_3_next_node_2_fu_110;
    queue_3_next_node_fu_611_p3 <= 
        queue_3_next_node_8_fu_122 when (or_cond_fu_546_p2(0) = '1') else 
        newSel4_fu_604_p3;
    queue_3_state_1_fu_678_p3 <= 
        queue_3_state_6_fu_134 when (or_cond_fu_546_p2(0) = '1') else 
        newSel1_fu_671_p3;
    queue_3_state_4_fu_686_p3 <= 
        new_context_state_reg_1148 when (sel_tmp4_fu_534_p2(0) = '1') else 
        queue_3_state_3_fu_130;
    queue_3_state_5_fu_693_p3 <= 
        queue_3_state_3_fu_130 when (sel_tmp5_fu_540_p2(0) = '1') else 
        queue_3_state_4_fu_686_p3;
    queue_3_state_7_fu_701_p3 <= 
        new_context_state_reg_1148 when (sel_tmp5_fu_540_p2(0) = '1') else 
        queue_3_state_2_fu_126;
    queue_3_state_fu_663_p3 <= 
        queue_3_state_8_fu_138 when (or_cond_fu_546_p2(0) = '1') else 
        newSel8_fu_656_p3;
    queue_head_ptr_1_fu_930_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(queue_head_ptr_2_fu_154));
    queue_head_ptr_1_t_fu_936_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(tmp_12_fu_926_p1));
    queue_head_ptr_3_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(queue_head_ptr_load_reg_1074));
    rev_fu_811_p2 <= (ult_reg_1166 xor ap_const_lv1_1);
    sched_interfaces_ack_V_address0 <= tmp_reg_1089(1 - 1 downto 0);

    sched_interfaces_ack_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sched_interfaces_ack_V_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_ack_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_ack_V_d0 <= ap_const_lv1_0;

    sched_interfaces_ack_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sched_interfaces_ack_V_we0 <= ap_const_logic_1;
        else 
            sched_interfaces_ack_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_current_node_address0 <= tmp_reg_1089(1 - 1 downto 0);

    sched_interfaces_context_current_node_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_current_node_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_next_node_address0 <= tmp_reg_1089(1 - 1 downto 0);

    sched_interfaces_context_next_node_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_next_node_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_context_state_address0 <= tmp_reg_1089(1 - 1 downto 0);

    sched_interfaces_context_state_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sched_interfaces_context_state_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_context_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sched_interfaces_schedule_V_address0 <= tmp_fu_465_p1(1 - 1 downto 0);

    sched_interfaces_schedule_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sched_interfaces_schedule_V_ce0 <= ap_const_logic_1;
        else 
            sched_interfaces_schedule_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp19_demorgan_fu_863_p2 <= (brmerge_fu_816_p2 or tmp_s_reg_1186);
    sel_tmp1_fu_849_p2 <= (tmp2_fu_845_p2 and tmp1_fu_840_p2);
    sel_tmp2_fu_855_p3 <= 
        match_found_0_mux_fu_828_p2 when (brmerge_fu_816_p2(0) = '1') else 
        sel_tmp1_fu_849_p2;
    sel_tmp3_fu_528_p2 <= "1" when (tmp_14_fu_525_p1 = ap_const_lv2_2) else "0";
    sel_tmp4_fu_534_p2 <= "1" when (tmp_14_fu_525_p1 = ap_const_lv2_1) else "0";
    sel_tmp5_fu_540_p2 <= "1" when (tmp_14_fu_525_p1 = ap_const_lv2_0) else "0";
    sel_tmp_fu_834_p2 <= (brmerge_fu_816_p2 xor ap_const_lv1_1);
    setup_interfaces_context_current_node_address0 <= tmp_5_reg_1215(1 - 1 downto 0);

    setup_interfaces_context_current_node_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            setup_interfaces_context_current_node_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_current_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_current_node_d0 <= new_context_current_1_reg_1242;

    setup_interfaces_context_current_node_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            setup_interfaces_context_current_node_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_current_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_next_node_address0 <= tmp_5_reg_1215(1 - 1 downto 0);

    setup_interfaces_context_next_node_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            setup_interfaces_context_next_node_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_next_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_next_node_d0 <= new_context_next_nod_1_reg_1247;

    setup_interfaces_context_next_node_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            setup_interfaces_context_next_node_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_next_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_state_address0 <= tmp_5_reg_1215(1 - 1 downto 0);

    setup_interfaces_context_state_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            setup_interfaces_context_state_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_context_state_d0 <= new_context_state_1_reg_1252;

    setup_interfaces_context_state_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            setup_interfaces_context_state_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_context_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_core_halted_V_address0 <= tmp_5_fu_886_p1(1 - 1 downto 0);

    setup_interfaces_core_halted_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            setup_interfaces_core_halted_V_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_core_halted_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_restart_V_address0 <= tmp_5_reg_1215(1 - 1 downto 0);

    setup_interfaces_restart_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            setup_interfaces_restart_V_ce0 <= ap_const_logic_1;
        else 
            setup_interfaces_restart_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    setup_interfaces_restart_V_d0 <= ap_const_lv1_0;

    setup_interfaces_restart_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            setup_interfaces_restart_V_we0 <= ap_const_logic_1;
        else 
            setup_interfaces_restart_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_840_p2 <= (tmp_s_reg_1186 and sel_tmp_fu_834_p2);
    tmp2_fu_845_p2 <= (tmp_10_reg_1192 and tmp_11_reg_1197);
    tmp_10_fu_801_p2 <= "1" when (history_next_node_q0 = new_context_next_nod_reg_1138) else "0";
    tmp_11_fu_806_p2 <= "1" when (history_state_q0 = new_context_state_reg_1148) else "0";
    tmp_12_fu_926_p1 <= queue_head_ptr_2_fu_154(2 - 1 downto 0);
    tmp_14_fu_525_p1 <= queue_head_ptr_load_reg_1074(2 - 1 downto 0);
    tmp_1_fu_475_p4 <= queue_head_ptr_load_reg_1074(31 downto 2);
    tmp_2_fu_891_p2 <= "1" when (queue_head_ptr_2_fu_154 = ap_const_lv32_0) else "0";
    tmp_3_fu_897_p2 <= (halted_flag_reg_375 and tmp_2_fu_891_p2);
    tmp_5_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_387),64));
    tmp_6_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(history_head_ptr_fu_90),64));
    tmp_7_fu_914_p2 <= "0" when (queue_head_ptr_2_fu_154 = ap_const_lv32_0) else "1";
    tmp_8_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_364),64));
    tmp_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_341),64));
    tmp_s_fu_796_p2 <= "1" when (history_current_node_q0 = new_context_current_s_reg_1128) else "0";
    ult_fu_512_p2 <= "1" when (unsigned(j_cast_fu_496_p1) < unsigned(history_head_ptr_fu_90)) else "0";
end behav;



================================================================
== Vivado HLS Report for 'scheduler'
================================================================
* Date:           Sun Dec 16 10:50:38 2018

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        scheduler
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.28|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+--------+-----+--------+---------+
    |    Latency   |   Interval   | Pipeline|
    | min |   max  | min |   max  |   Type  |
    +-----+--------+-----+--------+---------+
    |  194|  393538|  195|  393539|   none  |
    +-----+--------+-----+--------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-------+--------+-----------+-----------+-----------+------+----------+
        |             |     Latency    | Iteration |  Initiation Interval  | Trip |          |
        |  Loop Name  |  min  |   max  |  Latency  |  achieved |   target  | Count| Pipelined|
        +-------------+-------+--------+-----------+-----------+-----------+------+----------+
        |- Loop 1     |     96|  393376| 3 ~ 12293 |          -|          -|    32|    no    |
        | + Loop 1.1  |  12288|   12288|          3|          -|          -|  4096|    no    |
        |- Loop 2     |     96|     160|   3 ~ 5   |          -|          -|    32|    no    |
        +-------------+-------+--------+-----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 13
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond1)
	9  / (exitcond1)
3 --> 
	4  / (or_cond)
	6  / (!or_cond)
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / (or_cond & !exitcond2)
	2  / (!or_cond) | (exitcond2)
7 --> 
	8  / true
8 --> 
	6  / true
9 --> 
	10  / (!exitcond)
10 --> 
	11  / (demorgan)
	13  / (!demorgan)
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	9  / true
* FSM state operations: 

 <State 1>: 1.59ns
ST_1: queue_head_ptr (12)  [1/1] 0.00ns
:0  %queue_head_ptr = alloca i32

ST_1: history_head_ptr (13)  [1/1] 0.00ns
:1  %history_head_ptr = alloca i32

ST_1: StgValue_16 (14)  [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap([32 x i32]* %sched_interfaces_context_current_node), !map !53

ST_1: StgValue_17 (15)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap([32 x i32]* %sched_interfaces_context_next_node), !map !59

ST_1: StgValue_18 (16)  [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap([32 x i32]* %sched_interfaces_context_state), !map !63

ST_1: StgValue_19 (17)  [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap([32 x i1]* %sched_interfaces_schedule_V), !map !67

ST_1: StgValue_20 (18)  [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecBitsMap([32 x i1]* %sched_interfaces_ack_V), !map !71

ST_1: StgValue_21 (19)  [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecBitsMap([32 x i32]* %setup_interfaces_context_current_node), !map !75

ST_1: StgValue_22 (20)  [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecBitsMap([32 x i32]* %setup_interfaces_context_next_node), !map !79

ST_1: StgValue_23 (21)  [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecBitsMap([32 x i32]* %setup_interfaces_context_state), !map !83

ST_1: StgValue_24 (22)  [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecBitsMap([32 x i1]* %setup_interfaces_restart_V), !map !87

ST_1: StgValue_25 (23)  [1/1] 0.00ns
:11  call void (...)* @_ssdm_op_SpecBitsMap([32 x i1]* %setup_interfaces_core_halted_V), !map !91

ST_1: StgValue_26 (24)  [1/1] 0.00ns
:12  call void (...)* @_ssdm_op_SpecBitsMap(i32* %finished), !map !95

ST_1: StgValue_27 (25)  [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecTopModule([10 x i8]* @scheduler_str) nounwind

ST_1: history_current_node (26)  [1/1] 0.00ns  loc: scheduler.cpp:5
:14  %history_current_node = alloca [4096 x i32], align 4

ST_1: history_next_node (27)  [1/1] 0.00ns  loc: scheduler.cpp:5
:15  %history_next_node = alloca [4096 x i32], align 4

ST_1: history_state (28)  [1/1] 0.00ns  loc: scheduler.cpp:5
:16  %history_state = alloca [4096 x i32], align 4

ST_1: queue_current_node (29)  [1/1] 0.00ns  loc: scheduler.cpp:6
:17  %queue_current_node = alloca [320 x i32], align 4

ST_1: queue_next_node (30)  [1/1] 0.00ns  loc: scheduler.cpp:6
:18  %queue_next_node = alloca [320 x i32], align 4

ST_1: queue_state (31)  [1/1] 0.00ns  loc: scheduler.cpp:6
:19  %queue_state = alloca [320 x i32], align 4

ST_1: StgValue_34 (32)  [1/1] 1.59ns
:20  store i32 0, i32* %history_head_ptr

ST_1: StgValue_35 (33)  [1/1] 1.59ns
:21  store i32 0, i32* %queue_head_ptr

ST_1: StgValue_36 (34)  [1/1] 1.59ns  loc: scheduler.cpp:14
:22  br label %._crit_edge


 <State 2>: 3.88ns
ST_2: i (36)  [1/1] 0.00ns
._crit_edge:0  %i = phi i6 [ 0, %0 ], [ %i_2, %._crit_edge.backedge ]

ST_2: queue_head_ptr_load (37)  [1/1] 0.00ns  loc: scheduler.cpp:51
._crit_edge:1  %queue_head_ptr_load = load i32* %queue_head_ptr

ST_2: exitcond1 (38)  [1/1] 3.88ns  loc: scheduler.cpp:14
._crit_edge:2  %exitcond1 = icmp eq i6 %i, -32

ST_2: empty (39)  [1/1] 0.00ns
._crit_edge:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)

ST_2: i_2 (40)  [1/1] 2.31ns  loc: scheduler.cpp:14
._crit_edge:4  %i_2 = add i6 %i, 1

ST_2: StgValue_42 (41)  [1/1] 0.00ns  loc: scheduler.cpp:14
._crit_edge:5  br i1 %exitcond1, label %.preheader.preheader, label %1

ST_2: tmp (43)  [1/1] 0.00ns  loc: scheduler.cpp:18
:0  %tmp = zext i6 %i to i64

ST_2: sched_interfaces_sch (44)  [1/1] 0.00ns  loc: scheduler.cpp:18
:1  %sched_interfaces_sch = getelementptr [32 x i1]* %sched_interfaces_schedule_V, i64 0, i64 %tmp

ST_2: sched_interfaces_sch_1 (45)  [2/2] 2.32ns  loc: scheduler.cpp:18
:2  %sched_interfaces_sch_1 = load i1* %sched_interfaces_sch, align 1

ST_2: queue_head_ptr_2 (121)  [1/1] 0.00ns
.preheader.preheader:0  %queue_head_ptr_2 = alloca i32

ST_2: StgValue_47 (122)  [1/1] 1.59ns  loc: scheduler.cpp:51
.preheader.preheader:1  store i32 %queue_head_ptr_load, i32* %queue_head_ptr_2

ST_2: StgValue_48 (123)  [1/1] 1.59ns  loc: scheduler.cpp:63
.preheader.preheader:2  br label %.preheader


 <State 3>: 5.33ns
ST_3: sched_interfaces_sch_1 (45)  [1/2] 2.32ns  loc: scheduler.cpp:18
:2  %sched_interfaces_sch_1 = load i1* %sched_interfaces_sch, align 1

ST_3: tmp_1 (46)  [1/1] 3.26ns  loc: scheduler.cpp:18
:3  %tmp_1 = icmp ult i32 %queue_head_ptr_load, 320

ST_3: or_cond (47)  [1/1] 2.07ns  loc: scheduler.cpp:18
:4  %or_cond = and i1 %sched_interfaces_sch_1, %tmp_1

ST_3: StgValue_52 (48)  [1/1] 0.00ns  loc: scheduler.cpp:18
:5  br i1 %or_cond, label %2, label %._crit_edge.backedge

ST_3: sched_interfaces_con (50)  [1/1] 0.00ns  loc: scheduler.cpp:21
:0  %sched_interfaces_con = getelementptr [32 x i32]* %sched_interfaces_context_current_node, i64 0, i64 %tmp

ST_3: new_context_current_s (51)  [2/2] 3.25ns  loc: scheduler.cpp:21
:1  %new_context_current_s = load i32* %sched_interfaces_con, align 4

ST_3: sched_interfaces_con_1 (52)  [1/1] 0.00ns  loc: scheduler.cpp:21
:2  %sched_interfaces_con_1 = getelementptr [32 x i32]* %sched_interfaces_context_next_node, i64 0, i64 %tmp

ST_3: new_context_next_nod (53)  [2/2] 3.25ns  loc: scheduler.cpp:21
:3  %new_context_next_nod = load i32* %sched_interfaces_con_1, align 4

ST_3: sched_interfaces_con_2 (54)  [1/1] 0.00ns  loc: scheduler.cpp:21
:4  %sched_interfaces_con_2 = getelementptr [32 x i32]* %sched_interfaces_context_state, i64 0, i64 %tmp

ST_3: new_context_state (55)  [2/2] 3.25ns  loc: scheduler.cpp:21
:5  %new_context_state = load i32* %sched_interfaces_con_2, align 4


 <State 4>: 3.25ns
ST_4: new_context_current_s (51)  [1/2] 3.25ns  loc: scheduler.cpp:21
:1  %new_context_current_s = load i32* %sched_interfaces_con, align 4

ST_4: new_context_next_nod (53)  [1/2] 3.25ns  loc: scheduler.cpp:21
:3  %new_context_next_nod = load i32* %sched_interfaces_con_1, align 4

ST_4: new_context_state (55)  [1/2] 3.25ns  loc: scheduler.cpp:21
:5  %new_context_state = load i32* %sched_interfaces_con_2, align 4


 <State 5>: 2.32ns
ST_5: tmp_13 (56)  [1/1] 0.00ns  loc: scheduler.cpp:27
:6  %tmp_13 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str7)

ST_5: StgValue_63 (57)  [1/1] 0.00ns  loc: scheduler.cpp:28
:7  call void (...)* @_ssdm_op_SpecProtocol(i32 1, [1 x i8]* @p_str8) nounwind

ST_5: sched_interfaces_ack (58)  [1/1] 0.00ns  loc: scheduler.cpp:29
:8  %sched_interfaces_ack = getelementptr [32 x i1]* %sched_interfaces_ack_V, i64 0, i64 %tmp

ST_5: StgValue_65 (59)  [1/1] 2.32ns  loc: scheduler.cpp:31
:9  store i1 false, i1* %sched_interfaces_ack, align 1

ST_5: empty_3 (60)  [1/1] 0.00ns  loc: scheduler.cpp:32
:10  %empty_3 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str7, i32 %tmp_13)

ST_5: StgValue_67 (61)  [1/1] 1.59ns  loc: scheduler.cpp:36
:11  br label %3


 <State 6>: 4.49ns
ST_6: match_found (63)  [1/1] 0.00ns  loc: scheduler.cpp:38
:0  %match_found = phi i1 [ false, %2 ], [ %match_found_1, %_ifconv ]

ST_6: j (64)  [1/1] 0.00ns
:1  %j = phi i13 [ 0, %2 ], [ %j_1, %_ifconv ]

ST_6: j_cast (65)  [1/1] 0.00ns  loc: scheduler.cpp:36
:2  %j_cast = zext i13 %j to i32

ST_6: exitcond2 (66)  [1/1] 2.97ns  loc: scheduler.cpp:36
:3  %exitcond2 = icmp eq i13 %j, -4096

ST_6: empty_4 (67)  [1/1] 0.00ns
:4  %empty_4 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4096, i64 4096, i64 4096)

ST_6: j_1 (68)  [1/1] 2.34ns  loc: scheduler.cpp:36
:5  %j_1 = add i13 %j, 1

ST_6: StgValue_74 (69)  [1/1] 0.00ns  loc: scheduler.cpp:36
:6  br i1 %exitcond2, label %4, label %_ifconv

ST_6: history_head_ptr_loa (71)  [1/1] 0.00ns  loc: scheduler.cpp:38
_ifconv:0  %history_head_ptr_loa = load i32* %history_head_ptr

ST_6: ult (72)  [1/1] 3.26ns  loc: scheduler.cpp:38
_ifconv:1  %ult = icmp ult i32 %j_cast, %history_head_ptr_loa

ST_6: tmp_8 (77)  [1/1] 0.00ns  loc: scheduler.cpp:40
_ifconv:6  %tmp_8 = zext i13 %j to i64

ST_6: history_current_node_1 (78)  [1/1] 0.00ns  loc: scheduler.cpp:40
_ifconv:7  %history_current_node_1 = getelementptr [4096 x i32]* %history_current_node, i64 0, i64 %tmp_8

ST_6: history_current_node_2 (79)  [2/2] 3.25ns  loc: scheduler.cpp:40
_ifconv:8  %history_current_node_2 = load i32* %history_current_node_1, align 4

ST_6: history_next_node_ad (81)  [1/1] 0.00ns  loc: scheduler.cpp:40
_ifconv:10  %history_next_node_ad = getelementptr [4096 x i32]* %history_next_node, i64 0, i64 %tmp_8

ST_6: history_next_node_lo (82)  [2/2] 3.25ns  loc: scheduler.cpp:40
_ifconv:11  %history_next_node_lo = load i32* %history_next_node_ad, align 4

ST_6: history_state_addr_1 (84)  [1/1] 0.00ns  loc: scheduler.cpp:40
_ifconv:13  %history_state_addr_1 = getelementptr [4096 x i32]* %history_state, i64 0, i64 %tmp_8

ST_6: history_state_load (85)  [2/2] 3.25ns  loc: scheduler.cpp:40
_ifconv:14  %history_state_load = load i32* %history_state_addr_1, align 4

ST_6: StgValue_84 (96)  [1/1] 0.00ns  loc: scheduler.cpp:47
:0  br i1 %match_found, label %._crit_edge.backedge, label %5

ST_6: history_head_ptr_loa_1 (98)  [1/1] 0.00ns  loc: scheduler.cpp:52
:0  %history_head_ptr_loa_1 = load i32* %history_head_ptr

ST_6: tmp_s (99)  [1/1] 0.00ns  loc: scheduler.cpp:49
:1  %tmp_s = zext i32 %queue_head_ptr_load to i64

ST_6: queue_current_node_a (100)  [1/1] 0.00ns  loc: scheduler.cpp:49
:2  %queue_current_node_a = getelementptr [320 x i32]* %queue_current_node, i64 0, i64 %tmp_s

ST_6: StgValue_88 (101)  [1/1] 3.25ns  loc: scheduler.cpp:49
:3  store i32 %new_context_current_s, i32* %queue_current_node_a, align 4

ST_6: queue_next_node_addr_1 (102)  [1/1] 0.00ns  loc: scheduler.cpp:49
:4  %queue_next_node_addr_1 = getelementptr [320 x i32]* %queue_next_node, i64 0, i64 %tmp_s

ST_6: StgValue_90 (103)  [1/1] 3.25ns  loc: scheduler.cpp:49
:5  store i32 %new_context_next_nod, i32* %queue_next_node_addr_1, align 4

ST_6: queue_state_addr_1 (104)  [1/1] 0.00ns  loc: scheduler.cpp:49
:6  %queue_state_addr_1 = getelementptr [320 x i32]* %queue_state, i64 0, i64 %tmp_s

ST_6: StgValue_92 (105)  [1/1] 3.25ns  loc: scheduler.cpp:49
:7  store i32 %new_context_state, i32* %queue_state_addr_1, align 4

ST_6: tmp_6 (106)  [1/1] 0.00ns  loc: scheduler.cpp:50
:8  %tmp_6 = zext i32 %history_head_ptr_loa_1 to i64

ST_6: history_current_node_3 (107)  [1/1] 0.00ns  loc: scheduler.cpp:50
:9  %history_current_node_3 = getelementptr [4096 x i32]* %history_current_node, i64 0, i64 %tmp_6

ST_6: StgValue_95 (108)  [1/1] 3.25ns  loc: scheduler.cpp:50
:10  store i32 %new_context_current_s, i32* %history_current_node_3, align 4

ST_6: history_next_node_ad_1 (109)  [1/1] 0.00ns  loc: scheduler.cpp:50
:11  %history_next_node_ad_1 = getelementptr [4096 x i32]* %history_next_node, i64 0, i64 %tmp_6

ST_6: StgValue_97 (110)  [1/1] 3.25ns  loc: scheduler.cpp:50
:12  store i32 %new_context_next_nod, i32* %history_next_node_ad_1, align 4

ST_6: history_state_addr (111)  [1/1] 0.00ns  loc: scheduler.cpp:50
:13  %history_state_addr = getelementptr [4096 x i32]* %history_state, i64 0, i64 %tmp_6

ST_6: StgValue_99 (112)  [1/1] 3.25ns  loc: scheduler.cpp:50
:14  store i32 %new_context_state, i32* %history_state_addr, align 4

ST_6: queue_head_ptr_3 (113)  [1/1] 2.90ns  loc: scheduler.cpp:51
:15  %queue_head_ptr_3 = add i32 %queue_head_ptr_load, 1

ST_6: history_head_ptr_1 (114)  [1/1] 2.90ns  loc: scheduler.cpp:52
:16  %history_head_ptr_1 = add i32 %history_head_ptr_loa_1, 1

ST_6: StgValue_102 (115)  [1/1] 1.59ns  loc: scheduler.cpp:52
:17  store i32 %history_head_ptr_1, i32* %history_head_ptr

ST_6: StgValue_103 (116)  [1/1] 1.59ns  loc: scheduler.cpp:51
:18  store i32 %queue_head_ptr_3, i32* %queue_head_ptr

ST_6: StgValue_104 (117)  [1/1] 0.00ns  loc: scheduler.cpp:54
:19  br label %._crit_edge.backedge

ST_6: StgValue_105 (119)  [1/1] 0.00ns
._crit_edge.backedge:0  br label %._crit_edge


 <State 7>: 6.52ns
ST_7: history_current_node_2 (79)  [1/2] 3.25ns  loc: scheduler.cpp:40
_ifconv:8  %history_current_node_2 = load i32* %history_current_node_1, align 4

ST_7: tmp_10 (80)  [1/1] 3.26ns  loc: scheduler.cpp:40
_ifconv:9  %tmp_10 = icmp eq i32 %history_current_node_2, %new_context_current_s

ST_7: history_next_node_lo (82)  [1/2] 3.25ns  loc: scheduler.cpp:40
_ifconv:11  %history_next_node_lo = load i32* %history_next_node_ad, align 4

ST_7: tmp_11 (83)  [1/1] 3.26ns  loc: scheduler.cpp:40
_ifconv:12  %tmp_11 = icmp eq i32 %history_next_node_lo, %new_context_next_nod

ST_7: history_state_load (85)  [1/2] 3.25ns  loc: scheduler.cpp:40
_ifconv:14  %history_state_load = load i32* %history_state_addr_1, align 4

ST_7: tmp_12 (86)  [1/1] 3.26ns  loc: scheduler.cpp:40
_ifconv:15  %tmp_12 = icmp eq i32 %history_state_load, %new_context_state


 <State 8>: 8.28ns
ST_8: rev4 (73)  [1/1] 2.07ns  loc: scheduler.cpp:38
_ifconv:2  %rev4 = xor i1 %ult, true

ST_8: brmerge (74)  [1/1] 2.07ns  loc: scheduler.cpp:38
_ifconv:3  %brmerge = or i1 %rev4, %match_found

ST_8: not_not (75)  [1/1] 0.00ns  loc: scheduler.cpp:38 (grouped into LUT with out node match_found_1)
_ifconv:4  %not_not = xor i1 %rev4, true

ST_8: match_found_0_mux (76)  [1/1] 0.00ns  loc: scheduler.cpp:38 (grouped into LUT with out node match_found_1)
_ifconv:5  %match_found_0_mux = or i1 %match_found, %not_not

ST_8: sel_tmp (87)  [1/1] 0.00ns  loc: scheduler.cpp:38 (grouped into LUT with out node sel_tmp3)
_ifconv:16  %sel_tmp = xor i1 %brmerge, true

ST_8: tmp9 (88)  [1/1] 0.00ns  loc: scheduler.cpp:40 (grouped into LUT with out node sel_tmp3)
_ifconv:17  %tmp9 = and i1 %tmp_10, %sel_tmp

ST_8: tmp1 (89)  [1/1] 0.00ns  loc: scheduler.cpp:40 (grouped into LUT with out node sel_tmp3)
_ifconv:18  %tmp1 = and i1 %tmp_11, %tmp_12

ST_8: sel_tmp3 (90)  [1/1] 2.07ns  loc: scheduler.cpp:40 (out node of the LUT)
_ifconv:19  %sel_tmp3 = and i1 %tmp1, %tmp9

ST_8: sel_tmp4 (91)  [1/1] 0.00ns  loc: scheduler.cpp:38 (grouped into LUT with out node match_found_1)
_ifconv:20  %sel_tmp4 = select i1 %brmerge, i1 %match_found_0_mux, i1 %sel_tmp3

ST_8: sel_tmp7_demorgan (92)  [1/1] 0.00ns  loc: scheduler.cpp:38 (grouped into LUT with out node match_found_1)
_ifconv:21  %sel_tmp7_demorgan = or i1 %brmerge, %tmp_10

ST_8: match_found_1 (93)  [1/1] 2.07ns  loc: scheduler.cpp:38 (out node of the LUT)
_ifconv:22  %match_found_1 = and i1 %sel_tmp4, %sel_tmp7_demorgan

ST_8: StgValue_123 (94)  [1/1] 0.00ns  loc: scheduler.cpp:36
_ifconv:23  br label %3


 <State 9>: 5.33ns
ST_9: halted_flag (125)  [1/1] 0.00ns
.preheader:0  %halted_flag = phi i1 [ true, %.preheader.preheader ], [ %halted_flag_1, %.preheader.backedge ]

ST_9: i1 (126)  [1/1] 0.00ns
.preheader:1  %i1 = phi i6 [ 0, %.preheader.preheader ], [ %i_1, %.preheader.backedge ]

ST_9: exitcond (127)  [1/1] 3.88ns  loc: scheduler.cpp:63
.preheader:2  %exitcond = icmp eq i6 %i1, -32

ST_9: empty_5 (128)  [1/1] 0.00ns
.preheader:3  %empty_5 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)

ST_9: i_1 (129)  [1/1] 2.31ns  loc: scheduler.cpp:63
.preheader:4  %i_1 = add i6 %i1, 1

ST_9: StgValue_129 (130)  [1/1] 0.00ns  loc: scheduler.cpp:63
.preheader:5  br i1 %exitcond, label %8, label %6

ST_9: tmp_5 (133)  [1/1] 0.00ns  loc: scheduler.cpp:66
:1  %tmp_5 = zext i6 %i1 to i64

ST_9: setup_interfaces_cor (134)  [1/1] 0.00ns  loc: scheduler.cpp:66
:2  %setup_interfaces_cor = getelementptr [32 x i1]* %setup_interfaces_core_halted_V, i64 0, i64 %tmp_5

ST_9: setup_interfaces_cor_1 (135)  [2/2] 2.32ns  loc: scheduler.cpp:66
:3  %setup_interfaces_cor_1 = load i1* %setup_interfaces_cor, align 1

ST_9: queue_head_ptr_2_loa_1 (165)  [1/1] 0.00ns  loc: scheduler.cpp:86
:0  %queue_head_ptr_2_loa_1 = load i32* %queue_head_ptr_2

ST_9: tmp_2 (166)  [1/1] 3.26ns  loc: scheduler.cpp:86
:1  %tmp_2 = icmp eq i32 %queue_head_ptr_2_loa_1, 0

ST_9: tmp_3 (167)  [1/1] 2.07ns  loc: scheduler.cpp:86
:2  %tmp_3 = and i1 %halted_flag, %tmp_2

ST_9: tmp_4 (168)  [1/1] 0.00ns  loc: scheduler.cpp:86
:3  %tmp_4 = zext i1 %tmp_3 to i32

ST_9: StgValue_137 (169)  [1/1] 0.00ns  loc: scheduler.cpp:86
:4  call void @_ssdm_op_Write.ap_auto.i32P(i32* %finished, i32 %tmp_4)

ST_9: StgValue_138 (170)  [1/1] 0.00ns  loc: scheduler.cpp:88
:5  ret void


 <State 10>: 6.15ns
ST_10: queue_head_ptr_2_loa (132)  [1/1] 0.00ns  loc: scheduler.cpp:67
:0  %queue_head_ptr_2_loa = load i32* %queue_head_ptr_2

ST_10: setup_interfaces_cor_1 (135)  [1/2] 2.32ns  loc: scheduler.cpp:66
:3  %setup_interfaces_cor_1 = load i1* %setup_interfaces_cor, align 1

ST_10: halted_flag_1 (136)  [1/1] 2.07ns  loc: scheduler.cpp:66
:4  %halted_flag_1 = and i1 %setup_interfaces_cor_1, %halted_flag

ST_10: tmp_7 (137)  [1/1] 3.26ns  loc: scheduler.cpp:67
:5  %tmp_7 = icmp ne i32 %queue_head_ptr_2_loa, 0

ST_10: demorgan (138)  [1/1] 2.07ns  loc: scheduler.cpp:67
:6  %demorgan = and i1 %setup_interfaces_cor_1, %tmp_7

ST_10: StgValue_144 (139)  [1/1] 0.00ns  loc: scheduler.cpp:67
:7  br i1 %demorgan, label %7, label %.preheader.backedge

ST_10: queue_head_ptr_1 (141)  [1/1] 2.90ns  loc: scheduler.cpp:71
:0  %queue_head_ptr_1 = add i32 %queue_head_ptr_2_loa, -1

ST_10: tmp_9 (142)  [1/1] 0.00ns  loc: scheduler.cpp:71
:1  %tmp_9 = zext i32 %queue_head_ptr_1 to i64

ST_10: queue_current_node_a_1 (143)  [1/1] 0.00ns  loc: scheduler.cpp:71
:2  %queue_current_node_a_1 = getelementptr [320 x i32]* %queue_current_node, i64 0, i64 %tmp_9

ST_10: new_context_current_1 (144)  [2/2] 3.25ns  loc: scheduler.cpp:71
:3  %new_context_current_1 = load i32* %queue_current_node_a_1, align 4

ST_10: queue_next_node_addr (145)  [1/1] 0.00ns  loc: scheduler.cpp:71
:4  %queue_next_node_addr = getelementptr [320 x i32]* %queue_next_node, i64 0, i64 %tmp_9

ST_10: new_context_next_nod_1 (146)  [2/2] 3.25ns  loc: scheduler.cpp:71
:5  %new_context_next_nod_1 = load i32* %queue_next_node_addr, align 4

ST_10: queue_state_addr (147)  [1/1] 0.00ns  loc: scheduler.cpp:71
:6  %queue_state_addr = getelementptr [320 x i32]* %queue_state, i64 0, i64 %tmp_9

ST_10: new_context_state_1 (148)  [2/2] 3.25ns  loc: scheduler.cpp:71
:7  %new_context_state_1 = load i32* %queue_state_addr, align 4


 <State 11>: 3.25ns
ST_11: new_context_current_1 (144)  [1/2] 3.25ns  loc: scheduler.cpp:71
:3  %new_context_current_1 = load i32* %queue_current_node_a_1, align 4

ST_11: new_context_next_nod_1 (146)  [1/2] 3.25ns  loc: scheduler.cpp:71
:5  %new_context_next_nod_1 = load i32* %queue_next_node_addr, align 4

ST_11: new_context_state_1 (148)  [1/2] 3.25ns  loc: scheduler.cpp:71
:7  %new_context_state_1 = load i32* %queue_state_addr, align 4


 <State 12>: 3.25ns
ST_12: tmp_14 (149)  [1/1] 0.00ns  loc: scheduler.cpp:77
:8  %tmp_14 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str17)

ST_12: StgValue_157 (150)  [1/1] 0.00ns  loc: scheduler.cpp:78
:9  call void (...)* @_ssdm_op_SpecProtocol(i32 1, [1 x i8]* @p_str8) nounwind

ST_12: setup_interfaces_con (151)  [1/1] 0.00ns  loc: scheduler.cpp:79
:10  %setup_interfaces_con = getelementptr [32 x i32]* %setup_interfaces_context_current_node, i64 0, i64 %tmp_5

ST_12: StgValue_159 (152)  [1/1] 3.25ns  loc: scheduler.cpp:79
:11  store i32 %new_context_current_1, i32* %setup_interfaces_con, align 4

ST_12: setup_interfaces_con_1 (153)  [1/1] 0.00ns  loc: scheduler.cpp:79
:12  %setup_interfaces_con_1 = getelementptr [32 x i32]* %setup_interfaces_context_next_node, i64 0, i64 %tmp_5

ST_12: StgValue_161 (154)  [1/1] 3.25ns  loc: scheduler.cpp:79
:13  store i32 %new_context_next_nod_1, i32* %setup_interfaces_con_1, align 4

ST_12: setup_interfaces_con_2 (155)  [1/1] 0.00ns  loc: scheduler.cpp:79
:14  %setup_interfaces_con_2 = getelementptr [32 x i32]* %setup_interfaces_context_state, i64 0, i64 %tmp_5

ST_12: StgValue_163 (156)  [1/1] 3.25ns  loc: scheduler.cpp:79
:15  store i32 %new_context_state_1, i32* %setup_interfaces_con_2, align 4

ST_12: setup_interfaces_res (157)  [1/1] 0.00ns  loc: scheduler.cpp:80
:16  %setup_interfaces_res = getelementptr [32 x i1]* %setup_interfaces_restart_V, i64 0, i64 %tmp_5

ST_12: StgValue_165 (158)  [1/1] 2.32ns  loc: scheduler.cpp:82
:17  store i1 false, i1* %setup_interfaces_res, align 1

ST_12: empty_6 (159)  [1/1] 0.00ns  loc: scheduler.cpp:83
:18  %empty_6 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str17, i32 %tmp_14)


 <State 13>: 1.59ns
ST_13: StgValue_167 (160)  [1/1] 1.59ns  loc: scheduler.cpp:72
:19  store i32 %queue_head_ptr_1, i32* %queue_head_ptr_2

ST_13: StgValue_168 (161)  [1/1] 0.00ns  loc: scheduler.cpp:84
:20  br label %.preheader.backedge

ST_13: StgValue_169 (163)  [1/1] 0.00ns
.preheader.backedge:0  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	'alloca' operation ('queue_head_ptr') [12]  (0 ns)
	'store' operation of constant 0 on local variable 'queue_head_ptr' [33]  (1.59 ns)

 <State 2>: 3.88ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', scheduler.cpp:14) [36]  (0 ns)
	'icmp' operation ('exitcond1', scheduler.cpp:14) [38]  (3.88 ns)

 <State 3>: 5.33ns
The critical path consists of the following:
	'icmp' operation ('tmp_1', scheduler.cpp:18) [46]  (3.26 ns)
	'and' operation ('or_cond', scheduler.cpp:18) [47]  (2.07 ns)

 <State 4>: 3.25ns
The critical path consists of the following:
	'load' operation ('new_context.current_node', scheduler.cpp:21) on array 'sched_interfaces_context_current_node' [51]  (3.25 ns)

 <State 5>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('sched_interfaces_ack', scheduler.cpp:29) [58]  (0 ns)
	'store' operation (scheduler.cpp:31) of constant 0 on array 'sched_interfaces_ack_V' [59]  (2.32 ns)

 <State 6>: 4.49ns
The critical path consists of the following:
	'load' operation ('history_head_ptr_loa_1', scheduler.cpp:52) on local variable 'history_head_ptr' [98]  (0 ns)
	'add' operation ('history_head_ptr', scheduler.cpp:52) [114]  (2.9 ns)
	'store' operation (scheduler.cpp:52) of variable 'history_head_ptr', scheduler.cpp:52 on local variable 'history_head_ptr' [115]  (1.59 ns)

 <State 7>: 6.52ns
The critical path consists of the following:
	'load' operation ('history_current_node_2', scheduler.cpp:40) on array 'history.current_node', scheduler.cpp:5 [79]  (3.25 ns)
	'icmp' operation ('tmp_10', scheduler.cpp:40) [80]  (3.26 ns)

 <State 8>: 8.28ns
The critical path consists of the following:
	'xor' operation ('rev4', scheduler.cpp:38) [73]  (2.07 ns)
	'or' operation ('brmerge', scheduler.cpp:38) [74]  (2.07 ns)
	'xor' operation ('sel_tmp', scheduler.cpp:38) [87]  (0 ns)
	'and' operation ('tmp9', scheduler.cpp:40) [88]  (0 ns)
	'and' operation ('sel_tmp3', scheduler.cpp:40) [90]  (2.07 ns)
	'select' operation ('sel_tmp4', scheduler.cpp:38) [91]  (0 ns)
	'and' operation ('match_found_1', scheduler.cpp:38) [93]  (2.07 ns)

 <State 9>: 5.33ns
The critical path consists of the following:
	'load' operation ('queue_head_ptr_2_loa_1', scheduler.cpp:86) on local variable 'queue_head_ptr' [165]  (0 ns)
	'icmp' operation ('tmp_2', scheduler.cpp:86) [166]  (3.26 ns)
	'and' operation ('tmp_3', scheduler.cpp:86) [167]  (2.07 ns)

 <State 10>: 6.15ns
The critical path consists of the following:
	'load' operation ('queue_head_ptr_2_loa', scheduler.cpp:67) on local variable 'queue_head_ptr' [132]  (0 ns)
	'add' operation ('queue_head_ptr', scheduler.cpp:71) [141]  (2.9 ns)
	'getelementptr' operation ('queue_current_node_a_1', scheduler.cpp:71) [143]  (0 ns)
	'load' operation ('new_context.current_node', scheduler.cpp:71) on array 'queue.current_node', scheduler.cpp:6 [144]  (3.25 ns)

 <State 11>: 3.25ns
The critical path consists of the following:
	'load' operation ('new_context.current_node', scheduler.cpp:71) on array 'queue.current_node', scheduler.cpp:6 [144]  (3.25 ns)

 <State 12>: 3.25ns
The critical path consists of the following:
	'getelementptr' operation ('setup_interfaces_con', scheduler.cpp:79) [151]  (0 ns)
	'store' operation (scheduler.cpp:79) of variable 'new_context.current_node', scheduler.cpp:71 on array 'setup_interfaces_context_current_node' [152]  (3.25 ns)

 <State 13>: 1.59ns
The critical path consists of the following:
	'store' operation (scheduler.cpp:72) of variable 'queue_head_ptr', scheduler.cpp:71 on local variable 'queue_head_ptr' [160]  (1.59 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A

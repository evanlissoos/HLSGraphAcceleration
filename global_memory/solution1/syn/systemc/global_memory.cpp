// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "global_memory.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic global_memory::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic global_memory::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> global_memory::ap_ST_fsm_state1 = "1";
const sc_lv<7> global_memory::ap_ST_fsm_state2 = "10";
const sc_lv<7> global_memory::ap_ST_fsm_state3 = "100";
const sc_lv<7> global_memory::ap_ST_fsm_state4 = "1000";
const sc_lv<7> global_memory::ap_ST_fsm_state5 = "10000";
const sc_lv<7> global_memory::ap_ST_fsm_state6 = "100000";
const sc_lv<7> global_memory::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> global_memory::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> global_memory::ap_const_lv32_1 = "1";
const sc_lv<1> global_memory::ap_const_lv1_0 = "0";
const sc_lv<32> global_memory::ap_const_lv32_2 = "10";
const sc_lv<1> global_memory::ap_const_lv1_1 = "1";
const sc_lv<32> global_memory::ap_const_lv32_3 = "11";
const sc_lv<32> global_memory::ap_const_lv32_4 = "100";
const sc_lv<32> global_memory::ap_const_lv32_5 = "101";
const sc_lv<2> global_memory::ap_const_lv2_0 = "00";
const sc_lv<32> global_memory::ap_const_lv32_6 = "110";
const sc_lv<2> global_memory::ap_const_lv2_2 = "10";
const sc_lv<2> global_memory::ap_const_lv2_1 = "1";
const sc_lv<2> global_memory::ap_const_lv2_3 = "11";
const bool global_memory::ap_const_boolean_1 = true;

global_memory::global_memory(sc_module_name name) : sc_module(name), mVcdFile(0) {
    global_memory_1_U = new global_memory_globkb("global_memory_1_U");
    global_memory_1_U->clk(ap_clk);
    global_memory_1_U->reset(ap_rst);
    global_memory_1_U->address0(global_memory_1_address0);
    global_memory_1_U->ce0(global_memory_1_ce0);
    global_memory_1_U->we0(global_memory_1_we0);
    global_memory_1_U->d0(global_memory_1_d0);
    global_memory_1_U->q0(global_memory_1_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_151_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_151_p2 );

    SC_METHOD(thread_exitcond1_fu_151_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_140 );

    SC_METHOD(thread_global_memory_1_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( global_memory_addr_reg_277 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_1_fu_168_p1 );

    SC_METHOD(thread_global_memory_1_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_global_memory_1_d0);
    sensitive << ( sel_tmp4_reg_309 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( result_fu_213_p2 );
    sensitive << ( result_5_fu_222_p3 );

    SC_METHOD(thread_global_memory_1_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_1_fu_157_p2);
    sensitive << ( i_reg_140 );

    SC_METHOD(thread_mem_interfaces_ack_V_address0);
    sensitive << ( tmp_reg_244 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mem_interfaces_ack_V_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mem_interfaces_ack_V_d0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mem_interfaces_ack_V_we0);
    sensitive << ( mem_interfaces_req_V_2_reg_258 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mem_interfaces_req_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_163_p1 );

    SC_METHOD(thread_mem_interfaces_req_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mem_interfaces_request_address_address0);
    sensitive << ( tmp_reg_244 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mem_interfaces_request_address_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mem_interfaces_request_data_address0);
    sensitive << ( tmp_reg_244 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mem_interfaces_request_data_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mem_interfaces_request_op_V_address0);
    sensitive << ( tmp_reg_244 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mem_interfaces_request_op_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_mem_interfaces_result_address0);
    sensitive << ( tmp_reg_244 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mem_interfaces_result_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mem_interfaces_result_d0);
    sensitive << ( result_6_reg_314 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mem_interfaces_result_we0);
    sensitive << ( mem_interfaces_req_V_2_reg_258 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_request_data_2_fu_217_p3);
    sensitive << ( request_data_reg_282 );
    sensitive << ( result_7_reg_288 );
    sensitive << ( tmp_6_reg_294 );

    SC_METHOD(thread_result_2_fu_179_p3);
    sensitive << ( mem_interfaces_request_data_q0 );
    sensitive << ( global_memory_1_q0 );
    sensitive << ( tmp_6_fu_173_p2 );

    SC_METHOD(thread_result_4_fu_193_p3);
    sensitive << ( global_memory_1_q0 );
    sensitive << ( sel_tmp_fu_187_p2 );
    sensitive << ( result_2_fu_179_p3 );

    SC_METHOD(thread_result_5_fu_222_p3);
    sensitive << ( result_4_reg_299 );
    sensitive << ( sel_tmp2_reg_304 );
    sensitive << ( request_data_2_fu_217_p3 );

    SC_METHOD(thread_result_6_fu_228_p3);
    sensitive << ( sel_tmp4_reg_309 );
    sensitive << ( result_fu_213_p2 );
    sensitive << ( result_5_fu_222_p3 );

    SC_METHOD(thread_result_fu_213_p2);
    sensitive << ( request_data_reg_282 );
    sensitive << ( result_7_reg_288 );

    SC_METHOD(thread_sel_tmp2_fu_201_p2);
    sensitive << ( mem_interfaces_request_op_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sel_tmp4_fu_207_p2);
    sensitive << ( mem_interfaces_request_op_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sel_tmp_fu_187_p2);
    sensitive << ( mem_interfaces_request_op_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_1_fu_168_p1);
    sensitive << ( mem_interfaces_request_address_q0 );

    SC_METHOD(thread_tmp_6_fu_173_p2);
    sensitive << ( mem_interfaces_request_data_q0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( global_memory_1_q0 );

    SC_METHOD(thread_tmp_fu_163_p1);
    sensitive << ( i_reg_140 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mem_interfaces_req_V_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_151_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "global_memory_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, mem_interfaces_request_address_address0, "(port)mem_interfaces_request_address_address0");
    sc_trace(mVcdFile, mem_interfaces_request_address_ce0, "(port)mem_interfaces_request_address_ce0");
    sc_trace(mVcdFile, mem_interfaces_request_address_q0, "(port)mem_interfaces_request_address_q0");
    sc_trace(mVcdFile, mem_interfaces_request_data_address0, "(port)mem_interfaces_request_data_address0");
    sc_trace(mVcdFile, mem_interfaces_request_data_ce0, "(port)mem_interfaces_request_data_ce0");
    sc_trace(mVcdFile, mem_interfaces_request_data_q0, "(port)mem_interfaces_request_data_q0");
    sc_trace(mVcdFile, mem_interfaces_request_op_V_address0, "(port)mem_interfaces_request_op_V_address0");
    sc_trace(mVcdFile, mem_interfaces_request_op_V_ce0, "(port)mem_interfaces_request_op_V_ce0");
    sc_trace(mVcdFile, mem_interfaces_request_op_V_q0, "(port)mem_interfaces_request_op_V_q0");
    sc_trace(mVcdFile, mem_interfaces_result_address0, "(port)mem_interfaces_result_address0");
    sc_trace(mVcdFile, mem_interfaces_result_ce0, "(port)mem_interfaces_result_ce0");
    sc_trace(mVcdFile, mem_interfaces_result_we0, "(port)mem_interfaces_result_we0");
    sc_trace(mVcdFile, mem_interfaces_result_d0, "(port)mem_interfaces_result_d0");
    sc_trace(mVcdFile, mem_interfaces_ack_V_address0, "(port)mem_interfaces_ack_V_address0");
    sc_trace(mVcdFile, mem_interfaces_ack_V_ce0, "(port)mem_interfaces_ack_V_ce0");
    sc_trace(mVcdFile, mem_interfaces_ack_V_we0, "(port)mem_interfaces_ack_V_we0");
    sc_trace(mVcdFile, mem_interfaces_ack_V_d0, "(port)mem_interfaces_ack_V_d0");
    sc_trace(mVcdFile, mem_interfaces_req_V_address0, "(port)mem_interfaces_req_V_address0");
    sc_trace(mVcdFile, mem_interfaces_req_V_ce0, "(port)mem_interfaces_req_V_ce0");
    sc_trace(mVcdFile, mem_interfaces_req_V_q0, "(port)mem_interfaces_req_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_157_p2, "i_1_fu_157_p2");
    sc_trace(mVcdFile, i_1_reg_239, "i_1_reg_239");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_163_p1, "tmp_fu_163_p1");
    sc_trace(mVcdFile, tmp_reg_244, "tmp_reg_244");
    sc_trace(mVcdFile, exitcond1_fu_151_p2, "exitcond1_fu_151_p2");
    sc_trace(mVcdFile, mem_interfaces_req_V_2_reg_258, "mem_interfaces_req_V_2_reg_258");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, global_memory_addr_reg_277, "global_memory_addr_reg_277");
    sc_trace(mVcdFile, request_data_reg_282, "request_data_reg_282");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, global_memory_1_q0, "global_memory_1_q0");
    sc_trace(mVcdFile, result_7_reg_288, "result_7_reg_288");
    sc_trace(mVcdFile, tmp_6_fu_173_p2, "tmp_6_fu_173_p2");
    sc_trace(mVcdFile, tmp_6_reg_294, "tmp_6_reg_294");
    sc_trace(mVcdFile, result_4_fu_193_p3, "result_4_fu_193_p3");
    sc_trace(mVcdFile, result_4_reg_299, "result_4_reg_299");
    sc_trace(mVcdFile, sel_tmp2_fu_201_p2, "sel_tmp2_fu_201_p2");
    sc_trace(mVcdFile, sel_tmp2_reg_304, "sel_tmp2_reg_304");
    sc_trace(mVcdFile, sel_tmp4_fu_207_p2, "sel_tmp4_fu_207_p2");
    sc_trace(mVcdFile, sel_tmp4_reg_309, "sel_tmp4_reg_309");
    sc_trace(mVcdFile, result_6_fu_228_p3, "result_6_fu_228_p3");
    sc_trace(mVcdFile, result_6_reg_314, "result_6_reg_314");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, global_memory_1_address0, "global_memory_1_address0");
    sc_trace(mVcdFile, global_memory_1_ce0, "global_memory_1_ce0");
    sc_trace(mVcdFile, global_memory_1_we0, "global_memory_1_we0");
    sc_trace(mVcdFile, global_memory_1_d0, "global_memory_1_d0");
    sc_trace(mVcdFile, i_reg_140, "i_reg_140");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_1_fu_168_p1, "tmp_1_fu_168_p1");
    sc_trace(mVcdFile, sel_tmp_fu_187_p2, "sel_tmp_fu_187_p2");
    sc_trace(mVcdFile, result_2_fu_179_p3, "result_2_fu_179_p3");
    sc_trace(mVcdFile, request_data_2_fu_217_p3, "request_data_2_fu_217_p3");
    sc_trace(mVcdFile, result_fu_213_p2, "result_fu_213_p2");
    sc_trace(mVcdFile, result_5_fu_222_p3, "result_5_fu_222_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("global_memory.hdltvin.dat");
    mHdltvoutHandle.open("global_memory.hdltvout.dat");
}

global_memory::~global_memory() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete global_memory_1_U;
}

void global_memory::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_reg_140 = i_1_reg_239.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_140 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        global_memory_addr_reg_277 =  (sc_lv<10>) (tmp_1_fu_168_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_239 = i_1_fu_157_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mem_interfaces_req_V_2_reg_258 = mem_interfaces_req_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        request_data_reg_282 = mem_interfaces_request_data_q0.read();
        result_4_reg_299 = result_4_fu_193_p3.read();
        result_7_reg_288 = global_memory_1_q0.read();
        sel_tmp2_reg_304 = sel_tmp2_fu_201_p2.read();
        sel_tmp4_reg_309 = sel_tmp4_fu_207_p2.read();
        tmp_6_reg_294 = tmp_6_fu_173_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        result_6_reg_314 = result_6_fu_228_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_151_p2.read(), ap_const_lv1_0))) {
        tmp_reg_244 = tmp_fu_163_p1.read();
    }
}

void global_memory::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void global_memory::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void global_memory::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void global_memory::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void global_memory::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void global_memory::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void global_memory::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void global_memory::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_151_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void global_memory::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void global_memory::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_151_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void global_memory::thread_exitcond1_fu_151_p2() {
    exitcond1_fu_151_p2 = (!i_reg_140.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_140.read() == ap_const_lv2_2);
}

void global_memory::thread_global_memory_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        global_memory_1_address0 = global_memory_addr_reg_277.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        global_memory_1_address0 =  (sc_lv<10>) (tmp_1_fu_168_p1.read());
    } else {
        global_memory_1_address0 = "XXXXXXXXXX";
    }
}

void global_memory::thread_global_memory_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        global_memory_1_ce0 = ap_const_logic_1;
    } else {
        global_memory_1_ce0 = ap_const_logic_0;
    }
}

void global_memory::thread_global_memory_1_d0() {
    global_memory_1_d0 = (!sel_tmp4_reg_309.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_reg_309.read()[0].to_bool())? result_fu_213_p2.read(): result_5_fu_222_p3.read());
}

void global_memory::thread_global_memory_1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        global_memory_1_we0 = ap_const_logic_1;
    } else {
        global_memory_1_we0 = ap_const_logic_0;
    }
}

void global_memory::thread_i_1_fu_157_p2() {
    i_1_fu_157_p2 = (!i_reg_140.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_140.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void global_memory::thread_mem_interfaces_ack_V_address0() {
    mem_interfaces_ack_V_address0 =  (sc_lv<1>) (tmp_reg_244.read());
}

void global_memory::thread_mem_interfaces_ack_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        mem_interfaces_ack_V_ce0 = ap_const_logic_1;
    } else {
        mem_interfaces_ack_V_ce0 = ap_const_logic_0;
    }
}

void global_memory::thread_mem_interfaces_ack_V_d0() {
    mem_interfaces_ack_V_d0 = ap_const_lv1_0;
}

void global_memory::thread_mem_interfaces_ack_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(mem_interfaces_req_V_2_reg_258.read(), ap_const_lv1_1))) {
        mem_interfaces_ack_V_we0 = ap_const_logic_1;
    } else {
        mem_interfaces_ack_V_we0 = ap_const_logic_0;
    }
}

void global_memory::thread_mem_interfaces_req_V_address0() {
    mem_interfaces_req_V_address0 =  (sc_lv<1>) (tmp_fu_163_p1.read());
}

void global_memory::thread_mem_interfaces_req_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        mem_interfaces_req_V_ce0 = ap_const_logic_1;
    } else {
        mem_interfaces_req_V_ce0 = ap_const_logic_0;
    }
}

void global_memory::thread_mem_interfaces_request_address_address0() {
    mem_interfaces_request_address_address0 =  (sc_lv<1>) (tmp_reg_244.read());
}

void global_memory::thread_mem_interfaces_request_address_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mem_interfaces_request_address_ce0 = ap_const_logic_1;
    } else {
        mem_interfaces_request_address_ce0 = ap_const_logic_0;
    }
}

void global_memory::thread_mem_interfaces_request_data_address0() {
    mem_interfaces_request_data_address0 =  (sc_lv<1>) (tmp_reg_244.read());
}

void global_memory::thread_mem_interfaces_request_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mem_interfaces_request_data_ce0 = ap_const_logic_1;
    } else {
        mem_interfaces_request_data_ce0 = ap_const_logic_0;
    }
}

void global_memory::thread_mem_interfaces_request_op_V_address0() {
    mem_interfaces_request_op_V_address0 =  (sc_lv<1>) (tmp_reg_244.read());
}

void global_memory::thread_mem_interfaces_request_op_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mem_interfaces_request_op_V_ce0 = ap_const_logic_1;
    } else {
        mem_interfaces_request_op_V_ce0 = ap_const_logic_0;
    }
}

void global_memory::thread_mem_interfaces_result_address0() {
    mem_interfaces_result_address0 =  (sc_lv<1>) (tmp_reg_244.read());
}

void global_memory::thread_mem_interfaces_result_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        mem_interfaces_result_ce0 = ap_const_logic_1;
    } else {
        mem_interfaces_result_ce0 = ap_const_logic_0;
    }
}

void global_memory::thread_mem_interfaces_result_d0() {
    mem_interfaces_result_d0 = result_6_reg_314.read();
}

void global_memory::thread_mem_interfaces_result_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(mem_interfaces_req_V_2_reg_258.read(), ap_const_lv1_1))) {
        mem_interfaces_result_we0 = ap_const_logic_1;
    } else {
        mem_interfaces_result_we0 = ap_const_logic_0;
    }
}

void global_memory::thread_request_data_2_fu_217_p3() {
    request_data_2_fu_217_p3 = (!tmp_6_reg_294.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_294.read()[0].to_bool())? request_data_reg_282.read(): result_7_reg_288.read());
}

void global_memory::thread_result_2_fu_179_p3() {
    result_2_fu_179_p3 = (!tmp_6_fu_173_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_6_fu_173_p2.read()[0].to_bool())? global_memory_1_q0.read(): mem_interfaces_request_data_q0.read());
}

void global_memory::thread_result_4_fu_193_p3() {
    result_4_fu_193_p3 = (!sel_tmp_fu_187_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_187_p2.read()[0].to_bool())? result_2_fu_179_p3.read(): global_memory_1_q0.read());
}

void global_memory::thread_result_5_fu_222_p3() {
    result_5_fu_222_p3 = (!sel_tmp2_reg_304.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_reg_304.read()[0].to_bool())? request_data_2_fu_217_p3.read(): result_4_reg_299.read());
}

void global_memory::thread_result_6_fu_228_p3() {
    result_6_fu_228_p3 = (!sel_tmp4_reg_309.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_reg_309.read()[0].to_bool())? result_fu_213_p2.read(): result_5_fu_222_p3.read());
}

void global_memory::thread_result_fu_213_p2() {
    result_fu_213_p2 = (!result_7_reg_288.read().is_01() || !request_data_reg_282.read().is_01())? sc_lv<32>(): (sc_biguint<32>(result_7_reg_288.read()) + sc_biguint<32>(request_data_reg_282.read()));
}

void global_memory::thread_sel_tmp2_fu_201_p2() {
    sel_tmp2_fu_201_p2 = (!mem_interfaces_request_op_V_q0.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(mem_interfaces_request_op_V_q0.read() == ap_const_lv2_2);
}

void global_memory::thread_sel_tmp4_fu_207_p2() {
    sel_tmp4_fu_207_p2 = (!mem_interfaces_request_op_V_q0.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(mem_interfaces_request_op_V_q0.read() == ap_const_lv2_1);
}

void global_memory::thread_sel_tmp_fu_187_p2() {
    sel_tmp_fu_187_p2 = (!mem_interfaces_request_op_V_q0.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(mem_interfaces_request_op_V_q0.read() == ap_const_lv2_3);
}

void global_memory::thread_tmp_1_fu_168_p1() {
    tmp_1_fu_168_p1 = esl_sext<64,32>(mem_interfaces_request_address_q0.read());
}

void global_memory::thread_tmp_6_fu_173_p2() {
    tmp_6_fu_173_p2 = (!global_memory_1_q0.read().is_01() || !mem_interfaces_request_data_q0.read().is_01())? sc_lv<1>(): (sc_bigint<32>(global_memory_1_q0.read()) > sc_bigint<32>(mem_interfaces_request_data_q0.read()));
}

void global_memory::thread_tmp_fu_163_p1() {
    tmp_fu_163_p1 = esl_zext<64,2>(i_reg_140.read());
}

void global_memory::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_151_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(mem_interfaces_req_V_q0.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void global_memory::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_request_address_address0\" :  \"" << mem_interfaces_request_address_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_request_address_ce0\" :  \"" << mem_interfaces_request_address_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_interfaces_request_address_q0\" :  \"" << mem_interfaces_request_address_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_request_data_address0\" :  \"" << mem_interfaces_request_data_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_request_data_ce0\" :  \"" << mem_interfaces_request_data_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_interfaces_request_data_q0\" :  \"" << mem_interfaces_request_data_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_request_op_V_address0\" :  \"" << mem_interfaces_request_op_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_request_op_V_ce0\" :  \"" << mem_interfaces_request_op_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_interfaces_request_op_V_q0\" :  \"" << mem_interfaces_request_op_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_result_address0\" :  \"" << mem_interfaces_result_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_result_ce0\" :  \"" << mem_interfaces_result_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_result_we0\" :  \"" << mem_interfaces_result_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_result_d0\" :  \"" << mem_interfaces_result_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_ack_V_address0\" :  \"" << mem_interfaces_ack_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_ack_V_ce0\" :  \"" << mem_interfaces_ack_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_ack_V_we0\" :  \"" << mem_interfaces_ack_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_ack_V_d0\" :  \"" << mem_interfaces_ack_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_req_V_address0\" :  \"" << mem_interfaces_req_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_interfaces_req_V_ce0\" :  \"" << mem_interfaces_req_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_interfaces_req_V_q0\" :  \"" << mem_interfaces_req_V_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


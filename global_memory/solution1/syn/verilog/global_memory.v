// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="global_memory,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.588000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=267,HLS_SYN_LUT=294}" *)

module global_memory (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mem_interfaces_request_address_address0,
        mem_interfaces_request_address_ce0,
        mem_interfaces_request_address_q0,
        mem_interfaces_request_data_address0,
        mem_interfaces_request_data_ce0,
        mem_interfaces_request_data_q0,
        mem_interfaces_request_op_V_address0,
        mem_interfaces_request_op_V_ce0,
        mem_interfaces_request_op_V_q0,
        mem_interfaces_result_address0,
        mem_interfaces_result_ce0,
        mem_interfaces_result_we0,
        mem_interfaces_result_d0,
        mem_interfaces_ack_V_address0,
        mem_interfaces_ack_V_ce0,
        mem_interfaces_ack_V_we0,
        mem_interfaces_ack_V_d0,
        mem_interfaces_req_V_address0,
        mem_interfaces_req_V_ce0,
        mem_interfaces_req_V_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] mem_interfaces_request_address_address0;
output   mem_interfaces_request_address_ce0;
input  [31:0] mem_interfaces_request_address_q0;
output  [0:0] mem_interfaces_request_data_address0;
output   mem_interfaces_request_data_ce0;
input  [31:0] mem_interfaces_request_data_q0;
output  [0:0] mem_interfaces_request_op_V_address0;
output   mem_interfaces_request_op_V_ce0;
input  [1:0] mem_interfaces_request_op_V_q0;
output  [0:0] mem_interfaces_result_address0;
output   mem_interfaces_result_ce0;
output   mem_interfaces_result_we0;
output  [31:0] mem_interfaces_result_d0;
output  [0:0] mem_interfaces_ack_V_address0;
output   mem_interfaces_ack_V_ce0;
output   mem_interfaces_ack_V_we0;
output  [0:0] mem_interfaces_ack_V_d0;
output  [0:0] mem_interfaces_req_V_address0;
output   mem_interfaces_req_V_ce0;
input  [0:0] mem_interfaces_req_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mem_interfaces_request_address_ce0;
reg mem_interfaces_request_data_ce0;
reg mem_interfaces_request_op_V_ce0;
reg mem_interfaces_result_ce0;
reg mem_interfaces_result_we0;
reg mem_interfaces_ack_V_ce0;
reg mem_interfaces_ack_V_we0;
reg mem_interfaces_req_V_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_1_fu_157_p2;
reg   [1:0] i_1_reg_239;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_163_p1;
reg   [63:0] tmp_reg_244;
wire   [0:0] exitcond1_fu_151_p2;
reg   [0:0] mem_interfaces_req_V_2_reg_258;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [9:0] global_memory_addr_reg_277;
reg   [31:0] request_data_reg_282;
wire    ap_CS_fsm_state5;
wire   [31:0] global_memory_1_q0;
reg   [31:0] result_7_reg_288;
wire   [0:0] tmp_6_fu_173_p2;
reg   [0:0] tmp_6_reg_294;
wire   [31:0] result_4_fu_193_p3;
reg   [31:0] result_4_reg_299;
wire   [0:0] sel_tmp2_fu_201_p2;
reg   [0:0] sel_tmp2_reg_304;
wire   [0:0] sel_tmp4_fu_207_p2;
reg   [0:0] sel_tmp4_reg_309;
wire   [31:0] result_6_fu_228_p3;
reg   [31:0] result_6_reg_314;
wire    ap_CS_fsm_state6;
reg   [9:0] global_memory_1_address0;
reg    global_memory_1_ce0;
reg    global_memory_1_we0;
wire   [31:0] global_memory_1_d0;
reg   [1:0] i_reg_140;
wire    ap_CS_fsm_state7;
wire  signed [63:0] tmp_1_fu_168_p1;
wire   [0:0] sel_tmp_fu_187_p2;
wire   [31:0] result_2_fu_179_p3;
wire   [31:0] request_data_2_fu_217_p3;
wire   [31:0] result_fu_213_p2;
wire   [31:0] result_5_fu_222_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

global_memory_globkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
global_memory_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(global_memory_1_address0),
    .ce0(global_memory_1_ce0),
    .we0(global_memory_1_we0),
    .d0(global_memory_1_d0),
    .q0(global_memory_1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_140 <= i_1_reg_239;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_140 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        global_memory_addr_reg_277 <= tmp_1_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_239 <= i_1_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_interfaces_req_V_2_reg_258 <= mem_interfaces_req_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        request_data_reg_282 <= mem_interfaces_request_data_q0;
        result_4_reg_299 <= result_4_fu_193_p3;
        result_7_reg_288 <= global_memory_1_q0;
        sel_tmp2_reg_304 <= sel_tmp2_fu_201_p2;
        sel_tmp4_reg_309 <= sel_tmp4_fu_207_p2;
        tmp_6_reg_294 <= tmp_6_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        result_6_reg_314 <= result_6_fu_228_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_151_p2 == 1'd0))) begin
        tmp_reg_244[1 : 0] <= tmp_fu_163_p1[1 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_151_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_151_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        global_memory_1_address0 = global_memory_addr_reg_277;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        global_memory_1_address0 = tmp_1_fu_168_p1;
    end else begin
        global_memory_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        global_memory_1_ce0 = 1'b1;
    end else begin
        global_memory_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        global_memory_1_we0 = 1'b1;
    end else begin
        global_memory_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mem_interfaces_ack_V_ce0 = 1'b1;
    end else begin
        mem_interfaces_ack_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (mem_interfaces_req_V_2_reg_258 == 1'd1))) begin
        mem_interfaces_ack_V_we0 = 1'b1;
    end else begin
        mem_interfaces_ack_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mem_interfaces_req_V_ce0 = 1'b1;
    end else begin
        mem_interfaces_req_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mem_interfaces_request_address_ce0 = 1'b1;
    end else begin
        mem_interfaces_request_address_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_interfaces_request_data_ce0 = 1'b1;
    end else begin
        mem_interfaces_request_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_interfaces_request_op_V_ce0 = 1'b1;
    end else begin
        mem_interfaces_request_op_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mem_interfaces_result_ce0 = 1'b1;
    end else begin
        mem_interfaces_result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (mem_interfaces_req_V_2_reg_258 == 1'd1))) begin
        mem_interfaces_result_we0 = 1'b1;
    end else begin
        mem_interfaces_result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_151_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (mem_interfaces_req_V_q0 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond1_fu_151_p2 = ((i_reg_140 == 2'd2) ? 1'b1 : 1'b0);

assign global_memory_1_d0 = ((sel_tmp4_reg_309[0:0] === 1'b1) ? result_fu_213_p2 : result_5_fu_222_p3);

assign i_1_fu_157_p2 = (i_reg_140 + 2'd1);

assign mem_interfaces_ack_V_address0 = tmp_reg_244;

assign mem_interfaces_ack_V_d0 = 1'd0;

assign mem_interfaces_req_V_address0 = tmp_fu_163_p1;

assign mem_interfaces_request_address_address0 = tmp_reg_244;

assign mem_interfaces_request_data_address0 = tmp_reg_244;

assign mem_interfaces_request_op_V_address0 = tmp_reg_244;

assign mem_interfaces_result_address0 = tmp_reg_244;

assign mem_interfaces_result_d0 = result_6_reg_314;

assign request_data_2_fu_217_p3 = ((tmp_6_reg_294[0:0] === 1'b1) ? request_data_reg_282 : result_7_reg_288);

assign result_2_fu_179_p3 = ((tmp_6_fu_173_p2[0:0] === 1'b1) ? global_memory_1_q0 : mem_interfaces_request_data_q0);

assign result_4_fu_193_p3 = ((sel_tmp_fu_187_p2[0:0] === 1'b1) ? result_2_fu_179_p3 : global_memory_1_q0);

assign result_5_fu_222_p3 = ((sel_tmp2_reg_304[0:0] === 1'b1) ? request_data_2_fu_217_p3 : result_4_reg_299);

assign result_6_fu_228_p3 = ((sel_tmp4_reg_309[0:0] === 1'b1) ? result_fu_213_p2 : result_5_fu_222_p3);

assign result_fu_213_p2 = (result_7_reg_288 + request_data_reg_282);

assign sel_tmp2_fu_201_p2 = ((mem_interfaces_request_op_V_q0 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_207_p2 = ((mem_interfaces_request_op_V_q0 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp_fu_187_p2 = ((mem_interfaces_request_op_V_q0 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_1_fu_168_p1 = $signed(mem_interfaces_request_address_q0);

assign tmp_6_fu_173_p2 = (($signed(global_memory_1_q0) > $signed(mem_interfaces_request_data_q0)) ? 1'b1 : 1'b0);

assign tmp_fu_163_p1 = i_reg_140;

always @ (posedge ap_clk) begin
    tmp_reg_244[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //global_memory

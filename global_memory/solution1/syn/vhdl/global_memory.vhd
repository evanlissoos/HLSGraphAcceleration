-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity global_memory is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mem_interfaces_request_address_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_interfaces_request_address_ce0 : OUT STD_LOGIC;
    mem_interfaces_request_address_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mem_interfaces_request_data_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_interfaces_request_data_ce0 : OUT STD_LOGIC;
    mem_interfaces_request_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mem_interfaces_request_op_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_interfaces_request_op_V_ce0 : OUT STD_LOGIC;
    mem_interfaces_request_op_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    mem_interfaces_result_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_interfaces_result_ce0 : OUT STD_LOGIC;
    mem_interfaces_result_we0 : OUT STD_LOGIC;
    mem_interfaces_result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mem_interfaces_ack_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_interfaces_ack_V_ce0 : OUT STD_LOGIC;
    mem_interfaces_ack_V_we0 : OUT STD_LOGIC;
    mem_interfaces_ack_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_interfaces_req_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_interfaces_req_V_ce0 : OUT STD_LOGIC;
    mem_interfaces_req_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of global_memory is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "global_memory,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.588000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=267,HLS_SYN_LUT=294}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_157_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_239 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_244 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_interfaces_req_V_2_reg_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal global_memory_addr_reg_277 : STD_LOGIC_VECTOR (9 downto 0);
    signal request_data_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal global_memory_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_7_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_294 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_4_fu_193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_4_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_6_fu_228_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_6_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal global_memory_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal global_memory_1_ce0 : STD_LOGIC;
    signal global_memory_1_we0 : STD_LOGIC;
    signal global_memory_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_140 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_2_fu_179_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal request_data_2_fu_217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_5_fu_222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component global_memory_globkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    global_memory_1_U : component global_memory_globkb
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => global_memory_1_address0,
        ce0 => global_memory_1_ce0,
        we0 => global_memory_1_we0,
        d0 => global_memory_1_d0,
        q0 => global_memory_1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_140 <= i_1_reg_239;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_140 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                global_memory_addr_reg_277 <= tmp_1_fu_168_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_239 <= i_1_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mem_interfaces_req_V_2_reg_258 <= mem_interfaces_req_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                request_data_reg_282 <= mem_interfaces_request_data_q0;
                result_4_reg_299 <= result_4_fu_193_p3;
                result_7_reg_288 <= global_memory_1_q0;
                sel_tmp2_reg_304 <= sel_tmp2_fu_201_p2;
                sel_tmp4_reg_309 <= sel_tmp4_fu_207_p2;
                tmp_6_reg_294 <= tmp_6_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                result_6_reg_314 <= result_6_fu_228_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_151_p2 = ap_const_lv1_0))) then
                    tmp_reg_244(1 downto 0) <= tmp_fu_163_p1(1 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_244(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, mem_interfaces_req_V_q0, ap_CS_fsm_state2, exitcond1_fu_151_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_151_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (mem_interfaces_req_V_q0 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_151_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_151_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_151_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_151_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_151_p2 <= "1" when (i_reg_140 = ap_const_lv2_2) else "0";

    global_memory_1_address0_assign_proc : process(ap_CS_fsm_state4, global_memory_addr_reg_277, ap_CS_fsm_state6, tmp_1_fu_168_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            global_memory_1_address0 <= global_memory_addr_reg_277;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            global_memory_1_address0 <= tmp_1_fu_168_p1(10 - 1 downto 0);
        else 
            global_memory_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    global_memory_1_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            global_memory_1_ce0 <= ap_const_logic_1;
        else 
            global_memory_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    global_memory_1_d0 <= 
        result_fu_213_p2 when (sel_tmp4_reg_309(0) = '1') else 
        result_5_fu_222_p3;

    global_memory_1_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            global_memory_1_we0 <= ap_const_logic_1;
        else 
            global_memory_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_157_p2 <= std_logic_vector(unsigned(i_reg_140) + unsigned(ap_const_lv2_1));
    mem_interfaces_ack_V_address0 <= tmp_reg_244(1 - 1 downto 0);

    mem_interfaces_ack_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_interfaces_ack_V_ce0 <= ap_const_logic_1;
        else 
            mem_interfaces_ack_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_interfaces_ack_V_d0 <= ap_const_lv1_0;

    mem_interfaces_ack_V_we0_assign_proc : process(mem_interfaces_req_V_2_reg_258, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (mem_interfaces_req_V_2_reg_258 = ap_const_lv1_1))) then 
            mem_interfaces_ack_V_we0 <= ap_const_logic_1;
        else 
            mem_interfaces_ack_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_interfaces_req_V_address0 <= tmp_fu_163_p1(1 - 1 downto 0);

    mem_interfaces_req_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mem_interfaces_req_V_ce0 <= ap_const_logic_1;
        else 
            mem_interfaces_req_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_interfaces_request_address_address0 <= tmp_reg_244(1 - 1 downto 0);

    mem_interfaces_request_address_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_interfaces_request_address_ce0 <= ap_const_logic_1;
        else 
            mem_interfaces_request_address_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_interfaces_request_data_address0 <= tmp_reg_244(1 - 1 downto 0);

    mem_interfaces_request_data_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_interfaces_request_data_ce0 <= ap_const_logic_1;
        else 
            mem_interfaces_request_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_interfaces_request_op_V_address0 <= tmp_reg_244(1 - 1 downto 0);

    mem_interfaces_request_op_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_interfaces_request_op_V_ce0 <= ap_const_logic_1;
        else 
            mem_interfaces_request_op_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_interfaces_result_address0 <= tmp_reg_244(1 - 1 downto 0);

    mem_interfaces_result_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_interfaces_result_ce0 <= ap_const_logic_1;
        else 
            mem_interfaces_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_interfaces_result_d0 <= result_6_reg_314;

    mem_interfaces_result_we0_assign_proc : process(mem_interfaces_req_V_2_reg_258, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (mem_interfaces_req_V_2_reg_258 = ap_const_lv1_1))) then 
            mem_interfaces_result_we0 <= ap_const_logic_1;
        else 
            mem_interfaces_result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    request_data_2_fu_217_p3 <= 
        request_data_reg_282 when (tmp_6_reg_294(0) = '1') else 
        result_7_reg_288;
    result_2_fu_179_p3 <= 
        global_memory_1_q0 when (tmp_6_fu_173_p2(0) = '1') else 
        mem_interfaces_request_data_q0;
    result_4_fu_193_p3 <= 
        result_2_fu_179_p3 when (sel_tmp_fu_187_p2(0) = '1') else 
        global_memory_1_q0;
    result_5_fu_222_p3 <= 
        request_data_2_fu_217_p3 when (sel_tmp2_reg_304(0) = '1') else 
        result_4_reg_299;
    result_6_fu_228_p3 <= 
        result_fu_213_p2 when (sel_tmp4_reg_309(0) = '1') else 
        result_5_fu_222_p3;
    result_fu_213_p2 <= std_logic_vector(unsigned(result_7_reg_288) + unsigned(request_data_reg_282));
    sel_tmp2_fu_201_p2 <= "1" when (mem_interfaces_request_op_V_q0 = ap_const_lv2_2) else "0";
    sel_tmp4_fu_207_p2 <= "1" when (mem_interfaces_request_op_V_q0 = ap_const_lv2_1) else "0";
    sel_tmp_fu_187_p2 <= "1" when (mem_interfaces_request_op_V_q0 = ap_const_lv2_3) else "0";
        tmp_1_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mem_interfaces_request_address_q0),64));

    tmp_6_fu_173_p2 <= "1" when (signed(global_memory_1_q0) > signed(mem_interfaces_request_data_q0)) else "0";
    tmp_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_140),64));
end behav;

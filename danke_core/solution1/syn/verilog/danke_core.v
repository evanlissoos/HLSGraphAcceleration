// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="danke_core,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.578000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=4,HLS_SYN_FF=1928,HLS_SYN_LUT=1656}" *)

module danke_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        instruction_memory_V_address0,
        instruction_memory_V_ce0,
        instruction_memory_V_q0,
        data_memory_V_address0,
        data_memory_V_ce0,
        data_memory_V_we0,
        data_memory_V_d0,
        data_memory_V_q0,
        halted_V_i,
        halted_V_o,
        halted_V_o_ap_vld,
        core_id
);

parameter    ap_ST_fsm_state1 = 56'd1;
parameter    ap_ST_fsm_state2 = 56'd2;
parameter    ap_ST_fsm_state3 = 56'd4;
parameter    ap_ST_fsm_state4 = 56'd8;
parameter    ap_ST_fsm_state5 = 56'd16;
parameter    ap_ST_fsm_state6 = 56'd32;
parameter    ap_ST_fsm_state7 = 56'd64;
parameter    ap_ST_fsm_state8 = 56'd128;
parameter    ap_ST_fsm_state9 = 56'd256;
parameter    ap_ST_fsm_state10 = 56'd512;
parameter    ap_ST_fsm_state11 = 56'd1024;
parameter    ap_ST_fsm_state12 = 56'd2048;
parameter    ap_ST_fsm_state13 = 56'd4096;
parameter    ap_ST_fsm_state14 = 56'd8192;
parameter    ap_ST_fsm_state15 = 56'd16384;
parameter    ap_ST_fsm_state16 = 56'd32768;
parameter    ap_ST_fsm_state17 = 56'd65536;
parameter    ap_ST_fsm_state18 = 56'd131072;
parameter    ap_ST_fsm_state19 = 56'd262144;
parameter    ap_ST_fsm_state20 = 56'd524288;
parameter    ap_ST_fsm_state21 = 56'd1048576;
parameter    ap_ST_fsm_state22 = 56'd2097152;
parameter    ap_ST_fsm_state23 = 56'd4194304;
parameter    ap_ST_fsm_state24 = 56'd8388608;
parameter    ap_ST_fsm_state25 = 56'd16777216;
parameter    ap_ST_fsm_state26 = 56'd33554432;
parameter    ap_ST_fsm_state27 = 56'd67108864;
parameter    ap_ST_fsm_state28 = 56'd134217728;
parameter    ap_ST_fsm_state29 = 56'd268435456;
parameter    ap_ST_fsm_state30 = 56'd536870912;
parameter    ap_ST_fsm_state31 = 56'd1073741824;
parameter    ap_ST_fsm_state32 = 56'd2147483648;
parameter    ap_ST_fsm_state33 = 56'd4294967296;
parameter    ap_ST_fsm_state34 = 56'd8589934592;
parameter    ap_ST_fsm_state35 = 56'd17179869184;
parameter    ap_ST_fsm_state36 = 56'd34359738368;
parameter    ap_ST_fsm_state37 = 56'd68719476736;
parameter    ap_ST_fsm_state38 = 56'd137438953472;
parameter    ap_ST_fsm_state39 = 56'd274877906944;
parameter    ap_ST_fsm_state40 = 56'd549755813888;
parameter    ap_ST_fsm_state41 = 56'd1099511627776;
parameter    ap_ST_fsm_state42 = 56'd2199023255552;
parameter    ap_ST_fsm_state43 = 56'd4398046511104;
parameter    ap_ST_fsm_state44 = 56'd8796093022208;
parameter    ap_ST_fsm_state45 = 56'd17592186044416;
parameter    ap_ST_fsm_state46 = 56'd35184372088832;
parameter    ap_ST_fsm_state47 = 56'd70368744177664;
parameter    ap_ST_fsm_state48 = 56'd140737488355328;
parameter    ap_ST_fsm_state49 = 56'd281474976710656;
parameter    ap_ST_fsm_state50 = 56'd562949953421312;
parameter    ap_ST_fsm_state51 = 56'd1125899906842624;
parameter    ap_ST_fsm_state52 = 56'd2251799813685248;
parameter    ap_ST_fsm_state53 = 56'd4503599627370496;
parameter    ap_ST_fsm_state54 = 56'd9007199254740992;
parameter    ap_ST_fsm_state55 = 56'd18014398509481984;
parameter    ap_ST_fsm_state56 = 56'd36028797018963968;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] instruction_memory_V_address0;
output   instruction_memory_V_ce0;
input  [24:0] instruction_memory_V_q0;
output  [9:0] data_memory_V_address0;
output   data_memory_V_ce0;
output   data_memory_V_we0;
output  [31:0] data_memory_V_d0;
input  [31:0] data_memory_V_q0;
input  [0:0] halted_V_i;
output  [0:0] halted_V_o;
output   halted_V_o_ap_vld;
input  [31:0] core_id;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg instruction_memory_V_ce0;
reg[9:0] data_memory_V_address0;
reg data_memory_V_ce0;
reg data_memory_V_we0;
reg[0:0] halted_V_o;
reg halted_V_o_ap_vld;

(* fsm_encoding = "none" *) reg   [55:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] t_V_load_1_reg_677;
wire    ap_CS_fsm_state2;
wire   [0:0] halted_V_read_read_fu_124_p2;
reg   [24:0] ir_V_reg_688;
wire    ap_CS_fsm_state3;
reg   [2:0] opcode_V_reg_693;
wire   [5:0] sr2_V_fu_362_p4;
reg   [5:0] sr2_V_reg_703;
reg   [5:0] dr_V_reg_708;
wire   [3:0] intop_V_fu_382_p1;
reg   [3:0] intop_V_reg_715;
wire   [9:0] offset_V_fu_386_p1;
reg   [9:0] offset_V_reg_719;
reg   [0:0] tmp_12_reg_724;
wire  signed [31:0] op1_V_fu_438_p3;
reg  signed [31:0] op1_V_reg_749;
wire    ap_CS_fsm_state4;
wire  signed [31:0] rhs_V_fu_523_p3;
reg  signed [31:0] rhs_V_reg_769;
wire    ap_CS_fsm_state6;
wire   [31:0] r_V_6_fu_571_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] r_V_7_fu_575_p2;
reg   [31:0] r_V_7_reg_808;
wire    ap_CS_fsm_state10;
wire   [31:0] r_V_4_fu_580_p2;
wire    ap_CS_fsm_state12;
wire   [31:0] r_V_5_fu_584_p2;
reg   [31:0] r_V_5_reg_818;
wire    ap_CS_fsm_state13;
wire   [31:0] result_V_12_fu_589_p2;
wire    ap_CS_fsm_state15;
wire   [31:0] r_V_9_fu_594_p2;
wire   [31:0] r_V_8_fu_598_p2;
wire   [31:0] result_V_9_fu_606_p1;
wire   [31:0] result_V_8_fu_610_p1;
wire   [31:0] result_V_7_fu_624_p1;
wire   [31:0] result_V_6_fu_634_p1;
wire   [31:0] result_V_5_fu_638_p1;
wire   [31:0] result_V_4_fu_646_p1;
wire   [31:0] grp_fu_650_p2;
wire    ap_CS_fsm_state51;
wire   [31:0] grp_fu_654_p2;
reg   [31:0] result_V_2_reg_873;
wire    ap_CS_fsm_state53;
wire   [31:0] result_V_1_fu_658_p2;
wire    ap_CS_fsm_state55;
wire   [31:0] grp_fu_310_p2;
reg   [4:0] regfile_V_address0;
reg    regfile_V_ce0;
reg    regfile_V_we0;
wire   [31:0] regfile_V_q0;
reg   [4:0] regfile_V_address1;
reg    regfile_V_ce1;
reg    regfile_V_we1;
wire   [31:0] regfile_V_q1;
reg   [4:0] special_regfile_V_address0;
reg    special_regfile_V_ce0;
reg    special_regfile_V_we0;
wire   [31:0] special_regfile_V_q0;
wire   [4:0] special_regfile_V_address1;
reg    special_regfile_V_ce1;
wire   [31:0] special_regfile_V_q1;
reg   [31:0] p_1_reg_245;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state11;
wire  signed [63:0] tmp_fu_337_p1;
wire   [63:0] tmp_s_fu_408_p1;
wire   [63:0] tmp_1_fu_413_p1;
wire   [63:0] tmp_4_fu_428_p1;
wire   [63:0] tmp_5_fu_433_p1;
wire   [63:0] tmp_2_fu_532_p1;
wire  signed [63:0] tmp_3_fu_536_p1;
wire    ap_CS_fsm_state5;
wire  signed [63:0] tmp_8_fu_541_p1;
wire   [63:0] tmp_9_fu_546_p1;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_7_fu_662_p1;
wire    ap_CS_fsm_state56;
reg   [31:0] t_V_fu_106;
wire   [31:0] grp_fu_299_p2;
wire   [31:0] grp_fu_314_p2;
wire   [31:0] pc_V_fu_561_p2;
wire    ap_CS_fsm_state8;
wire   [5:0] sr1_V_fu_352_p4;
wire   [5:0] r_V_fu_398_p2;
wire  signed [32:0] r_V_cast_fu_404_p1;
wire   [5:0] r_V_1_fu_418_p2;
wire  signed [32:0] r_V_1_cast_fu_424_p1;
wire   [0:0] sel_tmp1_fu_460_p2;
wire   [0:0] sel_tmp2_fu_465_p2;
wire   [0:0] tmp1_fu_470_p2;
wire   [0:0] sel_tmp_fu_455_p2;
wire   [0:0] sel_tmp4_fu_476_p2;
wire  signed [31:0] op2_V_fu_452_p1;
wire   [0:0] sel_tmp9_fu_490_p2;
wire   [0:0] sel_tmp3_fu_495_p2;
wire   [0:0] sel_tmp6_fu_500_p2;
wire   [0:0] tmp_13_fu_445_p3;
wire   [0:0] tmp3_fu_511_p2;
wire   [0:0] tmp2_fu_505_p2;
wire   [0:0] sel_tmp7_fu_517_p2;
wire   [31:0] sel_tmp5_fu_482_p3;
wire   [0:0] grp_fu_324_p2;
wire   [9:0] p_0130_0_pn_fu_550_p3;
wire  signed [31:0] p_0130_0_pn_cast_fu_557_p1;
wire   [31:0] grp_fu_328_p2;
wire   [0:0] val_assign_6_fu_602_p2;
wire   [0:0] slt1_fu_614_p2;
wire   [0:0] rev1_fu_618_p2;
wire   [0:0] grp_fu_333_p2;
wire   [0:0] rev_fu_628_p2;
wire   [0:0] val_assign_1_fu_642_p2;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state52;
wire   [0:0] grp_fu_292_p3;
reg    grp_fu_650_ap_start;
wire    grp_fu_650_ap_done;
reg   [55:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 56'd1;
end

danke_core_regfilbkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
regfile_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(regfile_V_address0),
    .ce0(regfile_V_ce0),
    .we0(regfile_V_we0),
    .d0(p_1_reg_245),
    .q0(regfile_V_q0),
    .address1(regfile_V_address1),
    .ce1(regfile_V_ce1),
    .we1(regfile_V_we1),
    .d1(data_memory_V_q0),
    .q1(regfile_V_q1)
);

danke_core_speciacud #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
special_regfile_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(special_regfile_V_address0),
    .ce0(special_regfile_V_ce0),
    .we0(special_regfile_V_we0),
    .d0(core_id),
    .q0(special_regfile_V_q0),
    .address1(special_regfile_V_address1),
    .ce1(special_regfile_V_ce1),
    .q1(special_regfile_V_q1)
);

danke_core_sdiv_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
danke_core_sdiv_3dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_650_ap_start),
    .done(grp_fu_650_ap_done),
    .din0(op1_V_reg_749),
    .din1(rhs_V_reg_769),
    .ce(1'b1),
    .dout(grp_fu_650_p2)
);

danke_core_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
danke_core_mul_32eOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rhs_V_reg_769),
    .din1(op1_V_reg_749),
    .ce(1'b1),
    .dout(grp_fu_654_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (((intop_V_reg_715 == 4'd15) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd15) & (opcode_V_reg_693 == 3'd1))))) begin
        p_1_reg_245 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_1_reg_245 <= r_V_6_fu_571_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_1_reg_245 <= r_V_7_reg_808;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_1_reg_245 <= r_V_4_fu_580_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        p_1_reg_245 <= r_V_5_reg_818;
    end else if (((1'b1 == ap_CS_fsm_state55) & (intop_V_reg_715 == 4'd0))) begin
        p_1_reg_245 <= grp_fu_310_p2;
    end else if (((1'b1 == ap_CS_fsm_state55) & (intop_V_reg_715 == 4'd1))) begin
        p_1_reg_245 <= result_V_1_fu_658_p2;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        p_1_reg_245 <= result_V_2_reg_873;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        p_1_reg_245 <= grp_fu_650_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd4))) begin
        p_1_reg_245 <= result_V_4_fu_646_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd5))) begin
        p_1_reg_245 <= result_V_5_fu_638_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd6))) begin
        p_1_reg_245 <= result_V_6_fu_634_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd7))) begin
        p_1_reg_245 <= result_V_7_fu_624_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd8))) begin
        p_1_reg_245 <= result_V_8_fu_610_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd9))) begin
        p_1_reg_245 <= result_V_9_fu_606_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd10))) begin
        p_1_reg_245 <= r_V_8_fu_598_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd11))) begin
        p_1_reg_245 <= r_V_9_fu_594_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (intop_V_reg_715 == 4'd12))) begin
        p_1_reg_245 <= result_V_12_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_V_fu_106 <= pc_V_fu_561_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        t_V_fu_106 <= grp_fu_314_p2;
    end else if ((((1'b1 == ap_CS_fsm_state56) & ((opcode_V_reg_693 == 3'd0) | (opcode_V_reg_693 == 3'd1))) | ((1'b1 == ap_CS_fsm_state4) & ((opcode_V_reg_693 == 3'd5) | (opcode_V_reg_693 == 3'd6) | (opcode_V_reg_693 == 3'd7))))) begin
        t_V_fu_106 <= grp_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dr_V_reg_708 <= {{instruction_memory_V_q0[9:4]}};
        intop_V_reg_715 <= intop_V_fu_382_p1;
        ir_V_reg_688 <= instruction_memory_V_q0;
        offset_V_reg_719 <= offset_V_fu_386_p1;
        opcode_V_reg_693 <= {{instruction_memory_V_q0[24:22]}};
        sr2_V_reg_703 <= {{instruction_memory_V_q0[15:10]}};
        tmp_12_reg_724 <= instruction_memory_V_q0[32'd21];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        op1_V_reg_749 <= op1_V_fu_438_p3;
        rhs_V_reg_769 <= rhs_V_fu_523_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_V_5_reg_818 <= r_V_5_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_V_7_reg_808 <= r_V_7_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        result_V_2_reg_873 <= grp_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (halted_V_read_read_fu_124_p2 == 1'd0))) begin
        t_V_load_1_reg_677 <= t_V_fu_106;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (halted_V_read_read_fu_124_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (halted_V_read_read_fu_124_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_memory_V_address0 = tmp_8_fu_541_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        data_memory_V_address0 = tmp_3_fu_536_p1;
    end else begin
        data_memory_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        data_memory_V_ce0 = 1'b1;
    end else begin
        data_memory_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_memory_V_we0 = 1'b1;
    end else begin
        data_memory_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_650_ap_start = 1'b1;
    end else begin
        grp_fu_650_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((opcode_V_reg_693 == 3'd5) | (opcode_V_reg_693 == 3'd6)))) begin
        halted_V_o = 1'd1;
    end else begin
        halted_V_o = halted_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((opcode_V_reg_693 == 3'd5) | (opcode_V_reg_693 == 3'd6)))) begin
        halted_V_o_ap_vld = 1'b1;
    end else begin
        halted_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        instruction_memory_V_ce0 = 1'b1;
    end else begin
        instruction_memory_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        regfile_V_address0 = tmp_7_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regfile_V_address0 = tmp_2_fu_532_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regfile_V_address0 = tmp_1_fu_413_p1;
    end else begin
        regfile_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        regfile_V_address1 = tmp_9_fu_546_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regfile_V_address1 = tmp_5_fu_433_p1;
    end else begin
        regfile_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state56))) begin
        regfile_V_ce0 = 1'b1;
    end else begin
        regfile_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        regfile_V_ce1 = 1'b1;
    end else begin
        regfile_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) & ((opcode_V_reg_693 == 3'd0) | (opcode_V_reg_693 == 3'd1)))) begin
        regfile_V_we0 = 1'b1;
    end else begin
        regfile_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        regfile_V_we1 = 1'b1;
    end else begin
        regfile_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        special_regfile_V_address0 = tmp_s_fu_408_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        special_regfile_V_address0 = 64'd0;
    end else begin
        special_regfile_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        special_regfile_V_ce0 = 1'b1;
    end else begin
        special_regfile_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        special_regfile_V_ce1 = 1'b1;
    end else begin
        special_regfile_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        special_regfile_V_we0 = 1'b1;
    end else begin
        special_regfile_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (halted_V_read_read_fu_124_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (((opcode_V_reg_693 == 3'd0) & (intop_V_reg_715 == 4'd13) & (1'd1 == grp_fu_292_p3)) | ((opcode_V_reg_693 == 3'd1) & (intop_V_reg_715 == 4'd13) & (1'd1 == grp_fu_292_p3))))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((opcode_V_reg_693 == 3'd0) & (intop_V_reg_715 == 4'd13) & (1'd0 == grp_fu_292_p3)) | ((opcode_V_reg_693 == 3'd1) & (intop_V_reg_715 == 4'd13) & (1'd0 == grp_fu_292_p3))))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((opcode_V_reg_693 == 3'd0) & (intop_V_reg_715 == 4'd14) & (1'd1 == grp_fu_292_p3)) | ((opcode_V_reg_693 == 3'd1) & (intop_V_reg_715 == 4'd14) & (1'd1 == grp_fu_292_p3))))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((opcode_V_reg_693 == 3'd0) & (intop_V_reg_715 == 4'd14) & (1'd0 == grp_fu_292_p3)) | ((opcode_V_reg_693 == 3'd1) & (intop_V_reg_715 == 4'd14) & (1'd0 == grp_fu_292_p3))))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((intop_V_reg_715 == 4'd15) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd15) & (opcode_V_reg_693 == 3'd1)) | (opcode_V_reg_693 == 3'd5) | (opcode_V_reg_693 == 3'd6) | (opcode_V_reg_693 == 3'd7)))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((intop_V_reg_715 == 4'd0) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd1) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd0) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd1) & (opcode_V_reg_693 == 3'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((opcode_V_reg_693 == 3'd0) & (intop_V_reg_715 == 4'd2)) | ((opcode_V_reg_693 == 3'd1) & (intop_V_reg_715 == 4'd2))))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((opcode_V_reg_693 == 3'd0) & (intop_V_reg_715 == 4'd3)) | ((opcode_V_reg_693 == 3'd1) & (intop_V_reg_715 == 4'd3))))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((intop_V_reg_715 == 4'd4) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd5) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd4) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd6) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd5) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd7) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd6) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd8) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd7) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd9) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd8) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd10) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd9) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd11) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd10) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd12) & (opcode_V_reg_693 == 3'd0)) | ((intop_V_reg_715 == 4'd11) & (opcode_V_reg_693 == 3'd1)) | ((intop_V_reg_715 == 4'd12) & (opcode_V_reg_693 == 3'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b1 == ap_CS_fsm_state4) & (opcode_V_reg_693 == 3'd2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((1'b1 == ap_CS_fsm_state4) & (opcode_V_reg_693 == 3'd3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign data_memory_V_d0 = regfile_V_q0;

assign grp_fu_292_p3 = rhs_V_fu_523_p3[32'd31];

assign grp_fu_299_p2 = (t_V_fu_106 + 32'd1);

assign grp_fu_310_p2 = ($signed(rhs_V_reg_769) + $signed(op1_V_reg_749));

assign grp_fu_314_p2 = (t_V_load_1_reg_677 + 32'd1);

assign grp_fu_324_p2 = ((op1_V_reg_749 == rhs_V_reg_769) ? 1'b1 : 1'b0);

assign grp_fu_328_p2 = ($signed(32'd0) - $signed(rhs_V_reg_769));

assign grp_fu_333_p2 = (($signed(op1_V_reg_749) < $signed(rhs_V_reg_769)) ? 1'b1 : 1'b0);

assign halted_V_read_read_fu_124_p2 = halted_V_i;

assign instruction_memory_V_address0 = tmp_fu_337_p1;

assign intop_V_fu_382_p1 = instruction_memory_V_q0[3:0];

assign offset_V_fu_386_p1 = instruction_memory_V_q0[9:0];

assign op1_V_fu_438_p3 = ((tmp_12_reg_724[0:0] === 1'b1) ? special_regfile_V_q0 : regfile_V_q0);

assign op2_V_fu_452_p1 = $signed(sr2_V_reg_703);

assign p_0130_0_pn_cast_fu_557_p1 = $signed(p_0130_0_pn_fu_550_p3);

assign p_0130_0_pn_fu_550_p3 = ((grp_fu_324_p2[0:0] === 1'b1) ? offset_V_reg_719 : 10'd1);

assign pc_V_fu_561_p2 = ($signed(p_0130_0_pn_cast_fu_557_p1) + $signed(t_V_load_1_reg_677));

assign r_V_1_cast_fu_424_p1 = $signed(r_V_1_fu_418_p2);

assign r_V_1_fu_418_p2 = (sr2_V_fu_362_p4 ^ 6'd32);

assign r_V_4_fu_580_p2 = op1_V_reg_749 << rhs_V_reg_769;

assign r_V_5_fu_584_p2 = $signed(op1_V_reg_749) >>> grp_fu_328_p2;

assign r_V_6_fu_571_p2 = $signed(op1_V_reg_749) >>> rhs_V_reg_769;

assign r_V_7_fu_575_p2 = op1_V_reg_749 << grp_fu_328_p2;

assign r_V_8_fu_598_p2 = (rhs_V_reg_769 & op1_V_reg_749);

assign r_V_9_fu_594_p2 = (rhs_V_reg_769 | op1_V_reg_749);

assign r_V_cast_fu_404_p1 = $signed(r_V_fu_398_p2);

assign r_V_fu_398_p2 = (sr1_V_fu_352_p4 ^ 6'd32);

assign result_V_12_fu_589_p2 = (op1_V_reg_749 ^ 32'd4294967295);

assign result_V_1_fu_658_p2 = ($signed(op1_V_reg_749) - $signed(rhs_V_reg_769));

assign result_V_4_fu_646_p1 = val_assign_1_fu_642_p2;

assign result_V_5_fu_638_p1 = grp_fu_333_p2;

assign result_V_6_fu_634_p1 = rev_fu_628_p2;

assign result_V_7_fu_624_p1 = rev1_fu_618_p2;

assign result_V_8_fu_610_p1 = grp_fu_324_p2;

assign result_V_9_fu_606_p1 = val_assign_6_fu_602_p2;

assign rev1_fu_618_p2 = (slt1_fu_614_p2 ^ 1'd1);

assign rev_fu_628_p2 = (grp_fu_333_p2 ^ 1'd1);

assign rhs_V_fu_523_p3 = ((sel_tmp7_fu_517_p2[0:0] === 1'b1) ? special_regfile_V_q1 : sel_tmp5_fu_482_p3);

assign sel_tmp1_fu_460_p2 = ((opcode_V_reg_693 == 3'd3) ? 1'b1 : 1'b0);

assign sel_tmp2_fu_465_p2 = ((opcode_V_reg_693 == 3'd1) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_495_p2 = ((opcode_V_reg_693 != 3'd3) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_476_p2 = (tmp1_fu_470_p2 | sel_tmp_fu_455_p2);

assign sel_tmp5_fu_482_p3 = ((sel_tmp4_fu_476_p2[0:0] === 1'b1) ? op2_V_fu_452_p1 : regfile_V_q1);

assign sel_tmp6_fu_500_p2 = ((opcode_V_reg_693 != 3'd1) ? 1'b1 : 1'b0);

assign sel_tmp7_fu_517_p2 = (tmp3_fu_511_p2 & tmp2_fu_505_p2);

assign sel_tmp9_fu_490_p2 = ((opcode_V_reg_693 != 3'd4) ? 1'b1 : 1'b0);

assign sel_tmp_fu_455_p2 = ((opcode_V_reg_693 == 3'd4) ? 1'b1 : 1'b0);

assign slt1_fu_614_p2 = (($signed(rhs_V_reg_769) < $signed(op1_V_reg_749)) ? 1'b1 : 1'b0);

assign special_regfile_V_address1 = tmp_4_fu_428_p1;

assign sr1_V_fu_352_p4 = {{instruction_memory_V_q0[21:16]}};

assign sr2_V_fu_362_p4 = {{instruction_memory_V_q0[15:10]}};

assign tmp1_fu_470_p2 = (sel_tmp1_fu_460_p2 | sel_tmp2_fu_465_p2);

assign tmp2_fu_505_p2 = (sel_tmp9_fu_490_p2 & sel_tmp3_fu_495_p2);

assign tmp3_fu_511_p2 = (sel_tmp6_fu_500_p2 & tmp_13_fu_445_p3);

assign tmp_13_fu_445_p3 = ir_V_reg_688[32'd15];

assign tmp_1_fu_413_p1 = sr1_V_fu_352_p4;

assign tmp_2_fu_532_p1 = dr_V_reg_708;

assign tmp_3_fu_536_p1 = $signed(grp_fu_310_p2);

assign tmp_4_fu_428_p1 = $unsigned(r_V_1_cast_fu_424_p1);

assign tmp_5_fu_433_p1 = sr2_V_fu_362_p4;

assign tmp_7_fu_662_p1 = dr_V_reg_708;

assign tmp_8_fu_541_p1 = $signed(grp_fu_310_p2);

assign tmp_9_fu_546_p1 = dr_V_reg_708;

assign tmp_fu_337_p1 = $signed(t_V_fu_106);

assign tmp_s_fu_408_p1 = $unsigned(r_V_cast_fu_404_p1);

assign val_assign_1_fu_642_p2 = (($signed(op1_V_reg_749) > $signed(rhs_V_reg_769)) ? 1'b1 : 1'b0);

assign val_assign_6_fu_602_p2 = ((op1_V_reg_749 != rhs_V_reg_769) ? 1'b1 : 1'b0);

endmodule //danke_core

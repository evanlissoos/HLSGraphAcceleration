-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity danke_core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    instruction_memory_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    instruction_memory_V_ce0 : OUT STD_LOGIC;
    instruction_memory_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    data_memory_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_memory_V_ce0 : OUT STD_LOGIC;
    data_memory_V_we0 : OUT STD_LOGIC;
    data_memory_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_memory_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    halted_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    halted_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    halted_V_o_ap_vld : OUT STD_LOGIC;
    core_id : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of danke_core is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "danke_core,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.730000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=4,HLS_SYN_FF=3911,HLS_SYN_LUT=3159}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage36 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage35 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage34 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal halted_V_read_read_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal halted_V_read_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_halted_V_read_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_load_1_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ir_V_reg_694 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal opcode_V_fu_352_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal opcode_V_reg_699 : STD_LOGIC_VECTOR (2 downto 0);
    signal sr1_V_fu_362_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sr1_V_reg_709 : STD_LOGIC_VECTOR (5 downto 0);
    signal sr2_V_fu_372_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sr2_V_reg_714 : STD_LOGIC_VECTOR (5 downto 0);
    signal dr_V_reg_720 : STD_LOGIC_VECTOR (5 downto 0);
    signal intop_V_fu_392_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal intop_V_reg_727 : STD_LOGIC_VECTOR (3 downto 0);
    signal offset_V_fu_396_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal offset_V_reg_731 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal special_regfile_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal special_regfile_V_lo_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal special_regfile_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal special_regfile_V_lo_1_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal op1_V_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal op1_V_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011001 : BOOLEAN;
    signal rhs_V_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011001 : BOOLEAN;
    signal grp_fu_331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_12_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage35 : signal is "none";
    signal ap_block_state9_pp0_stage35_iter0 : BOOLEAN;
    signal ap_block_pp0_stage35_flag00011001 : BOOLEAN;
    signal r_V_9_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_9_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_8_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_6_fu_643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_4_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage34 : signal is "none";
    signal ap_block_state38_pp0_stage34_iter0 : BOOLEAN;
    signal ap_block_pp0_stage34_flag00011001 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage36_iter0 : BOOLEAN;
    signal ap_block_pp0_stage36_flag00011011 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage36 : signal is "none";
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal regfile_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal regfile_V_ce0 : STD_LOGIC;
    signal regfile_V_we0 : STD_LOGIC;
    signal regfile_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regfile_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regfile_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal regfile_V_ce1 : STD_LOGIC;
    signal regfile_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal special_regfile_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal special_regfile_V_ce0 : STD_LOGIC;
    signal special_regfile_V_we0 : STD_LOGIC;
    signal special_regfile_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal special_regfile_V_ce1 : STD_LOGIC;
    signal ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp0_iter1_p_1_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage36_flag00011001 : BOOLEAN;
    signal p_1_phi_fu_259_p36 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011001 : BOOLEAN;
    signal tmp_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_s_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal tmp_5_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_flag00000000 : BOOLEAN;
    signal tmp_7_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4_flag00000000 : BOOLEAN;
    signal tmp_9_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5_flag00000000 : BOOLEAN;
    signal tmp_10_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pc_V_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage36_flag00000000 : BOOLEAN;
    signal ap_block_pp0_stage36_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage35_flag00000000 : BOOLEAN;
    signal r_V_fu_408_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_cast_fu_414_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_1_fu_423_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_1_cast_fu_429_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_V_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp9_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_538_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0130_0_pn_fu_555_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0130_0_pn_cast_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_6_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt1_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage33 : signal is "none";
    signal ap_block_pp0_stage33_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011011 : BOOLEAN;
    signal ap_block_state10_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011001 : BOOLEAN;
    signal ap_block_state11_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011001 : BOOLEAN;
    signal ap_block_state12_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011001 : BOOLEAN;
    signal ap_block_state13_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage9_flag00011001 : BOOLEAN;
    signal ap_block_state14_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage10_flag00011001 : BOOLEAN;
    signal ap_block_state15_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage11_flag00011001 : BOOLEAN;
    signal ap_block_state16_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage12_flag00011001 : BOOLEAN;
    signal ap_block_state17_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage13_flag00011001 : BOOLEAN;
    signal ap_block_state18_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage14_flag00011001 : BOOLEAN;
    signal ap_block_state19_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage15_flag00011001 : BOOLEAN;
    signal ap_block_state20_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage16_flag00011001 : BOOLEAN;
    signal ap_block_state21_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage17_flag00011001 : BOOLEAN;
    signal ap_block_state22_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage18_flag00011001 : BOOLEAN;
    signal ap_block_state23_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage19_flag00011001 : BOOLEAN;
    signal ap_block_state24_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage20_flag00011001 : BOOLEAN;
    signal ap_block_state25_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage21_flag00011001 : BOOLEAN;
    signal ap_block_state26_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage22_flag00011001 : BOOLEAN;
    signal ap_block_state27_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage23_flag00011001 : BOOLEAN;
    signal ap_block_state28_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage24_flag00011001 : BOOLEAN;
    signal ap_block_state29_pp0_stage25_iter0 : BOOLEAN;
    signal ap_block_pp0_stage25_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage25_flag00011001 : BOOLEAN;
    signal ap_block_state30_pp0_stage26_iter0 : BOOLEAN;
    signal ap_block_pp0_stage26_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage26_flag00011001 : BOOLEAN;
    signal ap_block_state31_pp0_stage27_iter0 : BOOLEAN;
    signal ap_block_pp0_stage27_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage27_flag00011001 : BOOLEAN;
    signal ap_block_state32_pp0_stage28_iter0 : BOOLEAN;
    signal ap_block_pp0_stage28_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage28_flag00011001 : BOOLEAN;
    signal ap_block_state33_pp0_stage29_iter0 : BOOLEAN;
    signal ap_block_pp0_stage29_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage29_flag00011001 : BOOLEAN;
    signal ap_block_state34_pp0_stage30_iter0 : BOOLEAN;
    signal ap_block_pp0_stage30_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage30_flag00011001 : BOOLEAN;
    signal ap_block_state35_pp0_stage31_iter0 : BOOLEAN;
    signal ap_block_pp0_stage31_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage31_flag00011001 : BOOLEAN;
    signal ap_block_state36_pp0_stage32_iter0 : BOOLEAN;
    signal ap_block_pp0_stage32_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage32_flag00011001 : BOOLEAN;
    signal ap_block_state37_pp0_stage33_iter0 : BOOLEAN;
    signal ap_block_pp0_stage33_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage33_flag00011001 : BOOLEAN;
    signal ap_block_pp0_stage34_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage35_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_274 : BOOLEAN;
    signal ap_condition_282 : BOOLEAN;
    signal ap_condition_290 : BOOLEAN;
    signal ap_condition_298 : BOOLEAN;
    signal ap_condition_306 : BOOLEAN;
    signal ap_condition_314 : BOOLEAN;
    signal ap_condition_322 : BOOLEAN;
    signal ap_condition_330 : BOOLEAN;
    signal ap_condition_338 : BOOLEAN;
    signal ap_condition_1140 : BOOLEAN;
    signal ap_condition_346 : BOOLEAN;
    signal ap_condition_1145 : BOOLEAN;
    signal ap_condition_1149 : BOOLEAN;
    signal ap_condition_250 : BOOLEAN;
    signal ap_condition_1154 : BOOLEAN;
    signal ap_condition_229 : BOOLEAN;
    signal ap_condition_1159 : BOOLEAN;
    signal ap_condition_1164 : BOOLEAN;

    component danke_core_sdiv_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component danke_core_mul_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component danke_core_regfilbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    regfile_V_U : component danke_core_regfilbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => regfile_V_address0,
        ce0 => regfile_V_ce0,
        we0 => regfile_V_we0,
        d0 => regfile_V_d0,
        q0 => regfile_V_q0,
        address1 => regfile_V_address1,
        ce1 => regfile_V_ce1,
        q1 => regfile_V_q1);

    special_regfile_V_U : component danke_core_regfilbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => special_regfile_V_address0,
        ce0 => special_regfile_V_ce0,
        we0 => special_regfile_V_we0,
        d0 => core_id,
        q0 => special_regfile_V_q0,
        address1 => special_regfile_V_address1,
        ce1 => special_regfile_V_ce1,
        q1 => special_regfile_V_q1);

    danke_core_sdiv_3dEe_U1 : component danke_core_sdiv_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_538_p0,
        din1 => grp_fu_538_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_538_p2);

    danke_core_mul_32eOg_U2 : component danke_core_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rhs_V_reg_806,
        din1 => op1_V_reg_786,
        ce => ap_const_logic_1,
        dout => grp_fu_663_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_block_pp0_stage36_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif ((((ap_block_pp0_stage36_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
                if ((ap_condition_1159 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= ap_const_lv32_0;
                elsif ((ap_condition_229 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= r_V_6_fu_576_p2;
                elsif ((ap_condition_1154 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= r_V_7_reg_844;
                elsif ((ap_condition_250 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= r_V_4_fu_585_p2;
                elsif ((ap_condition_1149 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= r_V_5_reg_858;
                elsif ((ap_condition_1145 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= grp_fu_313_p2;
                elsif ((ap_condition_346 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_1_fu_659_p2;
                elsif ((ap_condition_1140 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_2_reg_918;
                elsif ((ap_condition_338 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_4_fu_655_p1;
                elsif ((ap_condition_330 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_5_fu_647_p1;
                elsif ((ap_condition_322 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_6_fu_643_p1;
                elsif ((ap_condition_314 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_7_fu_633_p1;
                elsif ((ap_condition_306 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_8_fu_619_p1;
                elsif ((ap_condition_298 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_9_fu_615_p1;
                elsif ((ap_condition_290 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= r_V_8_fu_607_p2;
                elsif ((ap_condition_282 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= r_V_9_fu_603_p2;
                elsif ((ap_condition_274 = ap_const_boolean_1)) then 
                    ap_phi_precharge_reg_pp0_iter0_p_1_reg_255 <= result_V_12_fu_598_p2;
                end if;
            end if; 
        end if;
    end process;

    t_V_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (opcode_V_reg_699 = ap_const_lv3_2))) then 
                t_V_fu_116 <= pc_V_fu_566_p2;
            elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (opcode_V_reg_699 = ap_const_lv3_3)))) then 
                t_V_fu_116 <= grp_fu_317_p2;
            elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (ap_block_pp0_stage36_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (ap_block_pp0_stage36_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_5)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_6)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_7)))))) then 
                t_V_fu_116 <= grp_fu_302_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (ap_block_pp0_stage36_flag00011001 = ap_const_boolean_0))) then
                ap_phi_precharge_reg_pp0_iter1_p_1_reg_255 <= ap_phi_precharge_reg_pp0_iter0_p_1_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_halted_V_read_reg_679 <= halted_V_read_reg_679;
                halted_V_read_reg_679 <= halted_V_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (halted_V_read_reg_679 = ap_const_lv1_0))) then
                dr_V_reg_720 <= instruction_memory_V_q0(9 downto 4);
                intop_V_reg_727 <= intop_V_fu_392_p1;
                ir_V_reg_694 <= instruction_memory_V_q0;
                offset_V_reg_731 <= offset_V_fu_396_p1;
                opcode_V_reg_699 <= instruction_memory_V_q0(24 downto 22);
                sr1_V_reg_709 <= instruction_memory_V_q0(21 downto 16);
                sr2_V_reg_714 <= instruction_memory_V_q0(15 downto 10);
                tmp_13_reg_736 <= instruction_memory_V_q0(21 downto 21);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((halted_V_read_reg_679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))) then
                op1_V_reg_786 <= op1_V_fu_461_p3;
                rhs_V_reg_806 <= rhs_V_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (grp_fu_331_p3 = ap_const_lv1_1) and (intop_V_reg_727 = ap_const_lv4_D)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (grp_fu_331_p3 = ap_const_lv1_1) and (intop_V_reg_727 = ap_const_lv4_D))))) then
                r_V_5_reg_858 <= r_V_5_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_E) and (grp_fu_331_p3 = ap_const_lv1_1)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (intop_V_reg_727 = ap_const_lv4_E) and (opcode_V_reg_699 = ap_const_lv3_1) and (grp_fu_331_p3 = ap_const_lv1_1))))) then
                r_V_7_reg_844 <= r_V_7_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage34) and (ap_block_pp0_stage34_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_2)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_2))))) then
                result_V_2_reg_918 <= grp_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((halted_V_read_reg_679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                sel_tmp1_reg_776 <= sel_tmp1_fu_451_p2;
                sel_tmp2_reg_781 <= sel_tmp2_fu_456_p2;
                sel_tmp_reg_771 <= sel_tmp_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                special_regfile_V_lo_1_reg_761 <= special_regfile_V_q1;
                special_regfile_V_lo_reg_751 <= special_regfile_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_read_fu_134_p2 = ap_const_lv1_0))) then
                t_V_load_1_reg_683 <= t_V_fu_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_D)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_D))))) then
                tmp_15_reg_849 <= rhs_V_reg_806(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_E)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (intop_V_reg_727 = ap_const_lv4_E) and (opcode_V_reg_699 = ap_const_lv3_1))))) then
                tmp_16_reg_835 <= rhs_V_reg_806(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, halted_V_read_read_fu_134_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter1, ap_block_pp0_stage36_flag00011011, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage4_flag00011011, ap_block_pp0_stage5_flag00011011, ap_block_pp0_stage6_flag00011011, ap_block_pp0_stage7_flag00011011, ap_block_pp0_stage8_flag00011011, ap_block_pp0_stage9_flag00011011, ap_block_pp0_stage10_flag00011011, ap_block_pp0_stage11_flag00011011, ap_block_pp0_stage12_flag00011011, ap_block_pp0_stage13_flag00011011, ap_block_pp0_stage14_flag00011011, ap_block_pp0_stage15_flag00011011, ap_block_pp0_stage16_flag00011011, ap_block_pp0_stage17_flag00011011, ap_block_pp0_stage18_flag00011011, ap_block_pp0_stage19_flag00011011, ap_block_pp0_stage20_flag00011011, ap_block_pp0_stage21_flag00011011, ap_block_pp0_stage22_flag00011011, ap_block_pp0_stage23_flag00011011, ap_block_pp0_stage24_flag00011011, ap_block_pp0_stage25_flag00011011, ap_block_pp0_stage26_flag00011011, ap_block_pp0_stage27_flag00011011, ap_block_pp0_stage28_flag00011011, ap_block_pp0_stage29_flag00011011, ap_block_pp0_stage30_flag00011011, ap_block_pp0_stage31_flag00011011, ap_block_pp0_stage32_flag00011011, ap_block_pp0_stage33_flag00011011, ap_block_pp0_stage34_flag00011011, ap_block_pp0_stage35_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (halted_V_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (halted_V_read_read_fu_134_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage36 => 
                if ((ap_block_pp0_stage36_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage35 => 
                if ((ap_block_pp0_stage35_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_block_pp0_stage8_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_block_pp0_stage9_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_block_pp0_stage10_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_block_pp0_stage12_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_block_pp0_stage13_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_block_pp0_stage14_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_block_pp0_stage15_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_block_pp0_stage16_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_block_pp0_stage17_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_block_pp0_stage18_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_block_pp0_stage19_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_block_pp0_stage20_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_block_pp0_stage21_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_block_pp0_stage22_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_block_pp0_stage23_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_block_pp0_stage24_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_block_pp0_stage25_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_block_pp0_stage26_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_block_pp0_stage27_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_block_pp0_stage28_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_block_pp0_stage29_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_block_pp0_stage30_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_block_pp0_stage31_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_block_pp0_stage32_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_block_pp0_stage33_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when ap_ST_fsm_pp0_stage34 => 
                if ((ap_block_pp0_stage34_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage33 <= ap_CS_fsm(36);
    ap_CS_fsm_pp0_stage34 <= ap_CS_fsm(37);
    ap_CS_fsm_pp0_stage35 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage36 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state41 <= ap_CS_fsm(38);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage26_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage27_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage28_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage29_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage30_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage31_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage32_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage33_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage34_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage36_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage35_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1140_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_1140 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_2)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_2))));
    end process;


    ap_condition_1145_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_1145 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_0)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_0))));
    end process;


    ap_condition_1149_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, tmp_15_reg_849, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001)
    begin
                ap_condition_1149 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_D) and (ap_const_lv1_1 = tmp_15_reg_849)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_D) and (ap_const_lv1_1 = tmp_15_reg_849))));
    end process;


    ap_condition_1154_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, tmp_16_reg_835, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001)
    begin
                ap_condition_1154 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_E) and (tmp_16_reg_835 = ap_const_lv1_1)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (intop_V_reg_727 = ap_const_lv4_E) and (opcode_V_reg_699 = ap_const_lv3_1) and (tmp_16_reg_835 = ap_const_lv1_1))));
    end process;


    ap_condition_1159_assign_proc : process(halted_V_read_reg_679, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, opcode_V_fu_352_p4, intop_V_fu_392_p1)
    begin
                ap_condition_1159 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (intop_V_fu_392_p1 = ap_const_lv4_F) and (opcode_V_fu_352_p4 = ap_const_lv3_0)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (intop_V_fu_392_p1 = ap_const_lv4_F) and (opcode_V_fu_352_p4 = ap_const_lv3_1))));
    end process;


    ap_condition_1164_assign_proc : process(halted_V_read_reg_679, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00000000)
    begin
                ap_condition_1164 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0));
    end process;


    ap_condition_229_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00011001, grp_fu_331_p3)
    begin
                ap_condition_229 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_E) and (ap_const_lv1_0 = grp_fu_331_p3)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (intop_V_reg_727 = ap_const_lv4_E) and (opcode_V_reg_699 = ap_const_lv3_1) and (ap_const_lv1_0 = grp_fu_331_p3))));
    end process;


    ap_condition_250_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00011001, grp_fu_331_p3)
    begin
                ap_condition_250 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (ap_const_lv1_0 = grp_fu_331_p3) and (intop_V_reg_727 = ap_const_lv4_D)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (ap_const_lv1_0 = grp_fu_331_p3) and (intop_V_reg_727 = ap_const_lv4_D))));
    end process;


    ap_condition_274_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_274 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_C)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_C))));
    end process;


    ap_condition_282_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_282 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_B)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_B))));
    end process;


    ap_condition_290_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_290 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_A)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_A))));
    end process;


    ap_condition_298_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_298 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_9)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_9))));
    end process;


    ap_condition_306_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_306 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_8)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_8))));
    end process;


    ap_condition_314_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_314 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_7)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_7))));
    end process;


    ap_condition_322_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_322 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_6)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_6))));
    end process;


    ap_condition_330_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_330 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_5)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_5))));
    end process;


    ap_condition_338_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_338 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_4)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_4))));
    end process;


    ap_condition_346_assign_proc : process(halted_V_read_reg_679, opcode_V_reg_699, intop_V_reg_727, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35_flag00011001)
    begin
                ap_condition_346 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_block_pp0_stage35_flag00011001 = ap_const_boolean_0) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_0) and (intop_V_reg_727 = ap_const_lv4_1)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_1) and (intop_V_reg_727 = ap_const_lv4_1))));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(halted_V_read_read_fu_134_p2)
    begin
        if ((halted_V_read_read_fu_134_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_memory_V_address0_assign_proc : process(opcode_V_reg_699, tmp_7_fu_545_p1, tmp_9_fu_550_p1, ap_condition_1164)
    begin
        if ((ap_condition_1164 = ap_const_boolean_1)) then
            if ((opcode_V_reg_699 = ap_const_lv3_3)) then 
                data_memory_V_address0 <= tmp_9_fu_550_p1(10 - 1 downto 0);
            elsif ((opcode_V_reg_699 = ap_const_lv3_4)) then 
                data_memory_V_address0 <= tmp_7_fu_545_p1(10 - 1 downto 0);
            else 
                data_memory_V_address0 <= "XXXXXXXXXX";
            end if;
        else 
            data_memory_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_memory_V_ce0_assign_proc : process(halted_V_read_reg_679, ap_enable_reg_pp0_iter0, opcode_V_reg_699, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (opcode_V_reg_699 = ap_const_lv3_3)))) then 
            data_memory_V_ce0 <= ap_const_logic_1;
        else 
            data_memory_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_memory_V_d0 <= regfile_V_q1;

    data_memory_V_we0_assign_proc : process(halted_V_read_reg_679, ap_enable_reg_pp0_iter0, opcode_V_reg_699, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0))) then 
            data_memory_V_we0 <= ap_const_logic_1;
        else 
            data_memory_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_302_p2 <= std_logic_vector(unsigned(t_V_fu_116) + unsigned(ap_const_lv32_1));
    grp_fu_313_p2 <= std_logic_vector(signed(rhs_V_reg_806) + signed(op1_V_reg_786));
    grp_fu_317_p2 <= std_logic_vector(unsigned(t_V_load_1_reg_683) + unsigned(ap_const_lv32_1));
    grp_fu_327_p2 <= "1" when (op1_V_reg_786 = rhs_V_reg_806) else "0";
    grp_fu_331_p3 <= rhs_V_reg_806(31 downto 31);
    grp_fu_338_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(rhs_V_reg_806));
    grp_fu_343_p2 <= "1" when (signed(op1_V_reg_786) < signed(rhs_V_reg_806)) else "0";
    grp_fu_538_p0 <= 
        special_regfile_V_lo_reg_751 when (tmp_13_reg_736(0) = '1') else 
        regfile_V_q0;
    grp_fu_538_p1 <= 
        special_regfile_V_lo_1_reg_761 when (sel_tmp7_fu_521_p2(0) = '1') else 
        sel_tmp5_fu_486_p3;

    halted_V_o_assign_proc : process(halted_V_i, halted_V_read_reg_679, ap_enable_reg_pp0_iter0, opcode_V_reg_699, ap_CS_fsm_pp0_stage36, ap_block_pp0_stage36_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_5)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_6))) and (ap_block_pp0_stage36_flag00001001 = ap_const_boolean_0))) then 
            halted_V_o <= ap_const_lv1_1;
        else 
            halted_V_o <= halted_V_i;
        end if; 
    end process;


    halted_V_o_ap_vld_assign_proc : process(halted_V_read_reg_679, ap_enable_reg_pp0_iter0, opcode_V_reg_699, ap_CS_fsm_pp0_stage36, ap_block_pp0_stage36_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_5)) or ((halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_6))) and (ap_block_pp0_stage36_flag00001001 = ap_const_boolean_0))) then 
            halted_V_o_ap_vld <= ap_const_logic_1;
        else 
            halted_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    halted_V_read_read_fu_134_p2 <= halted_V_i;
    instruction_memory_V_address0 <= tmp_fu_347_p1(10 - 1 downto 0);

    instruction_memory_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            instruction_memory_V_ce0 <= ap_const_logic_1;
        else 
            instruction_memory_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    intop_V_fu_392_p1 <= instruction_memory_V_q0(4 - 1 downto 0);
    offset_V_fu_396_p1 <= instruction_memory_V_q0(10 - 1 downto 0);
    op1_V_fu_461_p3 <= 
        special_regfile_V_lo_reg_751 when (tmp_13_reg_736(0) = '1') else 
        regfile_V_q0;
        op2_V_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sr2_V_reg_714),32));

    opcode_V_fu_352_p4 <= instruction_memory_V_q0(24 downto 22);
        p_0130_0_pn_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0130_0_pn_fu_555_p3),32));

    p_0130_0_pn_fu_555_p3 <= 
        offset_V_reg_731 when (grp_fu_327_p2(0) = '1') else 
        ap_const_lv10_1;

    p_1_phi_fu_259_p36_assign_proc : process(ap_reg_pp0_iter1_halted_V_read_reg_679, ap_CS_fsm_pp0_stage1, opcode_V_reg_699, intop_V_reg_727, ap_enable_reg_pp0_iter1, ap_phi_precharge_reg_pp0_iter1_p_1_reg_255, grp_fu_538_p2, ap_block_pp0_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((opcode_V_reg_699 = ap_const_lv3_0) and (ap_reg_pp0_iter1_halted_V_read_reg_679 = ap_const_lv1_0) and (intop_V_reg_727 = ap_const_lv4_3)) or ((opcode_V_reg_699 = ap_const_lv3_1) and (ap_reg_pp0_iter1_halted_V_read_reg_679 = ap_const_lv1_0) and (intop_V_reg_727 = ap_const_lv4_3))) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            p_1_phi_fu_259_p36 <= grp_fu_538_p2;
        else 
            p_1_phi_fu_259_p36 <= ap_phi_precharge_reg_pp0_iter1_p_1_reg_255;
        end if; 
    end process;

    pc_V_fu_566_p2 <= std_logic_vector(signed(p_0130_0_pn_cast_fu_562_p1) + signed(t_V_load_1_reg_683));
        r_V_1_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_423_p2),33));

    r_V_1_fu_423_p2 <= (sr2_V_fu_372_p4 xor ap_const_lv6_20);
    r_V_4_fu_585_p2 <= std_logic_vector(shift_left(unsigned(op1_V_reg_786),to_integer(unsigned('0' & rhs_V_reg_806(31-1 downto 0)))));
    r_V_5_fu_589_p2 <= std_logic_vector(shift_right(signed(op1_V_reg_786),to_integer(unsigned('0' & grp_fu_338_p2(31-1 downto 0)))));
    r_V_6_fu_576_p2 <= std_logic_vector(shift_right(signed(op1_V_reg_786),to_integer(unsigned('0' & rhs_V_reg_806(31-1 downto 0)))));
    r_V_7_fu_580_p2 <= std_logic_vector(shift_left(unsigned(op1_V_reg_786),to_integer(unsigned('0' & grp_fu_338_p2(31-1 downto 0)))));
    r_V_8_fu_607_p2 <= (rhs_V_reg_806 and op1_V_reg_786);
    r_V_9_fu_603_p2 <= (rhs_V_reg_806 or op1_V_reg_786);
        r_V_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_408_p2),33));

    r_V_fu_408_p2 <= (sr1_V_fu_362_p4 xor ap_const_lv6_20);

    regfile_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_flag00000000, ap_CS_fsm_pp0_stage5, tmp_1_fu_438_p1, ap_block_pp0_stage2_flag00000000, tmp_6_fu_594_p1, ap_block_pp0_stage5_flag00000000, tmp_10_fu_667_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            regfile_V_address0 <= tmp_10_fu_667_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00000000 = ap_const_boolean_0))) then 
            regfile_V_address0 <= tmp_6_fu_594_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            regfile_V_address0 <= tmp_1_fu_438_p1(5 - 1 downto 0);
        else 
            regfile_V_address0 <= "XXXXX";
        end if; 
    end process;


    regfile_V_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_flag00000000, tmp_5_fu_442_p1, tmp_3_fu_534_p1, ap_block_pp0_stage3_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0))) then 
                regfile_V_address1 <= tmp_3_fu_534_p1(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
                regfile_V_address1 <= tmp_5_fu_442_p1(5 - 1 downto 0);
            else 
                regfile_V_address1 <= "XXXXX";
            end if;
        else 
            regfile_V_address1 <= "XXXXX";
        end if; 
    end process;


    regfile_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)))) then 
            regfile_V_ce0 <= ap_const_logic_1;
        else 
            regfile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regfile_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)))) then 
            regfile_V_ce1 <= ap_const_logic_1;
        else 
            regfile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regfile_V_d0_assign_proc : process(data_memory_V_q0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, p_1_phi_fu_259_p36, ap_block_pp0_stage1_flag00000000, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            regfile_V_d0 <= p_1_phi_fu_259_p36;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00000000 = ap_const_boolean_0))) then 
            regfile_V_d0 <= data_memory_V_q0;
        else 
            regfile_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regfile_V_we0_assign_proc : process(halted_V_read_reg_679, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, opcode_V_reg_699, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (halted_V_read_reg_679 = ap_const_lv1_0) and (opcode_V_reg_699 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and ((opcode_V_reg_699 = ap_const_lv3_0) or (opcode_V_reg_699 = ap_const_lv3_1))))) then 
            regfile_V_we0 <= ap_const_logic_1;
        else 
            regfile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_12_fu_598_p2 <= (op1_V_reg_786 xor ap_const_lv32_FFFFFFFF);
    result_V_1_fu_659_p2 <= std_logic_vector(signed(op1_V_reg_786) - signed(rhs_V_reg_806));
    result_V_4_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_1_fu_651_p2),32));
    result_V_5_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_343_p2),32));
    result_V_6_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev_fu_637_p2),32));
    result_V_7_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev1_fu_627_p2),32));
    result_V_8_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_327_p2),32));
    result_V_9_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_6_fu_611_p2),32));
    rev1_fu_627_p2 <= (slt1_fu_623_p2 xor ap_const_lv1_1);
    rev_fu_637_p2 <= (grp_fu_343_p2 xor ap_const_lv1_1);
    rhs_V_fu_527_p3 <= 
        special_regfile_V_lo_1_reg_761 when (sel_tmp7_fu_521_p2(0) = '1') else 
        sel_tmp5_fu_486_p3;
    sel_tmp1_fu_451_p2 <= "1" when (opcode_V_reg_699 = ap_const_lv3_3) else "0";
    sel_tmp2_fu_456_p2 <= "1" when (opcode_V_reg_699 = ap_const_lv3_1) else "0";
    sel_tmp3_fu_499_p2 <= "0" when (opcode_V_reg_699 = ap_const_lv3_3) else "1";
    sel_tmp4_fu_481_p2 <= (tmp1_fu_477_p2 or sel_tmp_reg_771);
    sel_tmp5_fu_486_p3 <= 
        op2_V_fu_474_p1 when (sel_tmp4_fu_481_p2(0) = '1') else 
        regfile_V_q1;
    sel_tmp6_fu_504_p2 <= "0" when (opcode_V_reg_699 = ap_const_lv3_1) else "1";
    sel_tmp7_fu_521_p2 <= (tmp3_fu_515_p2 and tmp2_fu_509_p2);
    sel_tmp9_fu_494_p2 <= "0" when (opcode_V_reg_699 = ap_const_lv3_4) else "1";
    sel_tmp_fu_446_p2 <= "1" when (opcode_V_reg_699 = ap_const_lv3_4) else "0";
    slt1_fu_623_p2 <= "1" when (signed(rhs_V_reg_806) < signed(op1_V_reg_786)) else "0";

    special_regfile_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00000000, tmp_s_fu_418_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            special_regfile_V_address0 <= tmp_s_fu_418_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            special_regfile_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            special_regfile_V_address0 <= "XXXXX";
        end if; 
    end process;

    special_regfile_V_address1 <= tmp_4_fu_433_p1(5 - 1 downto 0);

    special_regfile_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)))) then 
            special_regfile_V_ce0 <= ap_const_logic_1;
        else 
            special_regfile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    special_regfile_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            special_regfile_V_ce1 <= ap_const_logic_1;
        else 
            special_regfile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    special_regfile_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            special_regfile_V_we0 <= ap_const_logic_1;
        else 
            special_regfile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sr1_V_fu_362_p4 <= instruction_memory_V_q0(21 downto 16);
    sr2_V_fu_372_p4 <= instruction_memory_V_q0(15 downto 10);
    tmp1_fu_477_p2 <= (sel_tmp1_reg_776 or sel_tmp2_reg_781);
    tmp2_fu_509_p2 <= (sel_tmp9_fu_494_p2 and sel_tmp3_fu_499_p2);
    tmp3_fu_515_p2 <= (sel_tmp6_fu_504_p2 and tmp_14_fu_467_p3);
    tmp_10_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dr_V_reg_720),64));
    tmp_14_fu_467_p3 <= ir_V_reg_694(15 downto 15);
    tmp_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sr1_V_reg_709),64));
    tmp_3_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dr_V_reg_720),64));
    tmp_4_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_cast_fu_429_p1),64));
    tmp_5_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sr2_V_reg_714),64));
    tmp_6_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dr_V_reg_720),64));
        tmp_7_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_313_p2),64));

        tmp_9_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_313_p2),64));

        tmp_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_fu_116),64));

    tmp_s_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_cast_fu_414_p1),64));
    val_assign_1_fu_651_p2 <= "1" when (signed(op1_V_reg_786) > signed(rhs_V_reg_806)) else "0";
    val_assign_6_fu_611_p2 <= "0" when (op1_V_reg_786 = rhs_V_reg_806) else "1";
end behav;

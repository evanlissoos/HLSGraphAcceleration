-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity danke_core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    instruction_memory_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    instruction_memory_V_ce0 : OUT STD_LOGIC;
    instruction_memory_V_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    data_memory_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_memory_V_ce0 : OUT STD_LOGIC;
    data_memory_V_we0 : OUT STD_LOGIC;
    data_memory_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_memory_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    halted_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    halted_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    halted_V_o_ap_vld : OUT STD_LOGIC;
    core_id : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of danke_core is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "danke_core,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.578000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=4,HLS_SYN_FF=1928,HLS_SYN_LUT=1656}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (55 downto 0) := "00000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (55 downto 0) := "00000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (55 downto 0) := "00000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (55 downto 0) := "00000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (55 downto 0) := "00000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (55 downto 0) := "00000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (55 downto 0) := "00001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (55 downto 0) := "00010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (55 downto 0) := "00100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (55 downto 0) := "01000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (55 downto 0) := "10000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_V_load_1_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal halted_V_read_read_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ir_V_reg_688 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal opcode_V_reg_693 : STD_LOGIC_VECTOR (2 downto 0);
    signal sr2_V_fu_362_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sr2_V_reg_703 : STD_LOGIC_VECTOR (5 downto 0);
    signal dr_V_reg_708 : STD_LOGIC_VECTOR (5 downto 0);
    signal intop_V_fu_382_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal intop_V_reg_715 : STD_LOGIC_VECTOR (3 downto 0);
    signal offset_V_fu_386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal offset_V_reg_719 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal op1_V_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal op1_V_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal rhs_V_fu_523_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_V_6_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r_V_7_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal r_V_4_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal r_V_5_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal result_V_12_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal r_V_9_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_9_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_8_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_6_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_5_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_4_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal result_V_1_fu_658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal regfile_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal regfile_V_ce0 : STD_LOGIC;
    signal regfile_V_we0 : STD_LOGIC;
    signal regfile_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regfile_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal regfile_V_ce1 : STD_LOGIC;
    signal regfile_V_we1 : STD_LOGIC;
    signal regfile_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal special_regfile_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal special_regfile_V_ce0 : STD_LOGIC;
    signal special_regfile_V_we0 : STD_LOGIC;
    signal special_regfile_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal special_regfile_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal special_regfile_V_ce1 : STD_LOGIC;
    signal special_regfile_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_8_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_7_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal t_V_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pc_V_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sr1_V_fu_352_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_398_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_cast_fu_404_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_1_fu_418_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_1_cast_fu_424_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sel_tmp1_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_V_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp9_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_445_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_482_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0130_0_pn_fu_550_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0130_0_pn_cast_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_6_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt1_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_650_ap_start : STD_LOGIC;
    signal grp_fu_650_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (55 downto 0);

    component danke_core_sdiv_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component danke_core_mul_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component danke_core_regfilbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component danke_core_speciacud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    regfile_V_U : component danke_core_regfilbkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => regfile_V_address0,
        ce0 => regfile_V_ce0,
        we0 => regfile_V_we0,
        d0 => p_1_reg_245,
        q0 => regfile_V_q0,
        address1 => regfile_V_address1,
        ce1 => regfile_V_ce1,
        we1 => regfile_V_we1,
        d1 => data_memory_V_q0,
        q1 => regfile_V_q1);

    special_regfile_V_U : component danke_core_speciacud
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => special_regfile_V_address0,
        ce0 => special_regfile_V_ce0,
        we0 => special_regfile_V_we0,
        d0 => core_id,
        q0 => special_regfile_V_q0,
        address1 => special_regfile_V_address1,
        ce1 => special_regfile_V_ce1,
        q1 => special_regfile_V_q1);

    danke_core_sdiv_3dEe_U1 : component danke_core_sdiv_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_650_ap_start,
        done => grp_fu_650_ap_done,
        din0 => op1_V_reg_749,
        din1 => rhs_V_reg_769,
        ce => ap_const_logic_1,
        dout => grp_fu_650_p2);

    danke_core_mul_32eOg_U2 : component danke_core_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rhs_V_reg_769,
        din1 => op1_V_reg_749,
        ce => ap_const_logic_1,
        dout => grp_fu_654_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_1_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (((intop_V_reg_715 = ap_const_lv4_F) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_F) and (opcode_V_reg_693 = ap_const_lv3_1))))) then 
                p_1_reg_245 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_1_reg_245 <= r_V_6_fu_571_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_1_reg_245 <= r_V_7_reg_808;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_1_reg_245 <= r_V_4_fu_580_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_1_reg_245 <= r_V_5_reg_818;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (intop_V_reg_715 = ap_const_lv4_0))) then 
                p_1_reg_245 <= grp_fu_310_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (intop_V_reg_715 = ap_const_lv4_1))) then 
                p_1_reg_245 <= result_V_1_fu_658_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                p_1_reg_245 <= result_V_2_reg_873;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                p_1_reg_245 <= grp_fu_650_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_4))) then 
                p_1_reg_245 <= result_V_4_fu_646_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_5))) then 
                p_1_reg_245 <= result_V_5_fu_638_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_6))) then 
                p_1_reg_245 <= result_V_6_fu_634_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_7))) then 
                p_1_reg_245 <= result_V_7_fu_624_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_8))) then 
                p_1_reg_245 <= result_V_8_fu_610_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_9))) then 
                p_1_reg_245 <= result_V_9_fu_606_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_A))) then 
                p_1_reg_245 <= r_V_8_fu_598_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_B))) then 
                p_1_reg_245 <= r_V_9_fu_594_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (intop_V_reg_715 = ap_const_lv4_C))) then 
                p_1_reg_245 <= result_V_12_fu_589_p2;
            end if; 
        end if;
    end process;

    t_V_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_V_fu_106 <= pc_V_fu_561_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                t_V_fu_106 <= grp_fu_314_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state56) and ((opcode_V_reg_693 = ap_const_lv3_0) or (opcode_V_reg_693 = ap_const_lv3_1))) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((opcode_V_reg_693 = ap_const_lv3_5) or (opcode_V_reg_693 = ap_const_lv3_6) or (opcode_V_reg_693 = ap_const_lv3_7))))) then 
                t_V_fu_106 <= grp_fu_299_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                dr_V_reg_708 <= instruction_memory_V_q0(9 downto 4);
                intop_V_reg_715 <= intop_V_fu_382_p1;
                ir_V_reg_688 <= instruction_memory_V_q0;
                offset_V_reg_719 <= offset_V_fu_386_p1;
                opcode_V_reg_693 <= instruction_memory_V_q0(24 downto 22);
                sr2_V_reg_703 <= instruction_memory_V_q0(15 downto 10);
                tmp_12_reg_724 <= instruction_memory_V_q0(21 downto 21);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                op1_V_reg_749 <= op1_V_fu_438_p3;
                rhs_V_reg_769 <= rhs_V_fu_523_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                r_V_5_reg_818 <= r_V_5_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                r_V_7_reg_808 <= r_V_7_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                result_V_2_reg_873 <= grp_fu_654_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (halted_V_read_read_fu_124_p2 = ap_const_lv1_0))) then
                t_V_load_1_reg_677 <= t_V_fu_106;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, halted_V_read_read_fu_124_p2, opcode_V_reg_693, intop_V_reg_715, ap_CS_fsm_state4, grp_fu_292_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (halted_V_read_read_fu_124_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (((opcode_V_reg_693 = ap_const_lv3_0) and (intop_V_reg_715 = ap_const_lv4_D) and (ap_const_lv1_1 = grp_fu_292_p3)) or ((opcode_V_reg_693 = ap_const_lv3_1) and (intop_V_reg_715 = ap_const_lv4_D) and (ap_const_lv1_1 = grp_fu_292_p3))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((opcode_V_reg_693 = ap_const_lv3_0) and (intop_V_reg_715 = ap_const_lv4_D) and (ap_const_lv1_0 = grp_fu_292_p3)) or ((opcode_V_reg_693 = ap_const_lv3_1) and (intop_V_reg_715 = ap_const_lv4_D) and (ap_const_lv1_0 = grp_fu_292_p3))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((opcode_V_reg_693 = ap_const_lv3_0) and (intop_V_reg_715 = ap_const_lv4_E) and (ap_const_lv1_1 = grp_fu_292_p3)) or ((opcode_V_reg_693 = ap_const_lv3_1) and (intop_V_reg_715 = ap_const_lv4_E) and (ap_const_lv1_1 = grp_fu_292_p3))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((opcode_V_reg_693 = ap_const_lv3_0) and (intop_V_reg_715 = ap_const_lv4_E) and (ap_const_lv1_0 = grp_fu_292_p3)) or ((opcode_V_reg_693 = ap_const_lv3_1) and (intop_V_reg_715 = ap_const_lv4_E) and (ap_const_lv1_0 = grp_fu_292_p3))))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((intop_V_reg_715 = ap_const_lv4_F) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_F) and (opcode_V_reg_693 = ap_const_lv3_1)) or (opcode_V_reg_693 = ap_const_lv3_5) or (opcode_V_reg_693 = ap_const_lv3_6) or (opcode_V_reg_693 = ap_const_lv3_7)))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((intop_V_reg_715 = ap_const_lv4_0) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_1) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_0) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_1) and (opcode_V_reg_693 = ap_const_lv3_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((opcode_V_reg_693 = ap_const_lv3_0) and (intop_V_reg_715 = ap_const_lv4_2)) or ((opcode_V_reg_693 = ap_const_lv3_1) and (intop_V_reg_715 = ap_const_lv4_2))))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((opcode_V_reg_693 = ap_const_lv3_0) and (intop_V_reg_715 = ap_const_lv4_3)) or ((opcode_V_reg_693 = ap_const_lv3_1) and (intop_V_reg_715 = ap_const_lv4_3))))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((intop_V_reg_715 = ap_const_lv4_4) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_5) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_4) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_6) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_5) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_7) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_6) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_8) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_7) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_9) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_8) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_A) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_9) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_B) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_A) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_C) and (opcode_V_reg_693 = ap_const_lv3_0)) or ((intop_V_reg_715 = ap_const_lv4_B) and (opcode_V_reg_693 = ap_const_lv3_1)) or ((intop_V_reg_715 = ap_const_lv4_C) and (opcode_V_reg_693 = ap_const_lv3_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (opcode_V_reg_693 = ap_const_lv3_2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (opcode_V_reg_693 = ap_const_lv3_3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, halted_V_read_read_fu_124_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (halted_V_read_read_fu_124_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, halted_V_read_read_fu_124_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (halted_V_read_read_fu_124_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_memory_V_address0_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_536_p1, ap_CS_fsm_state5, tmp_8_fu_541_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_memory_V_address0 <= tmp_8_fu_541_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_memory_V_address0 <= tmp_3_fu_536_p1(10 - 1 downto 0);
        else 
            data_memory_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_memory_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_memory_V_ce0 <= ap_const_logic_1;
        else 
            data_memory_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_memory_V_d0 <= regfile_V_q0;

    data_memory_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_memory_V_we0 <= ap_const_logic_1;
        else 
            data_memory_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_292_p3 <= rhs_V_fu_523_p3(31 downto 31);
    grp_fu_299_p2 <= std_logic_vector(unsigned(t_V_fu_106) + unsigned(ap_const_lv32_1));
    grp_fu_310_p2 <= std_logic_vector(signed(rhs_V_reg_769) + signed(op1_V_reg_749));
    grp_fu_314_p2 <= std_logic_vector(unsigned(t_V_load_1_reg_677) + unsigned(ap_const_lv32_1));
    grp_fu_324_p2 <= "1" when (op1_V_reg_749 = rhs_V_reg_769) else "0";
    grp_fu_328_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(rhs_V_reg_769));
    grp_fu_333_p2 <= "1" when (signed(op1_V_reg_749) < signed(rhs_V_reg_769)) else "0";

    grp_fu_650_ap_start_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_650_ap_start <= ap_const_logic_1;
        else 
            grp_fu_650_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    halted_V_o_assign_proc : process(halted_V_i, opcode_V_reg_693, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((opcode_V_reg_693 = ap_const_lv3_5) or (opcode_V_reg_693 = ap_const_lv3_6)))) then 
            halted_V_o <= ap_const_lv1_1;
        else 
            halted_V_o <= halted_V_i;
        end if; 
    end process;


    halted_V_o_ap_vld_assign_proc : process(opcode_V_reg_693, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((opcode_V_reg_693 = ap_const_lv3_5) or (opcode_V_reg_693 = ap_const_lv3_6)))) then 
            halted_V_o_ap_vld <= ap_const_logic_1;
        else 
            halted_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    halted_V_read_read_fu_124_p2 <= halted_V_i;
    instruction_memory_V_address0 <= tmp_fu_337_p1(10 - 1 downto 0);

    instruction_memory_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            instruction_memory_V_ce0 <= ap_const_logic_1;
        else 
            instruction_memory_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    intop_V_fu_382_p1 <= instruction_memory_V_q0(4 - 1 downto 0);
    offset_V_fu_386_p1 <= instruction_memory_V_q0(10 - 1 downto 0);
    op1_V_fu_438_p3 <= 
        special_regfile_V_q0 when (tmp_12_reg_724(0) = '1') else 
        regfile_V_q0;
        op2_V_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sr2_V_reg_703),32));

        p_0130_0_pn_cast_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0130_0_pn_fu_550_p3),32));

    p_0130_0_pn_fu_550_p3 <= 
        offset_V_reg_719 when (grp_fu_324_p2(0) = '1') else 
        ap_const_lv10_1;
    pc_V_fu_561_p2 <= std_logic_vector(signed(p_0130_0_pn_cast_fu_557_p1) + signed(t_V_load_1_reg_677));
        r_V_1_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_418_p2),33));

    r_V_1_fu_418_p2 <= (sr2_V_fu_362_p4 xor ap_const_lv6_20);
    r_V_4_fu_580_p2 <= std_logic_vector(shift_left(unsigned(op1_V_reg_749),to_integer(unsigned('0' & rhs_V_reg_769(31-1 downto 0)))));
    r_V_5_fu_584_p2 <= std_logic_vector(shift_right(signed(op1_V_reg_749),to_integer(unsigned('0' & grp_fu_328_p2(31-1 downto 0)))));
    r_V_6_fu_571_p2 <= std_logic_vector(shift_right(signed(op1_V_reg_749),to_integer(unsigned('0' & rhs_V_reg_769(31-1 downto 0)))));
    r_V_7_fu_575_p2 <= std_logic_vector(shift_left(unsigned(op1_V_reg_749),to_integer(unsigned('0' & grp_fu_328_p2(31-1 downto 0)))));
    r_V_8_fu_598_p2 <= (rhs_V_reg_769 and op1_V_reg_749);
    r_V_9_fu_594_p2 <= (rhs_V_reg_769 or op1_V_reg_749);
        r_V_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_398_p2),33));

    r_V_fu_398_p2 <= (sr1_V_fu_352_p4 xor ap_const_lv6_20);

    regfile_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_1_fu_413_p1, tmp_2_fu_532_p1, tmp_7_fu_662_p1, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            regfile_V_address0 <= tmp_7_fu_662_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regfile_V_address0 <= tmp_2_fu_532_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regfile_V_address0 <= tmp_1_fu_413_p1(5 - 1 downto 0);
        else 
            regfile_V_address0 <= "XXXXX";
        end if; 
    end process;


    regfile_V_address1_assign_proc : process(ap_CS_fsm_state3, tmp_5_fu_433_p1, tmp_9_fu_546_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regfile_V_address1 <= tmp_9_fu_546_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regfile_V_address1 <= tmp_5_fu_433_p1(5 - 1 downto 0);
        else 
            regfile_V_address1 <= "XXXXX";
        end if; 
    end process;


    regfile_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            regfile_V_ce0 <= ap_const_logic_1;
        else 
            regfile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regfile_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            regfile_V_ce1 <= ap_const_logic_1;
        else 
            regfile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regfile_V_we0_assign_proc : process(opcode_V_reg_693, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and ((opcode_V_reg_693 = ap_const_lv3_0) or (opcode_V_reg_693 = ap_const_lv3_1)))) then 
            regfile_V_we0 <= ap_const_logic_1;
        else 
            regfile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regfile_V_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regfile_V_we1 <= ap_const_logic_1;
        else 
            regfile_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_12_fu_589_p2 <= (op1_V_reg_749 xor ap_const_lv32_FFFFFFFF);
    result_V_1_fu_658_p2 <= std_logic_vector(signed(op1_V_reg_749) - signed(rhs_V_reg_769));
    result_V_4_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_1_fu_642_p2),32));
    result_V_5_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_333_p2),32));
    result_V_6_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev_fu_628_p2),32));
    result_V_7_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev1_fu_618_p2),32));
    result_V_8_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_324_p2),32));
    result_V_9_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_6_fu_602_p2),32));
    rev1_fu_618_p2 <= (slt1_fu_614_p2 xor ap_const_lv1_1);
    rev_fu_628_p2 <= (grp_fu_333_p2 xor ap_const_lv1_1);
    rhs_V_fu_523_p3 <= 
        special_regfile_V_q1 when (sel_tmp7_fu_517_p2(0) = '1') else 
        sel_tmp5_fu_482_p3;
    sel_tmp1_fu_460_p2 <= "1" when (opcode_V_reg_693 = ap_const_lv3_3) else "0";
    sel_tmp2_fu_465_p2 <= "1" when (opcode_V_reg_693 = ap_const_lv3_1) else "0";
    sel_tmp3_fu_495_p2 <= "0" when (opcode_V_reg_693 = ap_const_lv3_3) else "1";
    sel_tmp4_fu_476_p2 <= (tmp1_fu_470_p2 or sel_tmp_fu_455_p2);
    sel_tmp5_fu_482_p3 <= 
        op2_V_fu_452_p1 when (sel_tmp4_fu_476_p2(0) = '1') else 
        regfile_V_q1;
    sel_tmp6_fu_500_p2 <= "0" when (opcode_V_reg_693 = ap_const_lv3_1) else "1";
    sel_tmp7_fu_517_p2 <= (tmp3_fu_511_p2 and tmp2_fu_505_p2);
    sel_tmp9_fu_490_p2 <= "0" when (opcode_V_reg_693 = ap_const_lv3_4) else "1";
    sel_tmp_fu_455_p2 <= "1" when (opcode_V_reg_693 = ap_const_lv3_4) else "0";
    slt1_fu_614_p2 <= "1" when (signed(rhs_V_reg_769) < signed(op1_V_reg_749)) else "0";

    special_regfile_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_s_fu_408_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            special_regfile_V_address0 <= tmp_s_fu_408_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            special_regfile_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            special_regfile_V_address0 <= "XXXXX";
        end if; 
    end process;

    special_regfile_V_address1 <= tmp_4_fu_428_p1(5 - 1 downto 0);

    special_regfile_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            special_regfile_V_ce0 <= ap_const_logic_1;
        else 
            special_regfile_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    special_regfile_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            special_regfile_V_ce1 <= ap_const_logic_1;
        else 
            special_regfile_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    special_regfile_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            special_regfile_V_we0 <= ap_const_logic_1;
        else 
            special_regfile_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sr1_V_fu_352_p4 <= instruction_memory_V_q0(21 downto 16);
    sr2_V_fu_362_p4 <= instruction_memory_V_q0(15 downto 10);
    tmp1_fu_470_p2 <= (sel_tmp1_fu_460_p2 or sel_tmp2_fu_465_p2);
    tmp2_fu_505_p2 <= (sel_tmp9_fu_490_p2 and sel_tmp3_fu_495_p2);
    tmp3_fu_511_p2 <= (sel_tmp6_fu_500_p2 and tmp_13_fu_445_p3);
    tmp_13_fu_445_p3 <= ir_V_reg_688(15 downto 15);
    tmp_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sr1_V_fu_352_p4),64));
    tmp_2_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dr_V_reg_708),64));
        tmp_3_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_310_p2),64));

    tmp_4_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_cast_fu_424_p1),64));
    tmp_5_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sr2_V_fu_362_p4),64));
    tmp_7_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dr_V_reg_708),64));
        tmp_8_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_310_p2),64));

    tmp_9_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dr_V_reg_708),64));
        tmp_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_fu_106),64));

    tmp_s_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_cast_fu_404_p1),64));
    val_assign_1_fu_642_p2 <= "1" when (signed(op1_V_reg_749) > signed(rhs_V_reg_769)) else "0";
    val_assign_6_fu_602_p2 <= "0" when (op1_V_reg_749 = rhs_V_reg_769) else "1";
end behav;
